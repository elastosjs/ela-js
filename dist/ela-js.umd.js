(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('web3')) :
  typeof define === 'function' && define.amd ? define(['web3'], factory) :
  (global = global || self, global['ela-js'] = factory(global.Web3));
}(this, (function (Web3) { 'use strict';

  Web3 = Web3 && Object.prototype.hasOwnProperty.call(Web3, 'default') ? Web3['default'] : Web3;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty = _defineProperty;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var lodash = createCommonjsModule(function (module, exports) {
  (function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined$1;

    /** Used as the semantic version number. */
    var VERSION = '4.17.15';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports =  exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : (result + current);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined$1,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
          symIterator = Symbol ? Symbol.iterator : undefined$1,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined$1,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
          symbolToString = symbolProto ? symbolProto.toString : undefined$1;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined$1;
          return result;
        };
      }());

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined$1 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined$1 : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined$1;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined$1 && !eq(object[key], value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined$1 : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined$1) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined$1) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined$1) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }

        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);

        var props = isArr ? undefined$1 : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined$1, args); }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined$1
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined$1 || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined$1;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined$1;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined$1
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined$1 && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack);
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
              : undefined$1;

            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined$1;

        var isCommon = newValue === undefined$1;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined$1;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);

        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined$1;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined$1,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}

        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined$1;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined$1 ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined$1,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined$1,
              guard = length > 2 ? sources[2] : undefined$1;

          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined$1;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$1 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);

          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined$1;

          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);

          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
              args, holders, undefined$1, undefined$1, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined$1;

            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined$1 : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result = value;
          }
          if (other !== undefined$1) {
            if (result === undefined$1) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined$1 ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined$1,
            newHoldersRight = isCurry ? undefined$1 : holders,
            newPartials = isCurry ? partials : undefined$1,
            newPartialsRight = isCurry ? undefined$1 : partials;

        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];

        var result = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined$1;
        }
        var data = isBindKey ? undefined$1 : getData(func);

        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined$1, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined$1 : value;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined$1
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined$1;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined$1,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor;

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor;

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
          (type == 'number' ||
            (type != 'symbol' && reIsUint.test(value))) &&
              (value > -1 && value % 1 == 0 && value < length);
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined$1 || (key in Object(object)));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
        }
        return array;
      }

      /**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }

        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined$1 ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46 /* . */) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined$1;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined$1;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined$1, comparator)
          : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined$1;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined$1, comparator)
          : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined$1, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined$1;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };

        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined$1);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined$1 : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined$1;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined$1;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result;
        }

        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }

        function flush() {
          return timerId === undefined$1 ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        var result = customizer ? customizer(value, other) : undefined$1;
        return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined$1;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(object, sources) {
        object = Object(object);

        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined$1 ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined$1 : baseGet(object, path);
        return result === undefined$1 ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined$1;
        }
        while (++index < length) {
          var value = object == null ? undefined$1 : object[toKey(path[index])];
          if (value === undefined$1) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined$1;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined$1
          ? length
          : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);

        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);

        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        // The sourceURL gets injected into the source that's eval-ed, so be careful
        // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
        // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
        var sourceURL = '//# sourceURL=' +
          (hasOwnProperty.call(options, 'sourceURL')
            ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        // Like with sourceURL, we take care to not check the option's prototype,
        // as this configuration is a code injection vector.
        var variable = hasOwnProperty.call(options, 'variable') && options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined$1, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrim, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimEnd, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);

        if (separator === undefined$1) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined$1 : pattern;

        if (pattern === undefined$1) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined$1;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined$1;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined$1;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined$1;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + '';
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined$1
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(commonjsGlobal));
  });

  var bytes32ToStr = function bytes32ToStr(buf) {
    return lodash.trimStart(buf.toString(), "\0");
  };

  var bytes32ToUint = function bytes32ToUint(buf) {
    var buf4 = new Buffer.alloc(4);
    buf.copy(buf4, 0, 28);
    return parseInt(buf4.readUInt32BE().toString(10));
  };

  var bytesToTypes = {
    bytes32ToStr: bytes32ToStr,
    bytes32ToUint: bytes32ToUint
  };

  // not really needed - use Web3.utils.stringToHex
  var strToBytes32 = function strToBytes32(input) {
    var targetBuf = new Buffer.alloc(32);
    var inputBuf = new Buffer.from(input);
    var inputByteLen = inputBuf.byteLength; // overflow isn't written

    inputBuf.copy(targetBuf, inputByteLen < 32 ? 32 - inputByteLen : 0);
    return targetBuf;
  };

  var uintToBytes32 = function uintToBytes32(input) {
    var inputBuf = new Buffer.alloc(4);
    inputBuf.writeUInt32BE(input);
    var targetBuf = new Buffer.alloc(32);
    inputBuf.copy(targetBuf, 28);
    return targetBuf;
  };

  var typesToBytes = {
    strToBytes32: strToBytes32,
    uintToBytes32: uintToBytes32
  };

  var _require = require('sha3'),
      Keccak = _require.Keccak;

  var sha3 = new Keccak(256);

  function namehashInner(input) {
    if (input === '') {
      return new Buffer.alloc(32);
    }

    var inputSplit = input.split('.');
    var label = inputSplit.shift();
    var remainder = inputSplit.join('.');
    var labelSha3 = sha3.update(label).digest(); // console.log(labelSha3.toString('hex'))

    sha3.reset();
    var iter = sha3.update(Buffer.concat([namehashInner(remainder), labelSha3])).digest();
    sha3.reset(); // TODO: figure out why this needs to be here

    return iter;
  }

  function namehash(input) {
    return '0x' + namehashInner(input).toString('hex');
  }
   // 0000000000000000000000000000000000000000000000000000000000000000

  var _require$1 = require('sha3'),
      Keccak$1 = _require$1.Keccak;

  var sha3$1 = new Keccak$1(256);

  function keccak256(input) {
    if (input.substring(0, 2) === '0x') {
      input = Buffer.from(input.substring(2), 'hex');
    }

    sha3$1.reset();
    var hash = sha3$1.update(input).digest();
    return '0x' + hash.toString('hex');
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] =
      GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  var constants = {
    NETWORK: {
      LOCAL: 'LOCAL',
      TESTNET: 'TESTNET',
      MAINNET: 'MAINNET'
    },
    SIGNER: {
      EPHEMERAL: 'EPHEMERAL',
      FORTMATIC: 'FORTMATIC'
    },
    FIELD_TYPE: {
      STRING: 'STRING',
      NUMBER: 'NUMBER'
    }
  };

  var _config;
  var config = (_config = {}, defineProperty(_config, constants.NETWORK.LOCAL, {
    relayHubAddress: '0xD216153c06E857cD7f72665E0aF1d7D82172F494'
  }), defineProperty(_config, constants.NETWORK.TESTNET, {
    relayHubAddress: '0x2EDA8d1A61824dFa812C4bd139081B9BcB972A6D'
  }), _config);

  var relayHubData = {
    abi: [{
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [{
        "name": "",
        "type": "string"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": false,
        "name": "stake",
        "type": "uint256"
      }, {
        "indexed": false,
        "name": "unstakeDelay",
        "type": "uint256"
      }],
      "name": "Staked",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": true,
        "name": "owner",
        "type": "address"
      }, {
        "indexed": false,
        "name": "transactionFee",
        "type": "uint256"
      }, {
        "indexed": false,
        "name": "stake",
        "type": "uint256"
      }, {
        "indexed": false,
        "name": "unstakeDelay",
        "type": "uint256"
      }, {
        "indexed": false,
        "name": "url",
        "type": "string"
      }],
      "name": "RelayAdded",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": false,
        "name": "unstakeTime",
        "type": "uint256"
      }],
      "name": "RelayRemoved",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": false,
        "name": "stake",
        "type": "uint256"
      }],
      "name": "Unstaked",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "recipient",
        "type": "address"
      }, {
        "indexed": true,
        "name": "from",
        "type": "address"
      }, {
        "indexed": false,
        "name": "amount",
        "type": "uint256"
      }],
      "name": "Deposited",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "account",
        "type": "address"
      }, {
        "indexed": true,
        "name": "dest",
        "type": "address"
      }, {
        "indexed": false,
        "name": "amount",
        "type": "uint256"
      }],
      "name": "Withdrawn",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": true,
        "name": "from",
        "type": "address"
      }, {
        "indexed": true,
        "name": "to",
        "type": "address"
      }, {
        "indexed": false,
        "name": "selector",
        "type": "bytes4"
      }, {
        "indexed": false,
        "name": "reason",
        "type": "uint256"
      }],
      "name": "CanRelayFailed",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": true,
        "name": "from",
        "type": "address"
      }, {
        "indexed": true,
        "name": "to",
        "type": "address"
      }, {
        "indexed": false,
        "name": "selector",
        "type": "bytes4"
      }, {
        "indexed": false,
        "name": "status",
        "type": "uint8"
      }, {
        "indexed": false,
        "name": "charge",
        "type": "uint256"
      }],
      "name": "TransactionRelayed",
      "type": "event"
    }, {
      "anonymous": false,
      "inputs": [{
        "indexed": true,
        "name": "relay",
        "type": "address"
      }, {
        "indexed": false,
        "name": "sender",
        "type": "address"
      }, {
        "indexed": false,
        "name": "amount",
        "type": "uint256"
      }],
      "name": "Penalized",
      "type": "event"
    }, {
      "constant": false,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }, {
        "name": "unstakeDelay",
        "type": "uint256"
      }],
      "name": "stake",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "transactionFee",
        "type": "uint256"
      }, {
        "name": "url",
        "type": "string"
      }],
      "name": "registerRelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }],
      "name": "removeRelayByOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }],
      "name": "unstake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }],
      "name": "getRelay",
      "outputs": [{
        "name": "totalStake",
        "type": "uint256"
      }, {
        "name": "unstakeDelay",
        "type": "uint256"
      }, {
        "name": "unstakeTime",
        "type": "uint256"
      }, {
        "name": "owner",
        "type": "address"
      }, {
        "name": "state",
        "type": "uint8"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "target",
        "type": "address"
      }],
      "name": "depositFor",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "target",
        "type": "address"
      }],
      "name": "balanceOf",
      "outputs": [{
        "name": "",
        "type": "uint256"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "amount",
        "type": "uint256"
      }, {
        "name": "dest",
        "type": "address"
      }],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "from",
        "type": "address"
      }],
      "name": "getNonce",
      "outputs": [{
        "name": "",
        "type": "uint256"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }],
      "name": "canUnstake",
      "outputs": [{
        "name": "",
        "type": "bool"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "relay",
        "type": "address"
      }, {
        "name": "from",
        "type": "address"
      }, {
        "name": "to",
        "type": "address"
      }, {
        "name": "encodedFunction",
        "type": "bytes"
      }, {
        "name": "transactionFee",
        "type": "uint256"
      }, {
        "name": "gasPrice",
        "type": "uint256"
      }, {
        "name": "gasLimit",
        "type": "uint256"
      }, {
        "name": "nonce",
        "type": "uint256"
      }, {
        "name": "signature",
        "type": "bytes"
      }, {
        "name": "approvalData",
        "type": "bytes"
      }],
      "name": "canRelay",
      "outputs": [{
        "name": "status",
        "type": "uint256"
      }, {
        "name": "recipientContext",
        "type": "bytes"
      }],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "from",
        "type": "address"
      }, {
        "name": "recipient",
        "type": "address"
      }, {
        "name": "encodedFunction",
        "type": "bytes"
      }, {
        "name": "transactionFee",
        "type": "uint256"
      }, {
        "name": "gasPrice",
        "type": "uint256"
      }, {
        "name": "gasLimit",
        "type": "uint256"
      }, {
        "name": "nonce",
        "type": "uint256"
      }, {
        "name": "signature",
        "type": "bytes"
      }, {
        "name": "approvalData",
        "type": "bytes"
      }],
      "name": "relayCall",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "recipient",
        "type": "address"
      }, {
        "name": "encodedFunctionWithFrom",
        "type": "bytes"
      }, {
        "name": "transactionFee",
        "type": "uint256"
      }, {
        "name": "gasPrice",
        "type": "uint256"
      }, {
        "name": "gasLimit",
        "type": "uint256"
      }, {
        "name": "preChecksGas",
        "type": "uint256"
      }, {
        "name": "recipientContext",
        "type": "bytes"
      }],
      "name": "recipientCallsAtomic",
      "outputs": [{
        "name": "",
        "type": "uint8"
      }],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "relayedCallStipend",
        "type": "uint256"
      }],
      "name": "requiredGas",
      "outputs": [{
        "name": "",
        "type": "uint256"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": true,
      "inputs": [{
        "name": "relayedCallStipend",
        "type": "uint256"
      }, {
        "name": "gasPrice",
        "type": "uint256"
      }, {
        "name": "transactionFee",
        "type": "uint256"
      }],
      "name": "maxPossibleCharge",
      "outputs": [{
        "name": "",
        "type": "uint256"
      }],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "unsignedTx1",
        "type": "bytes"
      }, {
        "name": "signature1",
        "type": "bytes"
      }, {
        "name": "unsignedTx2",
        "type": "bytes"
      }, {
        "name": "signature2",
        "type": "bytes"
      }],
      "name": "penalizeRepeatedNonce",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }, {
      "constant": false,
      "inputs": [{
        "name": "unsignedTx",
        "type": "bytes"
      }, {
        "name": "signature",
        "type": "bytes"
      }],
      "name": "penalizeIllegalTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }],
    // address: '0x2EDA8d1A61824dFa812C4bd139081B9BcB972A6D',
    // address: '0xD216153c06E857cD7f72665E0aF1d7D82172F494',
    bytecode: ''
  };

  var fileName = "ELAJSStore.sol";
  var contractName = "ELAJSStore";
  var source = "pragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\nimport \"sol-datastructs/src/contracts/PolymorphicDictionaryLib.sol\";\n\n// import \"sol-datastructs/src/contracts/Bytes32DictionaryLib.sol\";\nimport \"sol-datastructs/src/contracts/Bytes32SetDictionaryLib.sol\";\n\n// import \"./oz/EnumerableSetDictionary.sol\";\n\nimport \"sol-sql/src/contracts/src/structs/TableLib.sol\";\n\nimport \"./ozEla/OwnableELA.sol\";\nimport \"./gsnEla/GSNRecipientELA.sol\";\nimport \"./gsnEla/IRelayHubELA.sol\";\n\ncontract DateTime {\n    function getYear(uint timestamp) public pure returns (uint16);\n    function getMonth(uint timestamp) public pure returns (uint8);\n    function getDay(uint timestamp) public pure returns (uint8);\n}\n\n// TODO: good practice to have functions not callable externally and internally\ncontract ELAJSStore is OwnableELA, GSNRecipientELA {\n\n    // TODO: have a dynamic mode to only use Events -> https://thegraph.com\n    // bool public useEvents = false;\n\n    // DateTime Contract address\n    address public dateTimeAddr = 0xe982E462b094850F12AF94d21D470e21bE9D0E9C; // development\n    // address constant public dateTimeAddr = 0xEDb211a2dBbdE62012440177e65b68E0A66E4531; // testnet\n\n    // Initialize the DateTime contract ABI with the already deployed contract\n    DateTime dateTime = DateTime(dateTimeAddr);\n\n    // This counts the number of times this contract was called via GSN (expended owner gas) for rate limiting\n    // mapping is a keccak256('YYYY-MM-DD') => uint (TODO: we can probably compress this by week (4 bytes per day -> 28 bytes)\n    mapping(bytes32 => uint256) public gsnCounter;\n\n    // Max times we allow this to be called per day\n    uint40 public gsnMaxCallsPerDay;\n\n    using PolymorphicDictionaryLib for PolymorphicDictionaryLib.PolymorphicDictionary;\n    using Bytes32SetDictionaryLib for Bytes32SetDictionaryLib.Bytes32SetDictionary;\n\n    // _table = system table (bytes32 Dict) of each table's metadata marshaled\n    // 8 bits - permissions (00 = system, 01 = private, 10 = public, 11 = shared - owner can always edit)\n    // 20 bytes - address delegate - other address allowed to edit\n    mapping(bytes32 => bytes32) internal _table;\n\n    // table = dict, where the key is the table, and the value is a set of byte32 ids\n    Bytes32SetDictionaryLib.Bytes32SetDictionary internal tableId;\n\n    // Schema dictionary, key (schemasPublicTables) points to a set of table names\n    using TableLib for TableLib.Table;\n    using TableLib for bytes;\n    // using ColumnLib for ColumnLib.Column;\n    // using ColumnLib for bytes;\n\n    // schemaTables -> Set of tables (raw table name values) for enumeration\n    bytes32 constant public schemasTables = 0x736368656d61732e7075626c69632e7461626c65730000000000000000000000;\n\n    // namehash([tableName]) => encoded table schema\n    // ownership of each row (id) - key = namehash([id].[table]) which has a value that is the owner's address\n    // ultimately namehash([field].[id].[table]) gives us a bytes32 which maps to the single data value\n    PolymorphicDictionaryLib.PolymorphicDictionary internal database;\n\n\n    // ************************************* SETUP FUNCTIONS *************************************\n    function initialize() public initializer {\n        OwnableELA.initialize(msg.sender);\n        GSNRecipientELA.initialize();\n        _initialize();\n    }\n\n    function _initialize() internal {\n        gsnMaxCallsPerDay = 1000;\n\n        // init the key for schemasTables, our set is one-to-many-fixed, so table names must be max 32 bytes\n        database.addKey(schemasTables, PolymorphicDictionaryLib.DictionaryType.OneToManyFixed);\n    }\n\n    // ************************************* SCHEMA FUNCTIONS *************************************\n    /**\n     * @dev create a new table, only the owner may create this\n     *\n     * @param tableName right padded zeroes (Web3.utils.stringToHex)\n     * @param tableKey this is the namehash of tableName\n     */\n    function createTable(\n        bytes32 tableName,\n        bytes32 tableKey,\n        uint8 permission,\n        bytes32[] memory columnName,\n        bytes32[] memory columnDtype\n\n    ) public onlyOwner {\n\n        // this only works if tableName is trimmed of padding zeroes, since this is an onlyOwner call we won't bother\n        // require(isNamehashSubOf(keccak256(tableNameBytes), bytes32(0), tableKey), \"tableName does not match tableKey\");\n\n        // check if table exists\n        require(_table[tableKey] == 0, \"Table already exists\");\n\n        address delegate = address(0x0);\n\n        // claim the key slot and set the metadata\n        setTableMetadata(tableKey, permission, delegate);\n\n        database.addValueForKey(schemasTables, tableName);\n\n        // table stores the row ids set as the value, set up the key\n        tableId.addKey(tableKey);\n\n        // now insert the schema\n        saveSchema(tableName, tableKey, columnName, columnDtype);\n    }\n\n    // TODO: this isn't complete\n    function deleteTable(\n        bytes32 tableName,\n        bytes32 tableKey\n    ) public onlyOwner {\n        _table[tableKey] = 0;\n        database.removeValueForKey(schemasTables, tableName);\n        tableId.removeKey(tableKey);\n    }\n\n    function getTables() external view returns (bytes32[] memory){\n        return database.enumerateForKeyOneToManyFixed(schemasTables);\n    }\n\n    /*\n    function tableExists(bytes32 tableKey) public view returns (bool) {\n        return tableId.containsKey(tableKey);\n    }\n    */\n\n    function saveSchema(\n        bytes32 tableName,\n        bytes32 tableKey,\n        bytes32[] memory columnName,\n        bytes32[] memory columnDtype\n\n    ) public onlyOwner returns (bool) {\n\n        TableLib.Table memory tableSchema = TableLib.create(\n            tableName,\n            columnName,\n            columnDtype\n        );\n\n        bytes memory encoded = tableSchema.encode();\n\n        // we store the encoded table schema on the base tableKey\n        return database.setValueForKey(tableKey, encoded);\n    }\n\n    // EXPERIMENTAL\n    function getSchema(bytes32 _name) public view returns (TableLib.Table memory) {\n        bytes memory encoded = database.getBytesForKey(_name);\n        return encoded.decodeTable();\n    }\n\n    // ************************************* CRUD FUNCTIONS *************************************\n\n    /**\n     * @dev Table level permission checks\n     */\n    modifier insertCheck(bytes32 tableKey) {\n\n        (uint256 permission, address delegate) = getTableMetadata(tableKey);\n\n        // if permission = 0, system table we can't do anything\n        require(permission > 0, \"Cannot INSERT into system table\");\n\n        // if permission = 1, we must be the owner/delegate\n        require(permission > 1 || isOwner() == true || delegate == _msgSender(), \"Only owner/delegate can INSERT into this table\");\n\n        _;\n    }\n\n\n    /**\n     * Primarily exists to assist in query WHERE searches, therefore we\n     * want the index to exist on the value and table, filtering on owner\n     * is important for performance\n     */\n    event InsertVal (\n        bytes32 indexed tableKey,\n        bytes32 indexed fieldKey,\n        bytes32 indexed val,\n\n        bytes32 id,\n\n        address owner\n    );\n\n\n    /**\n     * @dev Prior to insert, we check the permissions and autoIncrement\n     * TODO: use the schema and determine the proper type of data to insert\n     *\n     * @param tableKey the namehashed [table] name string\n     * @param idKey the sha3 hashed idKey\n     * @param id as the raw string (unhashed)\n     */\n    function insertVal(\n\n        bytes32 tableKey,\n        bytes32 idKey,\n        bytes32 fieldKey,\n\n        bytes32 id,\n        bytes32 val)\n\n    public insertCheck(tableKey){\n\n        bytes32 idTableKey = namehash(idKey, tableKey);\n        bytes32 fieldIdTableKey = namehash(fieldKey, idTableKey);\n\n        require(database.containsKey(fieldIdTableKey) == false, \"id+field already exists\");\n\n        // increment counter\n        increaseGsnCounter();\n\n        // add an id entry to the table's set of ids for the row (this is a set so we don't need to check first)\n        // TODO: should we check the id/row ownership?\n        tableId.addValueForKey(tableKey, id);\n\n        // add the \"row owner\" if it doesn't exist, the row may already exist in which case we don't update it\n        if (database.containsKey(idTableKey) == false){\n            _setRowOwner(idTableKey, id, tableKey);\n        }\n\n        // finally set the data\n        // we won't serialize the type, that's way too much redundant data\n        database.setValueForKey(fieldIdTableKey, bytes32(val));\n\n        // emit an event to assist in queries\n        emit InsertVal(tableKey, fieldKey, val, id, _msgSender());\n\n    }\n\n    function insertValVar(\n        bytes32 tableKey,\n        bytes32 idKey,\n        bytes32 fieldKey,\n\n        bytes32 id,\n        bytes memory val)\n\n    public insertCheck(tableKey){\n\n        bytes32 idTableKey = namehash(idKey, tableKey);\n        bytes32 fieldIdTableKey = namehash(fieldKey, idTableKey);\n\n        require(database.containsKey(fieldIdTableKey) == false, \"id+field already exists\");\n\n        // increment counter\n        increaseGsnCounter();\n\n        // add an id entry to the table's set of ids for the row\n        tableId.addValueForKey(tableKey, id);\n\n        // add the \"row owner\" if it doesn't exist, the row may already exist in which case we don't update it\n        if (database.containsKey(idTableKey) == false){\n            _setRowOwner(idTableKey, id, tableKey);\n        }\n\n        // finally set the data\n        database.setValueForKey(fieldIdTableKey, val);\n    }\n\n    /**\n     * @dev we are essentially claiming this [id].[table] for the msg.sender, and setting the id createdDate\n     */\n    function _setRowOwner(bytes32 idTableKey, bytes32 id, bytes32 tableKey) internal {\n\n        require(database.containsKey(idTableKey) == false, \"row already has owner\");\n\n        uint256 rowMetadata;\n\n        uint16 year = dateTime.getYear(now);\n        uint8 month = dateTime.getMonth(now);\n        uint8 day = dateTime.getDay(now);\n\n        rowMetadata |= year;\n        rowMetadata |= uint256(month)<<16;\n        rowMetadata |= uint256(day)<<24;\n\n        bytes4 createdDate = bytes4(uint32(rowMetadata));\n\n        rowMetadata |= uint256(_msgSender())<<32;\n\n        database.setValueForKey(idTableKey, bytes32(rowMetadata));\n\n        // emit InsertRow(id, tableKey, _msgSender());\n    }\n\n    /**\n     * Primarily to assist querying all ids belonging to an owner\n     */\n    /*\n    event InsertRow (\n        bytes32 indexed _id,\n        bytes32 indexed _tableKey,\n        address indexed _rowOwner\n    );\n    */\n\n    function getRowOwner(bytes32 idTableKey) external returns (address rowOwner, bytes4 createdDate){\n\n        uint256 rowMetadata = uint256(database.getBytes32ForKey(idTableKey));\n\n        createdDate = bytes4(uint32(rowMetadata));\n        rowOwner = address(rowMetadata>>32);\n\n    }\n\n    function updateCheck(bytes32 tableKey, bytes32 idKey, bytes32 idTableKey, bytes32 id) internal {\n\n        require(tableId.containsValueForKey(tableKey, id) == true, \"id doesn't exist, use INSERT\");\n\n        (uint256 permission, address delegate) = getTableMetadata(tableKey);\n\n        // if permission = 0, system table we can't do anything\n        require(permission > 0, \"Cannot UPDATE system table\");\n\n        // if permission = 1, we must be the owner/delegate\n        require(permission > 1 || isOwner() == true || delegate == _msgSender(), \"Only owner/delegate can UPDATE into this table\");\n\n        // permissions check (public table = 2, shared table = 3),\n        // if 2 or 3 is the _msg.sender() the row owner? But if 3 owner() is always allowed\n        if (permission >= 2) {\n\n            // rowMetaData is packed as address (bytes20) + createdDate (bytes4)\n            bytes32 rowMetaData = database.getBytes32ForKey(idTableKey);\n            address rowOwner = address(uint256(rowMetaData)>>32);\n\n            // if either 2 or 3, if you're the row owner it's fine\n            if (rowOwner == _msgSender()){\n                // pass\n            } else {\n                require(isOwner() == true || delegate == _msgSender(), \"Not rowOwner or owner/delegate for UPDATE into this table\");\n            }\n        }\n    }\n\n    function updateVal(\n\n        bytes32 tableKey,\n        bytes32 idKey,\n        bytes32 fieldKey,\n\n        bytes32 id,\n        bytes32 val)\n\n    public {\n\n        bytes32 idTableKey = namehash(idKey, tableKey);\n        bytes32 fieldIdTableKey = namehash(fieldKey, idTableKey);\n\n        updateCheck(tableKey, idKey, idTableKey, id);\n\n        // increment counter\n        increaseGsnCounter();\n\n        // set data (overwrite)\n        database.setValueForKey(fieldIdTableKey, bytes32(val));\n\n        // emit an event to assist in queries\n        emit InsertVal(tableKey, fieldKey, val, id, _msgSender());\n    }\n\n    function deleteCheck(bytes32 tableKey, bytes32 idTableKey, bytes32 idKey, bytes32 id) internal {\n\n        require(tableId.containsValueForKey(tableKey, id) == true, \"id doesn't exist\");\n\n        (uint256 permission, address delegate) = getTableMetadata(tableKey);\n\n        // if permission = 0, system table we can't do anything\n        require(permission > 0, \"Cannot DELETE from system table\");\n\n        // if permission = 1, we must be the owner/delegate\n        require(permission > 1 || isOwner() == true || delegate == _msgSender(), \"Only owner/delegate can DELETE from this table\");\n\n        // permissions check (public table = 2, shared table = 3),\n        // if 2 or 3 is the _msg.sender() the row owner? But if 3 owner() is always allowed\n        if (permission >= 2) {\n            if (isOwner() || delegate == _msgSender()){\n                // pass\n            } else {\n                // rowMetaData is packed as address (bytes20) + createdDate (bytes4)\n                bytes32 rowMetaData = database.getBytes32ForKey(idTableKey);\n                address rowOwner = address(uint256(rowMetaData)>>32);\n                require(rowOwner == _msgSender(), \"Sender not owner of row\");\n            }\n        }\n    }\n\n    /**\n     * @dev TODO: add modifier checks based on update\n     *\n     * TODO: this needs to properly remove the row when there are multiple ids\n     *\n     */\n    function deleteVal(\n\n        bytes32 tableKey,\n        bytes32 idKey,\n        bytes32 fieldKey,\n\n        bytes32 id\n\n    ) public {\n\n        bytes32 idTableKey = namehash(idKey, tableKey);\n        bytes32 fieldIdTableKey = namehash(fieldKey, idTableKey);\n\n        deleteCheck(tableKey, idTableKey, idKey, id);\n\n        // increment counter\n        increaseGsnCounter();\n\n        // remove the key\n        bool removed = database.removeKey(fieldIdTableKey);\n\n        require(removed == true, \"error removing key\");\n\n        // TODO: zero out the data? Why bother everything is public\n\n        // we can't really pass in enough data to make a loop worthwhile\n        /*\n        uint8 len = uint8(fieldKeys.length);\n        require(fieldKeys.length == fieldIdTableKeys.length, \"fields, id array length mismatch\");\n        for (uint8 i = 0; i < len; i++) {\n\n            // for each row check if the full field + id + table is a subhash\n            // require(isNamehashSubOf(fieldKeys[i], idTableKey, fieldIdTableKeys[i]) == true, \"fieldKey not a subhash [field].[id].[table]\");\n\n            // zero out the data\n            elajsStore[fieldIdTableKeys[i]] = bytes32(0);\n        }\n        */\n    }\n\n    // TODO: improve this, we don't want to cause data consistency if the client doesn't call this\n    // Right now we manually call this, but ideally we iterate over all the data and delete each column\n    // but this would require decoding and having all the field names\n    function deleteRow(\n\n        bytes32 tableKey,\n        bytes32 idKey,\n        bytes32 id\n\n    ) public {\n\n        bytes32 idTableKey = namehash(idKey, tableKey);\n\n        deleteCheck(tableKey, idTableKey, idKey, id);\n\n        // increment counter\n        increaseGsnCounter();\n\n        // remove the id\n        tableId.removeValueForKey(tableKey, id);\n    }\n\n    /**\n     * @dev Table actual insert call, NOTE this doesn't work on testnet currently due to a stack size issue,\n     *      but it can work with a paid transaction I guess\n     */\n    /*\n    function insert(\n        bytes32 tableKey,\n        bytes32 idTableKey,\n\n        bytes32 idKey,\n        bytes32 id,\n\n        bytes32[] memory fieldKeys,\n        bytes32[] memory fieldIdTableKeys,\n        bytes32[] memory values)\n\n    public insertCheck(tableKey, idKey, idTableKey){\n\n        require(table.containsValueForKey(tableKey, id) == false, \"id already exists\");\n\n        uint len = fieldKeys.length;\n\n        require(fieldKeys.length == fieldIdTableKeys.length == values.length, \"fields, values array length mismatch\");\n\n        // add an id entry to the table's set of ids for the row\n        table.addValueForKey(tableKey, id);\n\n        for (uint i = 0; i < len; i++) {\n\n            // for each row check if the full field + id + table is a subhash\n            require(isNamehashSubOf(fieldKeys[i], idTableKey, fieldIdTableKeys[i]) == true, \"fieldKey not a subhash [field].[id].[table]\");\n\n            elajsStore[fieldIdTableKeys[i]] = bytes32(values[i]);\n        }\n\n    }\n    */\n\n    /*\n    function getAllDataKeys() external view returns (bytes32[] memory) {\n        return database.enumerate();\n    }\n    */\n\n    function checkDataKey(bytes32 key) external view returns (bool) {\n        return database.containsKey(key);\n    }\n\n    /**\n     * @dev all data is public, so no need for security checks, we leave the data type handling to the client\n     */\n    function getRowValue(bytes32 fieldIdTableKey) external view returns (bytes32) {\n\n        if (database.containsKey(fieldIdTableKey)) {\n            return database.getBytes32ForKey(fieldIdTableKey);\n        } else {\n            return bytes32(0);\n        }\n    }\n\n    function getRowValueVar(bytes32 fieldIdTableKey) external view returns (bytes memory) {\n\n        if (database.containsKey(fieldIdTableKey)) {\n            return database.getBytesForKey(fieldIdTableKey);\n        } else {\n            return new bytes(0);\n        }\n    }\n\n    /**\n     * @dev Warning this produces an Error: overflow (operation=\"setValue\", fault=\"overflow\", details=\"Number can only safely store up to 53 bits\")\n     *      if the table doesn't exist\n     */\n    function getTableIds(bytes32 tableKey) external view returns (bytes32[] memory){\n\n        require(tableId.containsKey(tableKey) == true, \"table not created\");\n\n        return tableId.enumerateForKey(tableKey);\n    }\n\n    function getIdExists(bytes32 tableKey, bytes32 id) external view returns (bool) {\n        return tableId.containsValueForKey(tableKey, id);\n    }\n\n    /*\n    function isNamehashSubOf(bytes32 subKey, bytes32 base, bytes32 target) internal pure returns (bool) {\n        bytes32 result = namehash(subKey, base);\n        return result == target;\n    }\n    */\n\n    function namehash(bytes32 subKey, bytes32 base) internal pure returns (bytes32) {\n        bytes memory concat = new bytes(64);\n\n        assembly {\n            mstore(add(concat, 64), subKey)\n            mstore(add(concat, 32), base)\n        }\n\n        bytes32 result = keccak256(concat);\n\n        return result;\n    }\n\n    // ************************************* _TABLE FUNCTIONS *************************************\n    function getTableMetadata(bytes32 _tableKey)\n        view\n        public\n        returns (uint256 permission, address delegate)\n    {\n        require(_table[_tableKey] > 0, \"table does not exist\");\n\n        uint256 tableMetadata = uint256(_table[_tableKey]);\n\n        permission = uint256(uint8(tableMetadata));\n        delegate = address(tableMetadata>>8);\n    }\n\n    function setTableMetadata(bytes32 _tableKey, uint8 permission, address delegate) private onlyOwner {\n        uint256 tableMetadata;\n\n        tableMetadata |= permission;\n        tableMetadata |= uint160(delegate)<<8;\n\n        _table[_tableKey] = bytes32(tableMetadata);\n    }\n\n    // ************************************* MISC FUNCTIONS *************************************\n\n    function() external payable {}\n\n    // ************************************* GSN FUNCTIONS *************************************\n\n    /**\n     * As a first layer of defense we employ a max number of checks per day\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata approvalData,\n        uint256 maxPossibleCharge\n    ) external view returns (uint256, bytes memory) {\n\n        bytes32 curDateHashed = getGsnCounter();\n\n        // check gsnCounter for today and compare to limit\n        uint256 curCounter = gsnCounter[curDateHashed];\n\n        if (curCounter >= gsnMaxCallsPerDay){\n            return _rejectRelayedCall(2);\n        }\n\n\n        return _approveRelayedCall();\n    }\n\n    function setGsnMaxCallsPerDay(uint256 max) external onlyOwner {\n        gsnMaxCallsPerDay = uint40(max);\n    }\n\n    /*\n    event GsnCounterIncrease (\n        address indexed _from,\n        bytes4 indexed curDate\n    );\n    */\n\n    /**\n     * Increase the GSN Counter for today\n     */\n    function increaseGsnCounter() internal {\n\n        bytes32 curDateHashed = getGsnCounter();\n\n        uint256 curCounter = gsnCounter[curDateHashed];\n\n        gsnCounter[curDateHashed] = curCounter + 1;\n\n        // emit GsnCounterIncrease(_msgSender(), bytes4(uint32(curDate)));\n    }\n\n    /*\n     *\n     */\n    function getGsnCounter() internal view returns (bytes32 curDateHashed) {\n\n        uint256 curDate;\n\n        uint16 year = dateTime.getYear(now);\n        uint8 month = dateTime.getMonth(now);\n        uint8 day = dateTime.getDay(now);\n\n        curDate |= year;\n        curDate |= uint256(month)<<16;\n        curDate |= uint256(day)<<24;\n\n        curDateHashed = keccak256(abi.encodePacked(curDate));\n    }\n\n    // We won't do any pre or post processing, so leave _preRelayedCall and _postRelayedCall empty\n    function _preRelayedCall(bytes memory context) internal returns (bytes32) {\n    }\n\n    function _postRelayedCall(bytes memory context, bool, uint256 actualCharge, bytes32) internal {\n    }\n\n    /**\n     * @dev Withdraw a specific amount of the GSNReceipient funds\n     * @param amt Amount of wei to withdraw\n     * @param dest This is the arbitrary withdrawal destination address\n     */\n    function withdraw(uint256 amt, address payable dest) public onlyOwner {\n        IRelayHubELA relayHub = getRelayHub();\n        relayHub.withdraw(amt, dest);\n    }\n\n    /**\n     * @dev Withdraw all the GSNReceipient funds\n     * @param dest This is the arbitrary withdrawal destination address\n     */\n    function withdrawAll(address payable dest) public onlyOwner returns (uint256) {\n        IRelayHubELA relayHub = getRelayHub();\n        uint256 balance = getRelayHub().balanceOf(address(this));\n        relayHub.withdraw(balance, dest);\n        return balance;\n    }\n\n    function getGSNBalance() public view returns (uint256) {\n        return getRelayHub().balanceOf(address(this));\n    }\n\n    function getRelayHub() internal view returns (IRelayHubELA) {\n        return IRelayHubELA(_getRelayHub());\n    }\n}\n";
  var sourcePath = "contracts/ELAJSStore.sol";
  var sourceMap = "782:22569:2:-;;;1018:42;988:72;;;;;;;;;;;;;;;;;;;;1291:12;;;;;;;;;;;1262:42;;;;;;;;;;;;;;;;;;;;782:22569;;;;;;";
  var deployedSourceMap = "782:22569:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22539:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22539:162:2;;;;;;;;;;;;;;;;;;;1653:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1653:31:2;;;;;;;;;;;;;;;;;;;;17412:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17412:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5175:138:2;;;;;;;;;;;;;;;;;;;;10637:280;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10637:280:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3935:962;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3935:962:2;;;;;;;;;;;;;;;;;;;23114:117;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23114:117:2;;;;;;;;;;;;;;;;;;;;8699:891;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8699:891:2;;;;;;;;;;;;;;;;;;;2628:106;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2628:106:2;;;;;;;;;;;;;;;;;;;;1549:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1549:45:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17657:260;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17657:260:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1724:137:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1724:137:17;;;;;;589:90:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;589:90:8;;;;;;;;;;;;;;;;;;;;5458:518:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5458:518:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12256:606;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12256:606:2;;;;;;;;;;;;;;;;;;;945:210:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;945:210:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3180:152:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3180:152:2;;;;;;15730:357;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15730:357:2;;;;;;;;;;;;;;;;;;;20379:655;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20379:655:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14258:1193;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14258:1193:2;;;;;;;;;;;;;;;;;;;937:77:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;937:77:17;;;;;;;;;;;;;;;;;;;;1288:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1288:92:17;;;;;;;;;;;;;;;;;;;;6002:186:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6002:186:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;793:227:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;793:227:8;;;;;;;;;;;;;;;;;;;;7507:1186:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7507:1186:2;;;;;;;;;;;;;;;;;;;21040:110;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21040:110:2;;;;;;;;;;;;;;;;;;;18400:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18400:215:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;719:142:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;719:142:17;;;;;;;;;;;;;;;;;;;988:72:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;988:72:2;;;;;;;;;;;;;;;;;;;;19404:363;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19404:363:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1412:276:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1412:276:11;;;;;;;;;;;;;;;;;;;17923:268:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17923:268:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4936:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4936:233:2;;;;;;;;;;;;;;;;;;;18621:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18621:145:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2010:107:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2010:107:17;;;;;;;;;;;;;;;;;;;22844:264:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22844:264:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22539:162;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;22619:21:2;22643:13;:11;:13::i;:::-;22619:37;;22666:8;:17;;;22684:3;22689:4;22666:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22666:28:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22666:28:2;;;;1197:1:17;22539:162:2;;:::o;1653:31::-;;;;;;;;;;;;;:::o;17412:113::-;17470:4;17493:25;17514:3;17493:8;:20;;:25;;;;:::i;:::-;17486:32;;17412:113;;;:::o;5175:138::-;5219:16;5253:53;2668:66;5292:13;;5253:8;:38;;:53;;;;:::i;:::-;5246:60;;5175:138;:::o;10637:280::-;10696:16;10714:18;10744:19;10774:37;10800:10;10774:8;:25;;:37;;;;:::i;:::-;10766:46;;;10744:68;;10851:11;10837:27;;10823:41;;10906:2;10893:11;:15;52:12:-1;49:1;45:20;29:14;25:41;7:59;;10893:15:2;10874:35;;10637:280;;;;:::o;3935:962::-;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;4448:1:2;4428:21;;:6;:16;4435:8;4428:16;;;;;;;;;;;;:21;4420:54;;;;;;;;;;;;;;;;;;;;;;;;4485:16;4512:3;4485:31;;4578:48;4595:8;4605:10;4617:8;4578:16;:48::i;:::-;4637:49;2668:66;4661:13;;4676:9;4637:8;:23;;:49;;;;;:::i;:::-;;4766:24;4781:8;4766:7;:14;;:24;;;;:::i;:::-;;4834:56;4845:9;4856:8;4866:10;4878:11;4834:10;:56::i;:::-;;1197:1:17;3935:962:2;;;;;:::o;23114:117::-;23160:7;23186:13;:11;:13::i;:::-;:23;;;23218:4;23186:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23186:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23186:38:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;23186:38:2;;;;;;;;;23179:45;;23114:117;:::o;8699:891::-;8868:8;6402:18;6422:16;6442:26;6459:8;6442:16;:26::i;:::-;6401:67;;;;6564:1;6551:10;:14;6543:58;;;;;;;;;;;;;;;;;;;;;;;;6693:1;6680:10;:14;:35;;;;6711:4;6698:17;;:9;:7;:9::i;:::-;:17;;;6680:35;:63;;;;6731:12;:10;:12::i;:::-;6719:24;;:8;:24;;;6680:63;6672:122;;;;;;;;;;;;;;;;;;;;;;;;8888:18;8909:25;8918:5;8925:8;8909;:25::i;:::-;8888:46;;8944:23;8970:30;8979:8;8989:10;8970:8;:30::i;:::-;8944:56;;9060:5;9019:46;;:37;9040:15;9019:8;:20;;:37;;;;:::i;:::-;:46;;;9011:82;;;;;;;;;;;;;;;;;;;;;;;;9133:20;:18;:20::i;:::-;9229:36;9252:8;9262:2;9229:7;:22;;:36;;;;;:::i;:::-;;9427:5;9391:41;;:32;9412:10;9391:8;:20;;:32;;;;:::i;:::-;:41;;;9387:109;;;9447:38;9460:10;9472:2;9476:8;9447:12;:38::i;:::-;9387:109;9538:45;9562:15;9579:3;9538:8;:23;;:45;;;;;:::i;:::-;;6805:1;;8699:891;;;;;;;;:::o;2628:106::-;2668:66;2628:106;;;:::o;1549:45::-;;;;;;;;;;;;;;;;;:::o;17657:260::-;17726:7;17750:37;17771:15;17750:8;:20;;:37;;;;:::i;:::-;17746:165;;;17810:42;17836:15;17810:8;:25;;:42;;;;:::i;:::-;17803:49;;;;17746:165;17898:1;17890:10;;17883:17;;17657:260;;;;:::o;1724:137:17:-;1141:9;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;1822:1;1785:40;;1806:6;;;;;;;;;;;1785:40;;;;;;;;;;;;1852:1;1835:6;;:19;;;;;;;;;;;;;;;;;;1724:137::o;589:90:8:-;632:7;658:14;:12;:14::i;:::-;651:21;;589:90;:::o;5458:518:2:-;5639:4;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;5656:33:2;;:::i;:::-;5692:97;5721:9;5744:10;5768:11;5692:15;:97::i;:::-;5656:133;;5800:20;5823;:11;:18;:20::i;:::-;5800:43;;5927:42;5951:8;5961:7;5927:8;:23;;:42;;;;;:::i;:::-;5920:49;;;;5458:518;;;;;;:::o;12256:606::-;12417:18;12438:25;12447:5;12454:8;12438;:25::i;:::-;12417:46;;12473:23;12499:30;12508:8;12518:10;12499:8;:30::i;:::-;12473:56;;12540:44;12552:8;12562:5;12569:10;12581:2;12540:11;:44::i;:::-;12624:20;:18;:20::i;:::-;12687:54;12711:15;12736:3;12687:8;:23;;:54;;;;;:::i;:::-;;12833:3;12823:8;12813;12803:52;12838:2;12842:12;:10;:12::i;:::-;12803:52;;;;;;;;;;;;;;;;12256:606;;;;;;;:::o;945:210:11:-;1011:7;1052:12;:10;:12::i;:::-;1038:26;;:10;:26;;;1030:77;;;;;;;;;;;;;;;;;;;;;;;;1124:24;1140:7;;1124:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1124:24:11;;;;;;:15;:24::i;:::-;1117:31;;945:210;;;;:::o;3180:152:2:-;1055:12:16;;;;;;;;;;;:31;;;;1071:15;:13;:15::i;:::-;1055:31;:47;;;;1091:11;;;;;;;;;;;1090:12;1055:47;1047:106;;;;;;;;;;;;;;;;;;;;;;;;1164:19;1187:12;;;;;;;;;;;1186:13;1164:35;;1213:14;1209:96;;;1258:4;1243:12;;:19;;;;;;;;;;;;;;;;;;1290:4;1276:11;;:18;;;;;;;;;;;;;;;;;;1209:96;3231:33:2;3253:10;3231:21;:33::i;:::-;3274:28;:26;:28::i;:::-;3312:13;:11;:13::i;:::-;1331:14:16;1327:65;;;1376:5;1361:12;;:20;;;;;;;;;;;;;;;;;;1327:65;3180:152:2;:::o;15730:357::-;15844:18;15865:25;15874:5;15881:8;15865;:25::i;:::-;15844:46;;15901:44;15913:8;15923:10;15935:5;15942:2;15901:11;:44::i;:::-;15985:20;:18;:20::i;:::-;16041:39;16067:8;16077:2;16041:7;:25;;:39;;;;;:::i;:::-;;15730:357;;;;:::o;20379:655::-;20699:7;20708:12;20733:21;20757:15;:13;:15::i;:::-;20733:39;;20842:18;20863:10;:25;20874:13;20863:25;;;;;;;;;;;;20842:46;;20917:17;;;;;;;;;;;20903:31;;:10;:31;;20899:89;;;20956:21;20975:1;20956:18;:21::i;:::-;20949:28;;;;;;;;20899:89;21006:21;:19;:21::i;:::-;20999:28;;;;;;20379:655;;;;;;;;;;;;;;;:::o;14258:1193::-;14399:18;14420:25;14429:5;14436:8;14420;:25::i;:::-;14399:46;;14455:23;14481:30;14490:8;14500:10;14481:8;:30::i;:::-;14455:56;;14522:44;14534:8;14544:10;14556:5;14563:2;14522:11;:44::i;:::-;14606:20;:18;:20::i;:::-;14663:12;14678:35;14697:15;14678:8;:18;;:35;;;;:::i;:::-;14663:50;;14743:4;14732:15;;:7;:15;;;14724:46;;;;;;;;;;;;;;;;;;;;;;;;14258:1193;;;;;;;:::o;937:77:17:-;975:7;1001:6;;;;;;;;;;;994:13;;937:77;:::o;1288:92::-;1328:4;1367:6;;;;;;;;;;;1351:22;;:12;:10;:12::i;:::-;:22;;;1344:29;;1288:92;:::o;6002:186:2:-;6057:21;;:::i;:::-;6090:20;6113:30;6137:5;6113:8;:23;;:30;;;;:::i;:::-;6090:53;;6160:21;:7;:19;:21::i;:::-;6153:28;;;6002:186;;;:::o;793:227:8:-;841:13;999:14;;;;;;;;;;;;;;;;;;;;793:227;:::o;7507:1186:2:-;7669:8;6402:18;6422:16;6442:26;6459:8;6442:16;:26::i;:::-;6401:67;;;;6564:1;6551:10;:14;6543:58;;;;;;;;;;;;;;;;;;;;;;;;6693:1;6680:10;:14;:35;;;;6711:4;6698:17;;:9;:7;:9::i;:::-;:17;;;6680:35;:63;;;;6731:12;:10;:12::i;:::-;6719:24;;:8;:24;;;6680:63;6672:122;;;;;;;;;;;;;;;;;;;;;;;;7689:18;7710:25;7719:5;7726:8;7710;:25::i;:::-;7689:46;;7745:23;7771:30;7780:8;7790:10;7771:8;:30::i;:::-;7745:56;;7861:5;7820:46;;:37;7841:15;7820:8;:20;;:37;;;;:::i;:::-;:46;;;7812:82;;;;;;;;;;;;;;;;;;;;;;;;7934:20;:18;:20::i;:::-;8133:36;8156:8;8166:2;8133:7;:22;;:36;;;;;:::i;:::-;;8331:5;8295:41;;:32;8316:10;8295:8;:20;;:32;;;;:::i;:::-;:41;;;8291:109;;;8351:38;8364:10;8376:2;8380:8;8351:12;:38::i;:::-;8291:109;8517:54;8541:15;8566:3;8517:8;:23;;:54;;;;;:::i;:::-;;8663:3;8653:8;8643;8633:52;8668:2;8672:12;:10;:12::i;:::-;8633:52;;;;;;;;;;;;;;;;6805:1;;7507:1186;;;;;;;;:::o;21040:110::-;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;21139:3:2;21112:17;;:31;;;;;;;;;;;;;;;;;;21040:110;:::o;18400:215::-;18462:16;18531:4;18498:37;;:29;18518:8;18498:7;:19;;:29;;;;:::i;:::-;:37;;;18490:67;;;;;;;;;;;;;;;;;;;;;;;;18575:33;18599:8;18575:7;:23;;:33;;;;:::i;:::-;18568:40;;18400:215;;;:::o;719:142:17:-;1055:12:16;;;;;;;;;;;:31;;;;1071:15;:13;:15::i;:::-;1055:31;:47;;;;1091:11;;;;;;;;;;;1090:12;1055:47;1047:106;;;;;;;;;;;;;;;;;;;;;;;;1164:19;1187:12;;;;;;;;;;;1186:13;1164:35;;1213:14;1209:96;;;1258:4;1243:12;;:19;;;;;;;;;;;;;;;;;;1290:4;1276:11;;:18;;;;;;;;;;;;;;;;;;1209:96;793:6:17;784;;:15;;;;;;;;;;;;;;;;;;847:6;;;;;;;;;;;814:40;;843:1;814:40;;;;;;;;;;;;1331:14:16;1327:65;;;1376:5;1361:12;;:20;;;;;;;;;;;;;;;;;;1327:65;719:142:17;;:::o;988:72:2:-;;;;;;;;;;;;;:::o;19404:363::-;19494:18;19514:16;19574:1;19554:21;;:6;:17;19561:9;19554:17;;;;;;;;;;;;:21;19546:54;;;;;;;;;;;;;;;;;;;;;;;;19611:21;19643:6;:17;19650:9;19643:17;;;;;;;;;;;;19635:26;;;19611:50;;19699:13;19685:29;;19672:42;;19758:1;19743:13;:16;52:12:-1;49:1;45:20;29:14;25:41;7:59;;19743:16:2;19724:36;;19404:363;;;;:::o;1412:276:11:-;1557:12;:10;:12::i;:::-;1543:26;;:10;:26;;;1535:77;;;;;;;;;;;;;;;;;;;;;;;;1622:59;1639:7;;1622:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1622:59:11;;;;;;1648:7;1657:12;1671:9;1622:16;:59::i;:::-;1412:276;;;;;:::o;17923:268:2:-;17995:12;18024:37;18045:15;18024:8;:20;;:37;;;;:::i;:::-;18020:165;;;18084:40;18108:15;18084:8;:23;;:40;;;;:::i;:::-;18077:47;;;;18020:165;18172:1;18162:12;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;18162:12:2;;;;18155:19;;17923:268;;;;:::o;4936:233::-;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;5062:1:2;5043:20;;:6;:16;5050:8;5043:16;;;;;;;;;;;:20;;;;5073:52;2668:66;5100:13;;5115:9;5073:8;:26;;:52;;;;;:::i;:::-;;5135:27;5153:8;5135:7;:17;;:27;;;;:::i;:::-;;4936:233;;:::o;18621:145::-;18695:4;18718:41;18746:8;18756:2;18718:7;:27;;:41;;;;;:::i;:::-;18711:48;;18621:145;;;;:::o;2010:107:17:-;1141:9;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;2082:28;2101:8;2082:18;:28::i;:::-;2010:107;:::o;22844:264:2:-;22913:7;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;22932:21:2;22956:13;:11;:13::i;:::-;22932:37;;22979:15;22997:13;:11;:13::i;:::-;:23;;;23029:4;22997:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22997:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22997:38:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;22997:38:2;;;;;;;;;22979:56;;23045:8;:17;;;23063:7;23072:4;23045:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23045:32:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23045:32:2;;;;23094:7;23087:14;;;;22844:264;;;:::o;23237:112::-;23283:12;23327:14;:12;:14::i;:::-;23307:35;;23237:112;:::o;5682:394:26:-;5806:4;5845:42;5882:4;5845:10;:24;;:36;;:42;;;;:::i;:::-;:103;;;;5903:45;5943:4;5903:10;:27;;:39;;:45;;;;:::i;:::-;5845:103;:162;;;;5964:43;6002:4;5964:10;:25;;:37;;:43;;;;:::i;:::-;5845:162;:224;;;;6023:46;6064:4;6023:10;:28;;:40;;:46;;;;:::i;:::-;5845:224;5826:243;;5682:394;;;;:::o;4706:229::-;4846:16;4881:47;4923:4;4881:10;:25;;:41;;:47;;;;:::i;:::-;4874:54;;4706:229;;;;:::o;9510:203::-;9636:7;9662:44;9702:3;9662:10;:24;;:39;;:44;;;;:::i;:::-;9655:51;;9510:203;;;;:::o;19773:275:2:-;1141:9:17;:7;:9::i;:::-;1133:54;;;;;;;;;;;;;;;;;;;;;;;;19882:21:2;19931:10;19914:27;;;;;;19987:1;19976:8;19968:20;;;;;;19951:37;;;;;;20027:13;20019:22;;19999:6;:17;20006:9;19999:17;;;;;;;;;;;:42;;;;1197:1:17;19773:275:2;;;:::o;20565:632:26:-;20709:4;20747:42;20784:4;20747:10;:24;;:36;;:42;;;;:::i;:::-;20746:43;20725:122;;;;;;;;;;;;;;;;;;;;;;;;20879:45;20919:4;20879:10;:27;;:39;;:45;;;;:::i;:::-;20878:46;20857:125;;;;;;;;;;;;;;;;;;;;;;;;21014:46;21055:4;21014:10;:28;;:40;;:46;;;;:::i;:::-;21013:47;20992:126;;;;;;;;;;;;;;;;;;;;;;;;21136:54;21177:4;21183:6;21136:10;:25;;:40;;:54;;;;;:::i;:::-;21129:61;;20565:632;;;;;:::o;818:168:21:-;925:4;952:27;975:3;952:13;:18;;:22;;:27;;;;:::i;:::-;945:34;;818:168;;;;:::o;2181:207:7:-;2226:7;2263:14;:12;:14::i;:::-;2249:28;;:10;:28;;;;2245:137;;;2300:10;2293:17;;;;2245:137;2348:23;:21;:23::i;:::-;2341:30;;2181:207;;:::o;18981:317:2:-;19052:7;19071:19;19103:2;19093:13;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;19093:13:2;;;;19071:35;;19164:6;19159:2;19151:6;19147:15;19140:31;19208:4;19203:2;19195:6;19191:15;19184:29;19233:14;19260:6;19250:17;;;;;;19233:34;;19285:6;19278:13;;;;18981:317;;;;:::o;21329:282::-;21379:21;21403:15;:13;:15::i;:::-;21379:39;;21429:18;21450:10;:25;21461:13;21450:25;;;;;;;;;;;;21429:46;;21527:1;21514:10;:14;21486:10;:25;21497:13;21486:25;;;;;;;;;;;:42;;;;21329:282;;:::o;2339:312:21:-;2483:4;2503:31;2515:13;2530:3;2503:11;:31::i;:::-;2499:146;;;2557:34;2585:5;2557:13;:18;;:23;2576:3;2557:23;;;;;;;;;;;:27;;:34;;;;:::i;:::-;2550:41;;;;2499:146;2629:5;2622:12;;2339:312;;;;;;:::o;9721:686:2:-;9857:5;9821:41;;:32;9842:10;9821:8;:20;;:32;;;;:::i;:::-;:41;;;9813:75;;;;;;;;;;;;;;;;;;;;;;;;9899:19;9929:11;9943:8;;;;;;;;;;;:16;;;9960:3;9943:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9943:21:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9943:21:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9943:21:2;;;;;;;;;9929:35;;9974:11;9988:8;;;;;;;;;;;:17;;;10006:3;9988:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9988:22:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9988:22:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9988:22:2;;;;;;;;;9974:36;;10020:9;10032:8;;;;;;;;;;;:15;;;10048:3;10032:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10032:20:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10032:20:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10032:20:2;;;;;;;;;10020:32;;10078:4;10063:19;;;;;;10123:2;10115:5;10107:14;;:18;;;;10092:33;;;;10164:2;10158:3;10150:12;;:16;;;;10135:31;;;;10177:18;10212:11;10198:27;;10177:48;;10274:2;10259:12;:10;:12::i;:::-;10251:21;;:25;;;;10236:40;;;;10287:57;10311:10;10331:11;10323:20;;10287:8;:23;;:57;;;;;:::i;:::-;;9721:686;;;;;;;;:::o;19584:637:26:-;19733:4;19771:42;19808:4;19771:10;:24;;:36;;:42;;;;:::i;:::-;19770:43;19749:122;;;;;;;;;;;;;;;;;;;;;;;;19903:43;19941:4;19903:10;:25;;:37;;:43;;;;:::i;:::-;19902:44;19881:123;;;;;;;;;;;;;;;;;;;;;;;;20036:46;20077:4;20036:10;:28;;:40;;:46;;;;:::i;:::-;20035:47;20014:126;;;;;;;;;;;;;;;;;;;;;;;;20158:56;20201:4;20207:6;20158:10;:27;;:42;;:56;;;;;:::i;:::-;20151:63;;19584:637;;;;;:::o;1110:248:7:-;1157:16;1185:12;754:66;1200:30;;1185:45;;1337:4;1331:11;1319:23;;1305:47;;:::o;1327:396:31:-;1472:12;;:::i;:::-;1526;:19;1504:11;:18;:41;1496:70;;;;;;;;;;;;;;;;;;;;;;;;1576:18;;:::i;:::-;1617:5;1604;:10;;:18;;;;;1648:46;1669:11;1681:12;1648:20;:46::i;:::-;1632:5;:13;;:62;;;;1711:5;1704:12;;;1327:396;;;;;:::o;1780:424::-;1839:12;1863:14;1880:11;1885:5;1880:4;:11::i;:::-;1863:28;;1901:17;1931:6;1921:17;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;1921:17:31;;;;1901:37;;1963:38;1988:6;1996:4;1963:5;:10;;;:24;;:38;;;;;:::i;:::-;2054:2;2044:12;;;;2075:38;2100:6;2108:4;2075:5;:13;;;:24;;:38;;;;;:::i;:::-;2066:47;;2142:1;2132:6;:11;2124:52;;;;;;;;;;;;;;;;;;;;;;;;2193:4;2186:11;;;;1780:424;;;:::o;10923:1327:2:-;11082:4;11037:49;;:41;11065:8;11075:2;11037:7;:27;;:41;;;;;:::i;:::-;:49;;;11029:90;;;;;;;;;;;;;;;;;;;;;;;;11131:18;11151:16;11171:26;11188:8;11171:16;:26::i;:::-;11130:67;;;;11293:1;11280:10;:14;11272:53;;;;;;;;;;;;;;;;;;;;;;;;11417:1;11404:10;:14;:35;;;;11435:4;11422:17;;:9;:7;:9::i;:::-;:17;;;11404:35;:63;;;;11455:12;:10;:12::i;:::-;11443:24;;:8;:24;;;11404:63;11396:122;;;;;;;;;;;;;;;;;;;;;;;;11706:1;11692:10;:15;;11688:556;;;11805:19;11827:37;11853:10;11827:8;:25;;:37;;;;:::i;:::-;11805:59;;11878:16;11927:2;11913:11;11905:20;;;:24;52:12:-1;49:1;45:20;29:14;25:41;7:59;;11905:24:2;11878:52;;12028:12;:10;:12::i;:::-;12016:24;;:8;:24;;;12012:222;;;;;;12125:4;12112:17;;:9;:7;:9::i;:::-;:17;;;:45;;;;12145:12;:10;:12::i;:::-;12133:24;;:8;:24;;;12112:45;12104:115;;;;;;;;;;;;;;;;;;;;;;;;12012:222;11688:556;;;10923:1327;;;;;;:::o;16647:632:26:-;16791:4;16829:45;16869:4;16829:10;:27;;:39;;:45;;;;:::i;:::-;16828:46;16807:125;;;;;;;;;;;;;;;;;;;;;;;;16964:43;17002:4;16964:10;:25;;:37;;:43;;;;:::i;:::-;16963:44;16942:123;;;;;;;;;;;;;;;;;;;;;;;;17097:46;17138:4;17097:10;:28;;:40;;:46;;;;:::i;:::-;17096:47;17075:126;;;;;;;;;;;;;;;;;;;;;;;;17219:53;17259:4;17265:6;17219:10;:24;;:39;;:53;;;;;:::i;:::-;17212:60;;16647:632;;;;;:::o;22147:81:2:-;22212:7;22147:81;;;:::o;1488:536:16:-;1535:4;1900:12;1923:4;1900:28;;1938:10;1987:4;1975:17;1969:23;;2016:1;2010:2;:7;2003:14;;;;1488:536;:::o;499:84:8:-;1055:12:16;;;;;;;;;;;:31;;;;1071:15;:13;:15::i;:::-;1055:31;:47;;;;1091:11;;;;;;;;;;;1090:12;1055:47;1047:106;;;;;;;;;;;;;;;;;;;;;;;;1164:19;1187:12;;;;;;;;;;;1186:13;1164:35;;1213:14;1209:96;;;1258:4;1243:12;;:19;;;;;;;;;;;;;;;;;;1290:4;1276:11;;:18;;;;;;;;;;;;;;;;;;1209:96;550:26:8;:24;:26::i;:::-;1331:14:16;1327:65;;;1376:5;1361:12;;:20;;;;;;;;;;;;;;;;;;1327:65;499:84:8;:::o;3338:279:2:-;3400:4;3380:17;;:24;;;;;;;;;;;;;;;;;;3524:86;2668:66;3540:13;;3555:54;3524:8;:15;;:86;;;;;:::i;:::-;;3338:279::o;12868:1221::-;13027:4;12982:49;;:41;13010:8;13020:2;12982:7;:27;;:41;;;;;:::i;:::-;:49;;;12974:78;;;;;;;;;;;;;;;;;;;;;;;;13064:18;13084:16;13104:26;13121:8;13104:16;:26::i;:::-;13063:67;;;;13226:1;13213:10;:14;13205:58;;;;;;;;;;;;;;;;;;;;;;;;13355:1;13342:10;:14;:35;;;;13373:4;13360:17;;:9;:7;:9::i;:::-;:17;;;13342:35;:63;;;;13393:12;:10;:12::i;:::-;13381:24;;:8;:24;;;13342:63;13334:122;;;;;;;;;;;;;;;;;;;;;;;;13644:1;13630:10;:15;;13626:457;;;13665:9;:7;:9::i;:::-;:37;;;;13690:12;:10;:12::i;:::-;13678:24;;:8;:24;;;13665:37;13661:412;;;;;;13851:19;13873:37;13899:10;13873:8;:25;;:37;;;;:::i;:::-;13851:59;;13928:16;13977:2;13963:11;13955:20;;;:24;52:12:-1;49:1;45:20;29:14;25:41;7:59;;13955:24:2;13928:52;;14018:12;:10;:12::i;:::-;14006:24;;:8;:24;;;13998:60;;;;;;;;;;;;;;;;;;;;;;;;13661:412;;;13626:457;12868:1221;;;;;;:::o;3131:318:21:-;3278:4;3298:31;3310:13;3325:3;3298:11;:31::i;:::-;3294:149;;;3352:37;3383:5;3352:13;:18;;:23;3371:3;3352:23;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3345:44;;;;3294:149;3427:5;3420:12;;3131:318;;;;;;:::o;21639:403:2:-;21687:21;21721:15;21747:11;21761:8;;;;;;;;;;;:16;;;21778:3;21761:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21761:21:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21761:21:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;21761:21:2;;;;;;;;;21747:35;;21792:11;21806:8;;;;;;;;;;;:17;;;21824:3;21806:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21806:22:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21806:22:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;21806:22:2;;;;;;;;;21792:36;;21838:9;21850:8;;;;;;;;;;;:15;;;21866:3;21850:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21850:20:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21850:20:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;21850:20:2;;;;;;;;;21838:32;;21892:4;21881:15;;;;;;21933:2;21925:5;21917:14;;:18;;;;21906:29;;;;21970:2;21964:3;21956:12;;:16;;;;21945:27;;;;22026:7;22009:25;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;22009:25:2;;;21999:36;;;;;;21983:52;;21639:403;;;;;:::o;2441:156:11:-;2511:7;2520:12;2576:9;427:2;2552:33;2544:46;;;;;;;;;;;;;;;;;2441:156;;;:::o;1869:124::-;1923:7;1932:12;1963:23;;;;;;;;;;;;;;:19;:23::i;:::-;1956:30;;;;1869:124;;:::o;26241:371:26:-;26350:4;26389:40;26424:4;26389:10;:24;;:34;;:40;;;;:::i;:::-;:99;;;;26445:43;26483:4;26445:10;:27;;:37;;:43;;;;:::i;:::-;26389:99;:156;;;;26504:41;26540:4;26504:10;:25;;:35;;:41;;;;:::i;:::-;26389:156;:216;;;;26561:44;26600:4;26561:10;:28;;:38;;:44;;;;:::i;:::-;26389:216;26370:235;;26241:371;;;;:::o;11579:209::-;11703:12;11734:47;11777:3;11734:10;:27;;:42;;:47;;;;:::i;:::-;11727:54;;11579:209;;;;:::o;2286:403:31:-;2375:12;;:::i;:::-;2403:14;2420:6;:13;2403:30;;2443:18;;:::i;:::-;2484:24;2501:6;2484;:16;;:24;;;;:::i;:::-;2471:5;:10;;:37;;;;;2528:2;2518:12;;;;2566:31;2590:6;2566;:23;;:31;;;;:::i;:::-;2540:57;;;2541:5;:13;;2540:57;;;;;;;;2626:1;2616:6;:11;2608:52;;;;;;;;;;;;;;;;;;;;;;;;2677:5;2670:12;;;;2286:403;;;:::o;992:185:21:-;1115:4;1138:32;1166:3;1138:13;:18;;:27;;:32;;;;:::i;:::-;1131:39;;992:185;;;;:::o;4160:319::-;4287:16;4319:31;4331:13;4346:3;4319:11;:31::i;:::-;4315:158;;;4373:35;:13;:18;;:23;4392:3;4373:23;;;;;;;;;;;:33;:35::i;:::-;4366:42;;;;4315:158;4460:1;4446:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;4446:16:21;;;;4439:23;;4160:319;;;;;:::o;22234:101:2:-;;;;;:::o;26876:234:26:-;27023:4;27046:57;27090:4;27096:6;27046:10;:25;;:43;;:57;;;;;:::i;:::-;27039:64;;26876:234;;;;;:::o;2657:324:21:-;2767:4;2791:31;2803:13;2818:3;2791:11;:31::i;:::-;2787:188;;;2891:30;2917:3;2891:13;:18;;:25;;:30;;;;:::i;:::-;2884:37;;;;2787:188;2959:5;2952:12;;2657:324;;;;;:::o;3540:327::-;3694:4;3714:31;3726:13;3741:3;3714:11;:31::i;:::-;3710:151;;;3768:39;3801:5;3768:13;:18;;:23;3787:3;3768:23;;;;;;;;;;;:32;;:39;;;;:::i;:::-;3761:46;;;;3710:151;3845:5;3838:12;;3540:327;;;;;;:::o;2218:225:17:-;2311:1;2291:22;;:8;:22;;;;2283:73;;;;;;;;;;;;;;;;;;;;;;;;2400:8;2371:38;;2392:6;;;;;;;;;;;2371:38;;;;;;;;;;;;2428:8;2419:6;;:17;;;;;;;;;;;;;;;;;;2218:225;:::o;897:190:20:-;1021:4;1044:36;1076:3;1044:17;:22;;:31;;:36;;;;:::i;:::-;1037:43;;897:190;;;;:::o;803::23:-;925:4;952:34;982:3;952:15;:20;;:29;;:34;;;;:::i;:::-;945:41;;803:190;;;;:::o;1212:189:24:-;1335:4;1362:32;1390:3;1362:13;:18;;:27;;:32;;;;:::i;:::-;1355:39;;1212:189;;;;:::o;3034:265:20:-;3161:7;3188:35;3200:17;3219:3;3188:11;:35::i;:::-;3180:67;;;;;;;;;;;;;;;;;;;;;;;;3265:17;:22;;:27;3288:3;3265:27;;;;;;;;;;;;3258:34;;3034:265;;;;:::o;1036:273:22:-;1122:4;1147:20;1156:3;1161:5;1147:8;:20::i;:::-;1146:21;1142:161;;;1202:3;:10;;1218:5;1202:22;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1202:22:22;;;;;;;;;;;;;;;;;;;;;1183:3;:9;;:16;1193:5;1183:16;;;;;;;;;;;:41;;;;1245:4;1238:11;;;;1142:161;1287:5;1280:12;;1036:273;;;;;:::o;2606:1238:7:-;2661:14;3460:18;3481:8;;3460:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3460:29:7;;;;;;;;3499:13;3515:8;;:15;;3499:31;;3762:42;3753:5;3746;3742:17;3736:24;3732:73;3722:83;;3831:6;3824:13;;;;2606:1238;:::o;2162:248:23:-;2308:4;2352:5;2324:15;:20;;:25;2345:3;2324:25;;;;;;;;;;;:33;;;;;;;;;;;;:::i;:::-;;2374:29;2399:3;2374:15;:20;;:24;;:29;;;;:::i;:::-;2367:36;;2162:248;;;;;:::o;1083:535:30:-;1209:15;1266:12;:19;1244:11;:18;:41;1236:70;;;;;;;;;;;;;;;;;;;;;;;;1317:23;1356:11;:18;1343:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1317:58;;1390:9;1402:1;1390:13;;1385:202;1409:11;:18;1405:1;:22;1385:202;;;1448:17;;:::i;:::-;1490:11;1502:1;1490:14;;;;;;;;;;;;;;;;;;1479:3;:8;;:25;;;;;1531:12;1544:1;1531:15;;;;;;;;;;;;;;;;;;1518:3;:10;;:28;;;;;1573:3;1560:7;1568:1;1560:10;;;;;;;;;;;;;;;;;:16;;;;1385:202;1429:3;;;;;;;1385:202;;;;1604:7;1597:14;;;1083:535;;;;:::o;666:166:31:-;738:7;776:21;:6;:14;;;:19;:21::i;:::-;771:2;532;764:9;:33;757:40;;666:166;;;:::o;686:174:29:-;837:6;828;819:7;815:20;808:36;794:60;;;:::o;3133:509:30:-;3241:7;3260:14;3277:11;3260:28;;3321:35;3343:6;3351:4;3321:13;3326:7;3321:4;:13::i;:::-;:21;;:35;;;;;:::i;:::-;3376:2;3366:12;;;;3393:9;3405:1;3393:13;;3388:224;3412:7;:14;3408:1;:18;3388:224;;;3447:43;3477:6;3485:4;3447:7;3455:1;3447:10;;;;;;;;;;;;;;;;;;:15;;;:29;;:43;;;;;:::i;:::-;3514:2;3504:12;;;;3530:45;3562:6;3570:4;3530:7;3538:1;3530:10;;;;;;;;;;;;;;;;;;:17;;;:31;;:45;;;;;:::i;:::-;3599:2;3589:12;;;;3428:3;;;;;;;3388:224;;;;3629:6;3622:13;;;3133:509;;;;;:::o;2284:251:20:-;2429:4;2475:5;2445:17;:22;;:27;2468:3;2445:27;;;;;;;;;;;:35;;;;2497:31;2524:3;2497:17;:22;;:26;;:31;;;;:::i;:::-;2490:38;;2284:251;;;;;:::o;913:191:7:-;1055:12:16;;;;;;;;;;;:31;;;;1071:15;:13;:15::i;:::-;1055:31;:47;;;;1091:11;;;;;;;;;;;1090:12;1055:47;1047:106;;;;;;;;;;;;;;;;;;;;;;;;1164:19;1187:12;;;;;;;;;;;1186:13;1164:35;;1213:14;1209:96;;;1258:4;1243:12;;:19;;;;;;;;;;;;;;;;;;1290:4;1276:11;;:18;;;;;;;;;;;;;;;;;;1209:96;1037:60:7;1054:42;1037:16;:60::i;:::-;1331:14:16;1327:65;;;1376:5;1361:12;;:20;;;;;;;;;;;;;;;;;;1327:65;913:191:7;:::o;24588:1438:26:-;24730:4;24769:1;24760:5;24754:12;;;;;;;;:16;;;24746:48;;;;;;;;;;;;;;;;;;;;;;;;24826:42;24863:4;24826:10;:24;;:36;;:42;;;;:::i;:::-;24825:43;24804:122;;;;;;;;;;;;;;;;;;;;;;;;24958:45;24998:4;24958:10;:27;;:39;;:45;;;;:::i;:::-;24957:46;24936:125;;;;;;;;;;;;;;;;;;;;;;;;25093:43;25131:4;25093:10;:25;;:37;;:43;;;;:::i;:::-;25092:44;25071:123;;;;;;;;;;;;;;;;;;;;;;;;25226:46;25267:4;25226:10;:28;;:40;;:46;;;;:::i;:::-;25225:47;25204:126;;;;;;;;;;;;;;;;;;;;;;;;25378:5;25345:38;;;;;;;;:29;:38;;;;;;;;;25341:114;;;25406:38;25439:4;25406:10;:25;;:32;;:38;;;;:::i;:::-;25399:45;;;;25341:114;25504:5;25468:41;;;;;;;;:32;:41;;;;;;;;;25464:120;;;25532:41;25568:4;25532:10;:28;;:35;;:41;;;;:::i;:::-;25525:48;;;;25464:120;25629:5;25597:37;;;;;;;;:28;:37;;;;;;;;;25593:262;;;25673:171;25734:4;25760:66;25673:171;;:10;:24;;:39;;:171;;;;;:::i;:::-;25650:194;;;;25593:262;25903:5;25868:40;;;;;;;;:31;:40;;;;;;;;;25864:156;;;25947:62;25990:4;26006:1;25996:12;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;25996:12:26;;;;25947:10;:27;;:42;;:62;;;;;:::i;:::-;25924:85;;;;25864:156;24588:1438;;;;;;:::o;1439:1020:22:-;1528:4;1552:20;1561:3;1566:5;1552:8;:20::i;:::-;1548:905;;;1588:21;1631:1;1612:3;:9;;:16;1622:5;1612:16;;;;;;;;;;;;:20;1588:44;;1646:17;1686:1;1666:3;:10;;:17;;;;:21;1646:41;;1824:13;1811:9;:26;;1807:382;;;1857:17;1877:3;:10;;1888:9;1877:21;;;;;;;;;;;;;;;;;;1857:41;;2024:9;1996:3;:10;;2007:13;1996:25;;;;;;;;;;;;;;;;;:37;;;;2146:1;2130:13;:17;2107:3;:9;;:20;2117:9;2107:20;;;;;;;;;;;:40;;;;1807:382;;2270:3;:9;;:16;2280:5;2270:16;;;;;;;;;;;2263:23;;;2357:3;:10;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;2395:4;2388:11;;;;;;1548:905;2437:5;2430:12;;1439:1020;;;;;:::o;2157:153:11:-;2231:7;2240:12;371:1;2295:7;2264:39;;;;2157:153;;;:::o;2693:335:20:-;2804:4;2828:35;2840:17;2859:3;2828:11;:35::i;:::-;2824:198;;;2886:17;:22;;:27;2909:3;2886:27;;;;;;;;;;;2879:34;;;2934;2964:3;2934:17;:22;;:29;;:34;;;;:::i;:::-;2927:41;;;;2824:198;3006:5;2999:12;;2693:335;;;;;:::o;2564:325:23:-;2671:4;2695:33;2707:15;2724:3;2695:11;:33::i;:::-;2691:192;;;2751:15;:20;;:25;2772:3;2751:25;;;;;;;;;;;;2744:32;;;;:::i;:::-;2797;2825:3;2797:15;:20;;:27;;:32;;;;:::i;:::-;2790:39;;;;2691:192;2867:5;2860:12;;2564:325;;;;;:::o;2878:322:24:-;2986:4;3010:31;3022:13;3037:3;3010:11;:31::i;:::-;3006:188;;;3110:30;3136:3;3110:13;:18;;:25;;:30;;;;:::i;:::-;3103:37;;;;3006:188;3178:5;3171:12;;2878:322;;;;;:::o;2895:262:23:-;3018:12;3050:33;3062:15;3079:3;3050:11;:33::i;:::-;3042:65;;;;;;;;;;;;;;;;;;;;;;;;3125:15;:20;;:25;3146:3;3125:25;;;;;;;;;;;3118:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2895:262;;;;:::o;4371:349:27:-;4474:15;4557:6;4549;4545:19;4539:26;4528:37;;4514:200;;;;:::o;5339:641:30:-;5430:15;5447:7;5466:14;5483:11;5466:28;;5504:16;5523:24;5540:6;5523;:16;;:24;;;;:::i;:::-;5504:43;;5567:2;5557:12;;;;5580:11;377:2;5594:8;:15;;;;;;;;5580:29;;5619:22;5657:3;5644:17;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5619:42;;5676:9;5688:1;5676:13;;5671:269;5695:3;5691:1;:7;5671:269;;;5719:20;;:::i;:::-;5767:24;5784:6;5767;:16;;:24;;;;:::i;:::-;5753:6;:11;;:38;;;;;5815:2;5805:12;;;;5847:24;5864:6;5847;:16;;:24;;;;:::i;:::-;5831:6;:13;;:40;;;;;5895:2;5885:12;;;;5923:6;5911;5918:1;5911:9;;;;;;;;;;;;;;;;;:18;;;;5671:269;5700:3;;;;;;;5671:269;;;;5958:6;5966;5950:23;;;;;;;;5339:641;;;;;:::o;2540:159:22:-;2644:4;2691:1;2671:3;:9;;:16;2681:5;2671:16;;;;;;;;;;;;:21;;2664:28;;2540:159;;;;:::o;3052:313::-;3142:16;3174:23;3214:3;:10;;:17;;;;3200:32;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;3200:32:22;;;;3174:58;;3247:9;3242:94;3262:3;:10;;:17;;;;3258:1;:21;3242:94;;;3312:3;:10;;3323:1;3312:13;;;;;;;;;;;;;;;;;;3300:6;3307:1;3300:9;;;;;;;;;;;;;;;;;:25;;;;;3281:3;;;;;;;3242:94;;;;3352:6;3345:13;;;3052:313;;;:::o;511:130:30:-;587:7;377:2;613:7;:14;:21;606:28;;511:130;;;:::o;2013:165:29:-;2155:6;2146;2137:7;2133:20;2126:36;2112:60;;;:::o;1364:541:7:-;1430:23;1456:14;:12;:14::i;:::-;1430:40;;1511:1;1488:25;;:11;:25;;;;1480:82;;;;;;;;;;;;;;;;;;;;;;;;1595:15;1580:30;;:11;:30;;;;1572:86;;;;;;;;;;;;;;;;;;;;;;;;1707:11;1674:45;;1690:15;1674:45;;;;;;;;;;;;1730:12;754:66;1745:30;;1730:45;;1877:11;1871:4;1864:25;1850:49;;;:::o;1040:166:24:-;1145:4;1172:27;1195:3;1172:13;:18;;:22;;:27;;;;:::i;:::-;1165:34;;1040:166;;;;:::o;18218:210:27:-;18321:15;18404:6;18396;18392:19;18386:26;18375:37;;18361:61;;;;:::o;782:22569:2:-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;;57:66;;;;;130:134;;205:54;251:6;238:20;205:54;;;196:63;;190:74;;;;;289:707;;406:3;399:4;391:6;387:17;383:27;376:35;373:2;;;424:1;421;414:12;373:2;461:6;448:20;483:80;498:64;555:6;498:64;;;483:80;;;474:89;;580:5;605:6;598:5;591:21;635:4;627:6;623:17;613:27;;657:4;652:3;648:14;641:21;;710:6;757:3;749:4;741:6;737:17;732:3;728:27;725:36;722:2;;;774:1;771;764:12;722:2;799:1;784:206;809:6;806:1;803:13;784:206;;;867:3;889:37;922:3;910:10;889:37;;;884:3;877:50;950:4;945:3;941:14;934:21;;978:4;973:3;969:14;962:21;;841:149;831:1;828;824:9;819:14;;784:206;;;788:14;366:630;;;;;;;;1004:112;;1068:43;1103:6;1090:20;1068:43;;;1059:52;;1053:63;;;;;1123:118;;1190:46;1228:6;1215:20;1190:46;;;1181:55;;1175:66;;;;;1262:335;;;1376:3;1369:4;1361:6;1357:17;1353:27;1346:35;1343:2;;;1394:1;1391;1384:12;1343:2;1427:6;1414:20;1404:30;;1454:18;1446:6;1443:30;1440:2;;;1486:1;1483;1476:12;1440:2;1520:4;1512:6;1508:17;1496:29;;1570:3;1563;1555:6;1551:16;1541:8;1537:31;1534:40;1531:2;;;1587:1;1584;1577:12;1531:2;1336:261;;;;;;1606:440;;1707:3;1700:4;1692:6;1688:17;1684:27;1677:35;1674:2;;;1725:1;1722;1715:12;1674:2;1762:6;1749:20;1784:64;1799:48;1840:6;1799:48;;;1784:64;;;1775:73;;1868:6;1861:5;1854:21;1904:4;1896:6;1892:17;1937:4;1930:5;1926:16;1972:3;1963:6;1958:3;1954:16;1951:25;1948:2;;;1989:1;1986;1979:12;1948:2;1999:41;2033:6;2028:3;2023;1999:41;;;1667:379;;;;;;;;2054:120;;2131:38;2161:6;2155:13;2131:38;;;2122:47;;2116:58;;;;;2181:118;;2248:46;2286:6;2273:20;2248:46;;;2239:55;;2233:66;;;;;2306:122;;2384:39;2415:6;2409:13;2384:39;;;2375:48;;2369:59;;;;;2435:114;;2500:44;2536:6;2523:20;2500:44;;;2491:53;;2485:64;;;;;2556:118;;2632:37;2661:6;2655:13;2632:37;;;2623:46;;2617:57;;;;;2681:241;;2785:2;2773:9;2764:7;2760:23;2756:32;2753:2;;;2801:1;2798;2791:12;2753:2;2836:1;2853:53;2898:7;2889:6;2878:9;2874:22;2853:53;;;2843:63;;2815:97;2747:175;;;;;2929:257;;3041:2;3029:9;3020:7;3016:23;3012:32;3009:2;;;3057:1;3054;3047:12;3009:2;3092:1;3109:61;3162:7;3153:6;3142:9;3138:22;3109:61;;;3099:71;;3071:105;3003:183;;;;;3193:1497;;;;;;;;;;;;3472:3;3460:9;3451:7;3447:23;3443:33;3440:2;;;3489:1;3486;3479:12;3440:2;3524:1;3541:53;3586:7;3577:6;3566:9;3562:22;3541:53;;;3531:63;;3503:97;3631:2;3649:53;3694:7;3685:6;3674:9;3670:22;3649:53;;;3639:63;;3610:98;3767:2;3756:9;3752:18;3739:32;3791:18;3783:6;3780:30;3777:2;;;3823:1;3820;3813:12;3777:2;3851:64;3907:7;3898:6;3887:9;3883:22;3851:64;;;3833:82;;;;3718:203;3952:2;3970:53;4015:7;4006:6;3995:9;3991:22;3970:53;;;3960:63;;3931:98;4060:3;4079:53;4124:7;4115:6;4104:9;4100:22;4079:53;;;4069:63;;4039:99;4169:3;4188:53;4233:7;4224:6;4213:9;4209:22;4188:53;;;4178:63;;4148:99;4278:3;4297:53;4342:7;4333:6;4322:9;4318:22;4297:53;;;4287:63;;4257:99;4415:3;4404:9;4400:19;4387:33;4440:18;4432:6;4429:30;4426:2;;;4472:1;4469;4462:12;4426:2;4500:64;4556:7;4547:6;4536:9;4532:22;4500:64;;;4482:82;;;;4366:204;4601:3;4621:53;4666:7;4657:6;4646:9;4642:22;4621:53;;;4610:64;;4580:100;3434:1256;;;;;;;;;;;;;;;4697:241;;4801:2;4789:9;4780:7;4776:23;4772:32;4769:2;;;4817:1;4814;4807:12;4769:2;4852:1;4869:53;4914:7;4905:6;4894:9;4890:22;4869:53;;;4859:63;;4831:97;4763:175;;;;;4945:366;;;5066:2;5054:9;5045:7;5041:23;5037:32;5034:2;;;5082:1;5079;5072:12;5034:2;5117:1;5134:53;5179:7;5170:6;5159:9;5155:22;5134:53;;;5124:63;;5096:97;5224:2;5242:53;5287:7;5278:6;5267:9;5263:22;5242:53;;;5232:63;;5203:98;5028:283;;;;;;5318:889;;;;;5523:3;5511:9;5502:7;5498:23;5494:33;5491:2;;;5540:1;5537;5530:12;5491:2;5575:1;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;;;5582:63;;5554:97;5682:2;5700:53;5745:7;5736:6;5725:9;5721:22;5700:53;;;5690:63;;5661:98;5818:2;5807:9;5803:18;5790:32;5842:18;5834:6;5831:30;5828:2;;;5874:1;5871;5864:12;5828:2;5894:78;5964:7;5955:6;5944:9;5940:22;5894:78;;;5884:88;;5769:209;6037:2;6026:9;6022:18;6009:32;6061:18;6053:6;6050:30;6047:2;;;6093:1;6090;6083:12;6047:2;6113:78;6183:7;6174:6;6163:9;6159:22;6113:78;;;6103:88;;5988:209;5485:722;;;;;;;;6214:491;;;;6352:2;6340:9;6331:7;6327:23;6323:32;6320:2;;;6368:1;6365;6358:12;6320:2;6403:1;6420:53;6465:7;6456:6;6445:9;6441:22;6420:53;;;6410:63;;6382:97;6510:2;6528:53;6573:7;6564:6;6553:9;6549:22;6528:53;;;6518:63;;6489:98;6618:2;6636:53;6681:7;6672:6;6661:9;6657:22;6636:53;;;6626:63;;6597:98;6314:391;;;;;;6712:617;;;;;6867:3;6855:9;6846:7;6842:23;6838:33;6835:2;;;6884:1;6881;6874:12;6835:2;6919:1;6936:53;6981:7;6972:6;6961:9;6957:22;6936:53;;;6926:63;;6898:97;7026:2;7044:53;7089:7;7080:6;7069:9;7065:22;7044:53;;;7034:63;;7005:98;7134:2;7152:53;7197:7;7188:6;7177:9;7173:22;7152:53;;;7142:63;;7113:98;7242:2;7260:53;7305:7;7296:6;7285:9;7281:22;7260:53;;;7250:63;;7221:98;6829:500;;;;;;;;7336:743;;;;;;7508:3;7496:9;7487:7;7483:23;7479:33;7476:2;;;7525:1;7522;7515:12;7476:2;7560:1;7577:53;7622:7;7613:6;7602:9;7598:22;7577:53;;;7567:63;;7539:97;7667:2;7685:53;7730:7;7721:6;7710:9;7706:22;7685:53;;;7675:63;;7646:98;7775:2;7793:53;7838:7;7829:6;7818:9;7814:22;7793:53;;;7783:63;;7754:98;7883:2;7901:53;7946:7;7937:6;7926:9;7922:22;7901:53;;;7891:63;;7862:98;7991:3;8010:53;8055:7;8046:6;8035:9;8031:22;8010:53;;;8000:63;;7970:99;7470:609;;;;;;;;;8086:847;;;;;;8267:3;8255:9;8246:7;8242:23;8238:33;8235:2;;;8284:1;8281;8274:12;8235:2;8319:1;8336:53;8381:7;8372:6;8361:9;8357:22;8336:53;;;8326:63;;8298:97;8426:2;8444:53;8489:7;8480:6;8469:9;8465:22;8444:53;;;8434:63;;8405:98;8534:2;8552:53;8597:7;8588:6;8577:9;8573:22;8552:53;;;8542:63;;8513:98;8642:2;8660:53;8705:7;8696:6;8685:9;8681:22;8660:53;;;8650:63;;8621:98;8778:3;8767:9;8763:19;8750:33;8803:18;8795:6;8792:30;8789:2;;;8835:1;8832;8825:12;8789:2;8855:62;8909:7;8900:6;8889:9;8885:22;8855:62;;;8845:72;;8729:194;8229:704;;;;;;;;;8940:1011;;;;;;9160:3;9148:9;9139:7;9135:23;9131:33;9128:2;;;9177:1;9174;9167:12;9128:2;9212:1;9229:53;9274:7;9265:6;9254:9;9250:22;9229:53;;;9219:63;;9191:97;9319:2;9337:53;9382:7;9373:6;9362:9;9358:22;9337:53;;;9327:63;;9298:98;9427:2;9445:51;9488:7;9479:6;9468:9;9464:22;9445:51;;;9435:61;;9406:96;9561:2;9550:9;9546:18;9533:32;9585:18;9577:6;9574:30;9571:2;;;9617:1;9614;9607:12;9571:2;9637:78;9707:7;9698:6;9687:9;9683:22;9637:78;;;9627:88;;9512:209;9780:3;9769:9;9765:19;9752:33;9805:18;9797:6;9794:30;9791:2;;;9837:1;9834;9827:12;9791:2;9857:78;9927:7;9918:6;9907:9;9903:22;9857:78;;;9847:88;;9731:210;9122:829;;;;;;;;;9958:365;;;10081:2;10069:9;10060:7;10056:23;10052:32;10049:2;;;10097:1;10094;10087:12;10049:2;10160:1;10149:9;10145:17;10132:31;10183:18;10175:6;10172:30;10169:2;;;10215:1;10212;10205:12;10169:2;10243:64;10299:7;10290:6;10279:9;10275:22;10243:64;;;10225:82;;;;10111:202;10043:280;;;;;;10330:735;;;;;;10501:3;10489:9;10480:7;10476:23;10472:33;10469:2;;;10518:1;10515;10508:12;10469:2;10581:1;10570:9;10566:17;10553:31;10604:18;10596:6;10593:30;10590:2;;;10636:1;10633;10626:12;10590:2;10664:64;10720:7;10711:6;10700:9;10696:22;10664:64;;;10646:82;;;;10532:202;10765:2;10783:50;10825:7;10816:6;10805:9;10801:22;10783:50;;;10773:60;;10744:95;10870:2;10888:53;10933:7;10924:6;10913:9;10909:22;10888:53;;;10878:63;;10849:98;10978:2;10996:53;11041:7;11032:6;11021:9;11017:22;10996:53;;;10986:63;;10957:98;10463:602;;;;;;;;;11072:261;;11186:2;11174:9;11165:7;11161:23;11157:32;11154:2;;;11202:1;11199;11192:12;11154:2;11237:1;11254:63;11309:7;11300:6;11289:9;11285:22;11254:63;;;11244:73;;11216:107;11148:185;;;;;11340:241;;11444:2;11432:9;11423:7;11419:23;11415:32;11412:2;;;11460:1;11457;11450:12;11412:2;11495:1;11512:53;11557:7;11548:6;11537:9;11533:22;11512:53;;;11502:63;;11474:97;11406:175;;;;;11588:263;;11703:2;11691:9;11682:7;11678:23;11674:32;11671:2;;;11719:1;11716;11709:12;11671:2;11754:1;11771:64;11827:7;11818:6;11807:9;11803:22;11771:64;;;11761:74;;11733:108;11665:186;;;;;11858:382;;;11987:2;11975:9;11966:7;11962:23;11958:32;11955:2;;;12003:1;12000;11993:12;11955:2;12038:1;12055:53;12100:7;12091:6;12080:9;12076:22;12055:53;;;12045:63;;12017:97;12145:2;12163:61;12216:7;12207:6;12196:9;12192:22;12163:61;;;12153:71;;12124:106;11949:291;;;;;;12247:259;;12360:2;12348:9;12339:7;12335:23;12331:32;12328:2;;;12376:1;12373;12366:12;12328:2;12411:1;12428:62;12482:7;12473:6;12462:9;12458:22;12428:62;;;12418:72;;12390:106;12322:184;;;;;12513:132;12594:45;12633:5;12594:45;;;12589:3;12582:58;12576:69;;;12652:134;12741:39;12774:5;12741:39;;;12736:3;12729:52;12723:63;;;12793:110;12866:31;12891:5;12866:31;;;12861:3;12854:44;12848:55;;;12941:590;;13076:54;13124:5;13076:54;;;13148:6;13143:3;13136:19;13172:4;13167:3;13163:14;13156:21;;13217:56;13267:5;13217:56;;;13294:1;13279:230;13304:6;13301:1;13298:13;13279:230;;;13344:53;13393:3;13384:6;13378:13;13344:53;;;13414:60;13467:6;13414:60;;;13404:70;;13497:4;13492:3;13488:14;13481:21;;13326:1;13323;13319:9;13314:14;;13279:230;;;13283:14;13522:3;13515:10;;13055:476;;;;;;;13602:725;;13775:71;13840:5;13775:71;;;13864:6;13859:3;13852:19;13888:4;13883:3;13879:14;13872:21;;13933:73;14000:5;13933:73;;;14027:1;14012:293;14037:6;14034:1;14031:13;14012:293;;;14077:99;14172:3;14163:6;14157:13;14077:99;;;14193:77;14263:6;14193:77;;;14183:87;;14293:4;14288:3;14284:14;14277:21;;14059:1;14056;14052:9;14047:14;;14012:293;;;14016:14;14318:3;14311:10;;13754:573;;;;;;;14335:101;14402:28;14424:5;14402:28;;;14397:3;14390:41;14384:52;;;14443:110;14516:31;14541:5;14516:31;;;14511:3;14504:44;14498:55;;;14560:107;14631:30;14655:5;14631:30;;;14626:3;14619:43;14613:54;;;14674:297;;14774:38;14806:5;14774:38;;;14829:6;14824:3;14817:19;14841:63;14897:6;14890:4;14885:3;14881:14;14874:4;14867:5;14863:16;14841:63;;;14936:29;14958:6;14936:29;;;14929:4;14924:3;14920:14;14916:50;14909:57;;14754:217;;;;;;14978:300;;15080:39;15113:5;15080:39;;;15136:6;15131:3;15124:19;15148:63;15204:6;15197:4;15192:3;15188:14;15181:4;15174:5;15170:16;15148:63;;;15243:29;15265:6;15243:29;;;15236:4;15231:3;15227:14;15223:50;15216:57;;15060:218;;;;;;15286:296;;15441:2;15436:3;15429:15;15478:66;15473:2;15468:3;15464:12;15457:88;15573:2;15568:3;15564:12;15557:19;;15422:160;;;;15591:397;;15746:2;15741:3;15734:15;15783:66;15778:2;15773:3;15769:12;15762:88;15884:66;15879:2;15874:3;15870:12;15863:88;15979:2;15974:3;15970:12;15963:19;;15727:261;;;;15997:296;;16152:2;16147:3;16140:15;16189:66;16184:2;16179:3;16175:12;16168:88;16284:2;16279:3;16275:12;16268:19;;16133:160;;;;16302:296;;16457:2;16452:3;16445:15;16494:66;16489:2;16484:3;16480:12;16473:88;16589:2;16584:3;16580:12;16573:19;;16438:160;;;;16607:397;;16762:2;16757:3;16750:15;16799:66;16794:2;16789:3;16785:12;16778:88;16900:66;16895:2;16890:3;16886:12;16879:88;16995:2;16990:3;16986:12;16979:19;;16743:261;;;;17013:296;;17168:2;17163:3;17156:15;17205:66;17200:2;17195:3;17191:12;17184:88;17300:2;17295:3;17291:12;17284:19;;17149:160;;;;17318:397;;17473:2;17468:3;17461:15;17510:66;17505:2;17500:3;17496:12;17489:88;17611:66;17606:2;17601:3;17597:12;17590:88;17706:2;17701:3;17697:12;17690:19;;17454:261;;;;17724:397;;17879:2;17874:3;17867:15;17916:66;17911:2;17906:3;17902:12;17895:88;18017:66;18012:2;18007:3;18003:12;17996:88;18112:2;18107:3;18103:12;18096:19;;17860:261;;;;18130:296;;18285:2;18280:3;18273:15;18322:66;18317:2;18312:3;18308:12;18301:88;18417:2;18412:3;18408:12;18401:19;;18266:160;;;;18435:296;;18590:2;18585:3;18578:15;18627:66;18622:2;18617:3;18613:12;18606:88;18722:2;18717:3;18713:12;18706:19;;18571:160;;;;18740:296;;18895:2;18890:3;18883:15;18932:66;18927:2;18922:3;18918:12;18911:88;19027:2;19022:3;19018:12;19011:19;;18876:160;;;;19045:397;;19200:2;19195:3;19188:15;19237:66;19232:2;19227:3;19223:12;19216:88;19338:66;19333:2;19328:3;19324:12;19317:88;19433:2;19428:3;19424:12;19417:19;;19181:261;;;;19451:397;;19606:2;19601:3;19594:15;19643:66;19638:2;19633:3;19629:12;19622:88;19744:66;19739:2;19734:3;19730:12;19723:88;19839:2;19834:3;19830:12;19823:19;;19587:261;;;;19857:296;;20012:2;20007:3;20000:15;20049:66;20044:2;20039:3;20035:12;20028:88;20144:2;20139:3;20135:12;20128:19;;19993:160;;;;20162:296;;20317:2;20312:3;20305:15;20354:66;20349:2;20344:3;20340:12;20333:88;20449:2;20444:3;20440:12;20433:19;;20298:160;;;;20467:397;;20622:2;20617:3;20610:15;20659:66;20654:2;20649:3;20645:12;20638:88;20760:66;20755:2;20750:3;20746:12;20739:88;20855:2;20850:3;20846:12;20839:19;;20603:261;;;;20873:296;;21028:2;21023:3;21016:15;21065:66;21060:2;21055:3;21051:12;21044:88;21160:2;21155:3;21151:12;21144:19;;21009:160;;;;21178:397;;21333:2;21328:3;21321:15;21370:66;21365:2;21360:3;21356:12;21349:88;21471:66;21466:2;21461:3;21457:12;21450:88;21566:2;21561:3;21557:12;21550:19;;21314:261;;;;21584:397;;21739:2;21734:3;21727:15;21776:66;21771:2;21766:3;21762:12;21755:88;21877:66;21872:2;21867:3;21863:12;21856:88;21972:2;21967:3;21963:12;21956:19;;21720:261;;;;21990:296;;22145:2;22140:3;22133:15;22182:66;22177:2;22172:3;22168:12;22161:88;22277:2;22272:3;22268:12;22261:19;;22126:160;;;;22295:296;;22450:2;22445:3;22438:15;22487:66;22482:2;22477:3;22473:12;22466:88;22582:2;22577:3;22573:12;22566:19;;22431:160;;;;22600:296;;22755:2;22750:3;22743:15;22792:66;22787:2;22782:3;22778:12;22771:88;22887:2;22882:3;22878:12;22871:19;;22736:160;;;;22905:296;;23060:2;23055:3;23048:15;23097:66;23092:2;23087:3;23083:12;23076:88;23192:2;23187:3;23183:12;23176:19;;23041:160;;;;23210:296;;23365:2;23360:3;23353:15;23402:66;23397:2;23392:3;23388:12;23381:88;23497:2;23492:3;23488:12;23481:19;;23346:160;;;;23515:296;;23670:2;23665:3;23658:15;23707:66;23702:2;23697:3;23693:12;23686:88;23802:2;23797:3;23793:12;23786:19;;23651:160;;;;23820:296;;23975:2;23970:3;23963:15;24012:66;24007:2;24002:3;23998:12;23991:88;24107:2;24102:3;24098:12;24091:19;;23956:160;;;;24125:296;;24280:2;24275:3;24268:15;24317:66;24312:2;24307:3;24303:12;24296:88;24412:2;24407:3;24403:12;24396:19;;24261:160;;;;24486:490;24615:4;24610:3;24606:14;24701:3;24694:5;24690:15;24684:22;24718:61;24774:3;24769;24765:13;24752:11;24718:61;;;24635:156;24869:4;24862:5;24858:16;24852:23;24887:62;24943:4;24938:3;24934:14;24921:11;24887:62;;;24801:160;24588:388;;;;25036:643;;25175:4;25170:3;25166:14;25261:3;25254:5;25250:15;25244:22;25278:61;25334:3;25329;25325:13;25312:11;25278:61;;;25195:156;25430:4;25423:5;25419:16;25413:23;25481:3;25475:4;25471:14;25464:4;25459:3;25455:14;25448:38;25501:140;25636:4;25623:11;25501:140;;;25493:148;;25361:292;25670:4;25663:11;;25148:531;;;;;;25686:110;25759:31;25784:5;25759:31;;;25754:3;25747:44;25741:55;;;25803:107;25874:30;25898:5;25874:30;;;25869:3;25862:43;25856:54;;;25917:193;;26025:2;26014:9;26010:18;26002:26;;26039:61;26097:1;26086:9;26082:17;26073:6;26039:61;;;25996:114;;;;;26117:209;;26233:2;26222:9;26218:18;26210:26;;26247:69;26313:1;26302:9;26298:17;26289:6;26247:69;;;26204:122;;;;;26333:290;;26467:2;26456:9;26452:18;26444:26;;26481:61;26539:1;26528:9;26524:17;26515:6;26481:61;;;26553:60;26609:2;26598:9;26594:18;26585:6;26553:60;;;26438:185;;;;;;26630:341;;26788:2;26777:9;26773:18;26765:26;;26838:9;26832:4;26828:20;26824:1;26813:9;26809:17;26802:47;26863:98;26956:4;26947:6;26863:98;;;26855:106;;26759:212;;;;;26978:181;;27080:2;27069:9;27065:18;27057:26;;27094:55;27146:1;27135:9;27131:17;27122:6;27094:55;;;27051:108;;;;;27166:193;;27274:2;27263:9;27259:18;27251:26;;27288:61;27346:1;27335:9;27331:17;27322:6;27288:61;;;27245:114;;;;;27366:294;;27502:2;27491:9;27487:18;27479:26;;27516:61;27574:1;27563:9;27559:17;27550:6;27516:61;;;27588:62;27646:2;27635:9;27631:18;27622:6;27588:62;;;27473:187;;;;;;27667:277;;27793:2;27782:9;27778:18;27770:26;;27843:9;27837:4;27833:20;27829:1;27818:9;27814:17;27807:47;27868:66;27929:4;27920:6;27868:66;;;27860:74;;27764:180;;;;;27951:281;;28079:2;28068:9;28064:18;28056:26;;28129:9;28123:4;28119:20;28115:1;28104:9;28100:17;28093:47;28154:68;28217:4;28208:6;28154:68;;;28146:76;;28050:182;;;;;28239:387;;28420:2;28409:9;28405:18;28397:26;;28470:9;28464:4;28460:20;28456:1;28445:9;28441:17;28434:47;28495:121;28611:4;28495:121;;;28487:129;;28391:235;;;;28633:387;;28814:2;28803:9;28799:18;28791:26;;28864:9;28858:4;28854:20;28850:1;28839:9;28835:17;28828:47;28889:121;29005:4;28889:121;;;28881:129;;28785:235;;;;29027:387;;29208:2;29197:9;29193:18;29185:26;;29258:9;29252:4;29248:20;29244:1;29233:9;29229:17;29222:47;29283:121;29399:4;29283:121;;;29275:129;;29179:235;;;;29421:387;;29602:2;29591:9;29587:18;29579:26;;29652:9;29646:4;29642:20;29638:1;29627:9;29623:17;29616:47;29677:121;29793:4;29677:121;;;29669:129;;29573:235;;;;29815:387;;29996:2;29985:9;29981:18;29973:26;;30046:9;30040:4;30036:20;30032:1;30021:9;30017:17;30010:47;30071:121;30187:4;30071:121;;;30063:129;;29967:235;;;;30209:387;;30390:2;30379:9;30375:18;30367:26;;30440:9;30434:4;30430:20;30426:1;30415:9;30411:17;30404:47;30465:121;30581:4;30465:121;;;30457:129;;30361:235;;;;30603:387;;30784:2;30773:9;30769:18;30761:26;;30834:9;30828:4;30824:20;30820:1;30809:9;30805:17;30798:47;30859:121;30975:4;30859:121;;;30851:129;;30755:235;;;;30997:387;;31178:2;31167:9;31163:18;31155:26;;31228:9;31222:4;31218:20;31214:1;31203:9;31199:17;31192:47;31253:121;31369:4;31253:121;;;31245:129;;31149:235;;;;31391:387;;31572:2;31561:9;31557:18;31549:26;;31622:9;31616:4;31612:20;31608:1;31597:9;31593:17;31586:47;31647:121;31763:4;31647:121;;;31639:129;;31543:235;;;;31785:387;;31966:2;31955:9;31951:18;31943:26;;32016:9;32010:4;32006:20;32002:1;31991:9;31987:17;31980:47;32041:121;32157:4;32041:121;;;32033:129;;31937:235;;;;32179:387;;32360:2;32349:9;32345:18;32337:26;;32410:9;32404:4;32400:20;32396:1;32385:9;32381:17;32374:47;32435:121;32551:4;32435:121;;;32427:129;;32331:235;;;;32573:387;;32754:2;32743:9;32739:18;32731:26;;32804:9;32798:4;32794:20;32790:1;32779:9;32775:17;32768:47;32829:121;32945:4;32829:121;;;32821:129;;32725:235;;;;32967:387;;33148:2;33137:9;33133:18;33125:26;;33198:9;33192:4;33188:20;33184:1;33173:9;33169:17;33162:47;33223:121;33339:4;33223:121;;;33215:129;;33119:235;;;;33361:387;;33542:2;33531:9;33527:18;33519:26;;33592:9;33586:4;33582:20;33578:1;33567:9;33563:17;33556:47;33617:121;33733:4;33617:121;;;33609:129;;33513:235;;;;33755:387;;33936:2;33925:9;33921:18;33913:26;;33986:9;33980:4;33976:20;33972:1;33961:9;33957:17;33950:47;34011:121;34127:4;34011:121;;;34003:129;;33907:235;;;;34149:387;;34330:2;34319:9;34315:18;34307:26;;34380:9;34374:4;34370:20;34366:1;34355:9;34351:17;34344:47;34405:121;34521:4;34405:121;;;34397:129;;34301:235;;;;34543:387;;34724:2;34713:9;34709:18;34701:26;;34774:9;34768:4;34764:20;34760:1;34749:9;34745:17;34738:47;34799:121;34915:4;34799:121;;;34791:129;;34695:235;;;;34937:387;;35118:2;35107:9;35103:18;35095:26;;35168:9;35162:4;35158:20;35154:1;35143:9;35139:17;35132:47;35193:121;35309:4;35193:121;;;35185:129;;35089:235;;;;35331:387;;35512:2;35501:9;35497:18;35489:26;;35562:9;35556:4;35552:20;35548:1;35537:9;35533:17;35526:47;35587:121;35703:4;35587:121;;;35579:129;;35483:235;;;;35725:387;;35906:2;35895:9;35891:18;35883:26;;35956:9;35950:4;35946:20;35942:1;35931:9;35927:17;35920:47;35981:121;36097:4;35981:121;;;35973:129;;35877:235;;;;36119:387;;36300:2;36289:9;36285:18;36277:26;;36350:9;36344:4;36340:20;36336:1;36325:9;36321:17;36314:47;36375:121;36491:4;36375:121;;;36367:129;;36271:235;;;;36513:387;;36694:2;36683:9;36679:18;36671:26;;36744:9;36738:4;36734:20;36730:1;36719:9;36715:17;36708:47;36769:121;36885:4;36769:121;;;36761:129;;36665:235;;;;36907:387;;37088:2;37077:9;37073:18;37065:26;;37138:9;37132:4;37128:20;37124:1;37113:9;37109:17;37102:47;37163:121;37279:4;37163:121;;;37155:129;;37059:235;;;;37301:387;;37482:2;37471:9;37467:18;37459:26;;37532:9;37526:4;37522:20;37518:1;37507:9;37503:17;37496:47;37557:121;37673:4;37557:121;;;37549:129;;37453:235;;;;37695:387;;37876:2;37865:9;37861:18;37853:26;;37926:9;37920:4;37916:20;37912:1;37901:9;37897:17;37890:47;37951:121;38067:4;37951:121;;;37943:129;;37847:235;;;;38089:387;;38270:2;38259:9;38255:18;38247:26;;38320:9;38314:4;38310:20;38306:1;38295:9;38291:17;38284:47;38345:121;38461:4;38345:121;;;38337:129;;38241:235;;;;38483:387;;38664:2;38653:9;38649:18;38641:26;;38714:9;38708:4;38704:20;38700:1;38689:9;38685:17;38678:47;38739:121;38855:4;38739:121;;;38731:129;;38635:235;;;;38877:337;;39033:2;39022:9;39018:18;39010:26;;39083:9;39077:4;39073:20;39069:1;39058:9;39054:17;39047:47;39108:96;39199:4;39190:6;39108:96;;;39100:104;;39004:210;;;;;39221:193;;39329:2;39318:9;39314:18;39306:26;;39343:61;39401:1;39390:9;39386:17;39377:6;39343:61;;;39300:114;;;;;39421:294;;39557:2;39546:9;39542:18;39534:26;;39571:61;39629:1;39618:9;39614:17;39605:6;39571:61;;;39643:62;39701:2;39690:9;39686:18;39677:6;39643:62;;;39528:187;;;;;;39722:326;;39874:2;39863:9;39859:18;39851:26;;39888:61;39946:1;39935:9;39931:17;39922:6;39888:61;;;39960:78;40034:2;40023:9;40019:18;40010:6;39960:78;;;39845:203;;;;;;40055:378;;40209:2;40198:9;40194:18;40186:26;;40223:61;40281:1;40270:9;40266:17;40257:6;40223:61;;;40332:9;40326:4;40322:20;40317:2;40306:9;40302:18;40295:48;40357:66;40418:4;40409:6;40357:66;;;40349:74;;40180:253;;;;;;40440:189;;40546:2;40535:9;40531:18;40523:26;;40560:59;40616:1;40605:9;40601:17;40592:6;40560:59;;;40517:112;;;;;40636:256;;40698:2;40692:9;40682:19;;40736:4;40728:6;40724:17;40835:6;40823:10;40820:22;40799:18;40787:10;40784:34;40781:62;40778:2;;;40856:1;40853;40846:12;40778:2;40876:10;40872:2;40865:22;40676:216;;;;;40899:258;;41058:18;41050:6;41047:30;41044:2;;;41090:1;41087;41080:12;41044:2;41119:4;41111:6;41107:17;41099:25;;41147:4;41141;41137:15;41129:23;;40981:176;;;;41164:258;;41307:18;41299:6;41296:30;41293:2;;;41339:1;41336;41329:12;41293:2;41383:4;41379:9;41372:4;41364:6;41360:17;41356:33;41348:41;;41412:4;41406;41402:15;41394:23;;41230:192;;;;41431:121;;41540:4;41532:6;41528:17;41517:28;;41509:43;;;;41563:138;;41689:4;41681:6;41677:17;41666:28;;41658:43;;;;41710:107;;41806:5;41800:12;41790:22;;41784:33;;;;41824:124;;41937:5;41931:12;41921:22;;41915:33;;;;41955:91;;42035:5;42029:12;42019:22;;42013:33;;;;42053:92;;42134:5;42128:12;42118:22;;42112:33;;;;42153:122;;42264:4;42256:6;42252:17;42241:28;;42234:41;;;;42284:139;;42412:4;42404:6;42400:17;42389:28;;42382:41;;;;42431:105;;42500:31;42525:5;42500:31;;;42489:42;;42483:53;;;;42543:113;;42620:31;42645:5;42620:31;;;42609:42;;42603:53;;;;42663:92;;42743:5;42736:13;42729:21;42718:32;;42712:43;;;;42762:79;;42831:5;42820:16;;42814:27;;;;42848:151;;42927:66;42920:5;42916:78;42905:89;;42899:100;;;;43006:128;;43086:42;43079:5;43075:54;43064:65;;43058:76;;;;43141:79;;43210:5;43199:16;;43193:27;;;;43227:97;;43306:12;43299:5;43295:24;43284:35;;43278:46;;;;43331:105;;43400:31;43425:5;43400:31;;;43389:42;;43383:53;;;;43443:113;;43520:31;43545:5;43520:31;;;43509:42;;43503:53;;;;43563:92;;43643:5;43636:13;43629:21;43618:32;;43612:43;;;;43662:79;;43731:5;43720:16;;43714:27;;;;43748:91;;43827:6;43820:5;43816:18;43805:29;;43799:40;;;;43846:79;;43915:5;43904:16;;43898:27;;;;43932:88;;44010:4;44003:5;43999:16;43988:27;;43982:38;;;;44027:129;;44114:37;44145:5;44114:37;;;44101:50;;44095:61;;;;44163:121;;44242:37;44273:5;44242:37;;;44229:50;;44223:61;;;;44291:115;;44370:31;44395:5;44370:31;;;44357:44;;44351:55;;;;44414:145;44495:6;44490:3;44485;44472:30;44551:1;44542:6;44537:3;44533:16;44526:27;44465:94;;;;44568:268;44633:1;44640:101;44654:6;44651:1;44648:13;44640:101;;;44730:1;44725:3;44721:11;44715:18;44711:1;44706:3;44702:11;44695:39;44676:2;44673:1;44669:10;44664:15;;44640:101;;;44756:6;44753:1;44750:13;44747:2;;;44821:1;44812:6;44807:3;44803:16;44796:27;44747:2;44617:219;;;;;44844:97;;44932:2;44928:7;44923:2;44916:5;44912:14;44908:28;44898:38;;44892:49;;;";
  var abi = [
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "amt",
  				type: "uint256"
  			},
  			{
  				name: "dest",
  				type: "address"
  			}
  		],
  		name: "withdraw",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "gsnMaxCallsPerDay",
  		outputs: [
  			{
  				name: "",
  				type: "uint40"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "key",
  				type: "bytes32"
  			}
  		],
  		name: "checkDataKey",
  		outputs: [
  			{
  				name: "",
  				type: "bool"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "getTables",
  		outputs: [
  			{
  				name: "",
  				type: "bytes32[]"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "idTableKey",
  				type: "bytes32"
  			}
  		],
  		name: "getRowOwner",
  		outputs: [
  			{
  				name: "rowOwner",
  				type: "address"
  			},
  			{
  				name: "createdDate",
  				type: "bytes4"
  			}
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableName",
  				type: "bytes32"
  			},
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "permission",
  				type: "uint8"
  			},
  			{
  				name: "columnName",
  				type: "bytes32[]"
  			},
  			{
  				name: "columnDtype",
  				type: "bytes32[]"
  			}
  		],
  		name: "createTable",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "getGSNBalance",
  		outputs: [
  			{
  				name: "",
  				type: "uint256"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "idKey",
  				type: "bytes32"
  			},
  			{
  				name: "fieldKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			},
  			{
  				name: "val",
  				type: "bytes"
  			}
  		],
  		name: "insertValVar",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "schemasTables",
  		outputs: [
  			{
  				name: "",
  				type: "bytes32"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "",
  				type: "bytes32"
  			}
  		],
  		name: "gsnCounter",
  		outputs: [
  			{
  				name: "",
  				type: "uint256"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "fieldIdTableKey",
  				type: "bytes32"
  			}
  		],
  		name: "getRowValue",
  		outputs: [
  			{
  				name: "",
  				type: "bytes32"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  		],
  		name: "renounceOwnership",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "getHubAddr",
  		outputs: [
  			{
  				name: "",
  				type: "address"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableName",
  				type: "bytes32"
  			},
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "columnName",
  				type: "bytes32[]"
  			},
  			{
  				name: "columnDtype",
  				type: "bytes32[]"
  			}
  		],
  		name: "saveSchema",
  		outputs: [
  			{
  				name: "",
  				type: "bool"
  			}
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "idKey",
  				type: "bytes32"
  			},
  			{
  				name: "fieldKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			},
  			{
  				name: "val",
  				type: "bytes32"
  			}
  		],
  		name: "updateVal",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "context",
  				type: "bytes"
  			}
  		],
  		name: "preRelayedCall",
  		outputs: [
  			{
  				name: "",
  				type: "bytes32"
  			}
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  		],
  		name: "initialize",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "idKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			}
  		],
  		name: "deleteRow",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "relay",
  				type: "address"
  			},
  			{
  				name: "from",
  				type: "address"
  			},
  			{
  				name: "encodedFunction",
  				type: "bytes"
  			},
  			{
  				name: "transactionFee",
  				type: "uint256"
  			},
  			{
  				name: "gasPrice",
  				type: "uint256"
  			},
  			{
  				name: "gasLimit",
  				type: "uint256"
  			},
  			{
  				name: "nonce",
  				type: "uint256"
  			},
  			{
  				name: "approvalData",
  				type: "bytes"
  			},
  			{
  				name: "maxPossibleCharge",
  				type: "uint256"
  			}
  		],
  		name: "acceptRelayedCall",
  		outputs: [
  			{
  				name: "",
  				type: "uint256"
  			},
  			{
  				name: "",
  				type: "bytes"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "idKey",
  				type: "bytes32"
  			},
  			{
  				name: "fieldKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			}
  		],
  		name: "deleteVal",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "owner",
  		outputs: [
  			{
  				name: "",
  				type: "address"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "isOwner",
  		outputs: [
  			{
  				name: "",
  				type: "bool"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "_name",
  				type: "bytes32"
  			}
  		],
  		name: "getSchema",
  		outputs: [
  			{
  				components: [
  					{
  						name: "name",
  						type: "bytes32"
  					},
  					{
  						components: [
  							{
  								name: "name",
  								type: "bytes32"
  							},
  							{
  								name: "_dtype",
  								type: "bytes32"
  							}
  						],
  						name: "columns",
  						type: "tuple[]"
  					}
  				],
  				name: "",
  				type: "tuple"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "relayHubVersion",
  		outputs: [
  			{
  				name: "",
  				type: "string"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "idKey",
  				type: "bytes32"
  			},
  			{
  				name: "fieldKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			},
  			{
  				name: "val",
  				type: "bytes32"
  			}
  		],
  		name: "insertVal",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "max",
  				type: "uint256"
  			}
  		],
  		name: "setGsnMaxCallsPerDay",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			}
  		],
  		name: "getTableIds",
  		outputs: [
  			{
  				name: "",
  				type: "bytes32[]"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "sender",
  				type: "address"
  			}
  		],
  		name: "initialize",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  		],
  		name: "dateTimeAddr",
  		outputs: [
  			{
  				name: "",
  				type: "address"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "_tableKey",
  				type: "bytes32"
  			}
  		],
  		name: "getTableMetadata",
  		outputs: [
  			{
  				name: "permission",
  				type: "uint256"
  			},
  			{
  				name: "delegate",
  				type: "address"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "context",
  				type: "bytes"
  			},
  			{
  				name: "success",
  				type: "bool"
  			},
  			{
  				name: "actualCharge",
  				type: "uint256"
  			},
  			{
  				name: "preRetVal",
  				type: "bytes32"
  			}
  		],
  		name: "postRelayedCall",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "fieldIdTableKey",
  				type: "bytes32"
  			}
  		],
  		name: "getRowValueVar",
  		outputs: [
  			{
  				name: "",
  				type: "bytes"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "tableName",
  				type: "bytes32"
  			},
  			{
  				name: "tableKey",
  				type: "bytes32"
  			}
  		],
  		name: "deleteTable",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: true,
  		inputs: [
  			{
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				name: "id",
  				type: "bytes32"
  			}
  		],
  		name: "getIdExists",
  		outputs: [
  			{
  				name: "",
  				type: "bool"
  			}
  		],
  		payable: false,
  		stateMutability: "view",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "newOwner",
  				type: "address"
  			}
  		],
  		name: "transferOwnership",
  		outputs: [
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		constant: false,
  		inputs: [
  			{
  				name: "dest",
  				type: "address"
  			}
  		],
  		name: "withdrawAll",
  		outputs: [
  			{
  				name: "",
  				type: "uint256"
  			}
  		],
  		payable: false,
  		stateMutability: "nonpayable",
  		type: "function"
  	},
  	{
  		payable: true,
  		stateMutability: "payable",
  		type: "fallback"
  	},
  	{
  		anonymous: false,
  		inputs: [
  			{
  				indexed: true,
  				name: "tableKey",
  				type: "bytes32"
  			},
  			{
  				indexed: true,
  				name: "fieldKey",
  				type: "bytes32"
  			},
  			{
  				indexed: true,
  				name: "val",
  				type: "bytes32"
  			},
  			{
  				indexed: false,
  				name: "id",
  				type: "bytes32"
  			},
  			{
  				indexed: false,
  				name: "owner",
  				type: "address"
  			}
  		],
  		name: "InsertVal",
  		type: "event"
  	},
  	{
  		anonymous: false,
  		inputs: [
  			{
  				indexed: true,
  				name: "oldRelayHub",
  				type: "address"
  			},
  			{
  				indexed: true,
  				name: "newRelayHub",
  				type: "address"
  			}
  		],
  		name: "RelayHubChanged",
  		type: "event"
  	},
  	{
  		anonymous: false,
  		inputs: [
  			{
  				indexed: true,
  				name: "previousOwner",
  				type: "address"
  			},
  			{
  				indexed: true,
  				name: "newOwner",
  				type: "address"
  			}
  		],
  		name: "OwnershipTransferred",
  		type: "event"
  	}
  ];
  var ast = {
  	absolutePath: "contracts/ELAJSStore.sol",
  	exportedSymbols: {
  		DateTime: [
  			956
  		],
  		ELAJSStore: [
  			2314
  		]
  	},
  	id: 2315,
  	nodeType: "SourceUnit",
  	nodes: [
  		{
  			id: 927,
  			literals: [
  				"solidity",
  				"^",
  				"0.5",
  				".0"
  			],
  			nodeType: "PragmaDirective",
  			src: "0:23:2"
  		},
  		{
  			id: 928,
  			literals: [
  				"experimental",
  				"ABIEncoderV2"
  			],
  			nodeType: "PragmaDirective",
  			src: "24:33:2"
  		},
  		{
  			absolutePath: "sol-datastructs/src/contracts/PolymorphicDictionaryLib.sol",
  			file: "sol-datastructs/src/contracts/PolymorphicDictionaryLib.sol",
  			id: 929,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 9012,
  			src: "59:68:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			absolutePath: "sol-datastructs/src/contracts/Bytes32SetDictionaryLib.sol",
  			file: "sol-datastructs/src/contracts/Bytes32SetDictionaryLib.sol",
  			id: 930,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 6572,
  			src: "197:67:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			absolutePath: "sol-sql/src/contracts/src/structs/TableLib.sol",
  			file: "sol-sql/src/contracts/src/structs/TableLib.sol",
  			id: 931,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 11019,
  			src: "313:56:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			absolutePath: "contracts/ozEla/OwnableELA.sol",
  			file: "./ozEla/OwnableELA.sol",
  			id: 932,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 5102,
  			src: "371:32:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			absolutePath: "contracts/gsnEla/GSNRecipientELA.sol",
  			file: "./gsnEla/GSNRecipientELA.sol",
  			id: 933,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 3781,
  			src: "404:38:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			absolutePath: "contracts/gsnEla/IRelayHubELA.sol",
  			file: "./gsnEla/IRelayHubELA.sol",
  			id: 934,
  			nodeType: "ImportDirective",
  			scope: 2315,
  			sourceUnit: 4034,
  			src: "443:35:2",
  			symbolAliases: [
  			],
  			unitAlias: ""
  		},
  		{
  			baseContracts: [
  			],
  			contractDependencies: [
  			],
  			contractKind: "contract",
  			documentation: null,
  			fullyImplemented: false,
  			id: 956,
  			linearizedBaseContracts: [
  				956
  			],
  			name: "DateTime",
  			nodeType: "ContractDefinition",
  			nodes: [
  				{
  					body: null,
  					documentation: null,
  					id: 941,
  					implemented: false,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getYear",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 937,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 936,
  								name: "timestamp",
  								nodeType: "VariableDeclaration",
  								scope: 941,
  								src: "521:14:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 935,
  									name: "uint",
  									nodeType: "ElementaryTypeName",
  									src: "521:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "520:16:2"
  					},
  					returnParameters: {
  						id: 940,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 939,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 941,
  								src: "558:6:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint16",
  									typeString: "uint16"
  								},
  								typeName: {
  									id: 938,
  									name: "uint16",
  									nodeType: "ElementaryTypeName",
  									src: "558:6:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint16",
  										typeString: "uint16"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "557:8:2"
  					},
  					scope: 956,
  					src: "504:62:2",
  					stateMutability: "pure",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: null,
  					documentation: null,
  					id: 948,
  					implemented: false,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getMonth",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 944,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 943,
  								name: "timestamp",
  								nodeType: "VariableDeclaration",
  								scope: 948,
  								src: "589:14:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 942,
  									name: "uint",
  									nodeType: "ElementaryTypeName",
  									src: "589:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "588:16:2"
  					},
  					returnParameters: {
  						id: 947,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 946,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 948,
  								src: "626:5:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint8",
  									typeString: "uint8"
  								},
  								typeName: {
  									id: 945,
  									name: "uint8",
  									nodeType: "ElementaryTypeName",
  									src: "626:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "625:7:2"
  					},
  					scope: 956,
  					src: "571:62:2",
  					stateMutability: "pure",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: null,
  					documentation: null,
  					id: 955,
  					implemented: false,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getDay",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 951,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 950,
  								name: "timestamp",
  								nodeType: "VariableDeclaration",
  								scope: 955,
  								src: "654:14:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 949,
  									name: "uint",
  									nodeType: "ElementaryTypeName",
  									src: "654:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "653:16:2"
  					},
  					returnParameters: {
  						id: 954,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 953,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 955,
  								src: "691:5:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint8",
  									typeString: "uint8"
  								},
  								typeName: {
  									id: 952,
  									name: "uint8",
  									nodeType: "ElementaryTypeName",
  									src: "691:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "690:7:2"
  					},
  					scope: 956,
  					src: "638:60:2",
  					stateMutability: "pure",
  					superFunction: null,
  					visibility: "public"
  				}
  			],
  			scope: 2315,
  			src: "480:220:2"
  		},
  		{
  			baseContracts: [
  				{
  					"arguments": null,
  					baseName: {
  						contractScope: null,
  						id: 957,
  						name: "OwnableELA",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 5101,
  						src: "805:10:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_OwnableELA_$5101",
  							typeString: "contract OwnableELA"
  						}
  					},
  					id: 958,
  					nodeType: "InheritanceSpecifier",
  					src: "805:10:2"
  				},
  				{
  					"arguments": null,
  					baseName: {
  						contractScope: null,
  						id: 959,
  						name: "GSNRecipientELA",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 3780,
  						src: "817:15:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_GSNRecipientELA_$3780",
  							typeString: "contract GSNRecipientELA"
  						}
  					},
  					id: 960,
  					nodeType: "InheritanceSpecifier",
  					src: "817:15:2"
  				}
  			],
  			contractDependencies: [
  				3717,
  				3780,
  				4084,
  				4234,
  				4908,
  				4977,
  				5101
  			],
  			contractKind: "contract",
  			documentation: null,
  			fullyImplemented: true,
  			id: 2314,
  			linearizedBaseContracts: [
  				2314,
  				3780,
  				4234,
  				3717,
  				4084,
  				5101,
  				4908,
  				4977
  			],
  			name: "ELAJSStore",
  			nodeType: "ContractDefinition",
  			nodes: [
  				{
  					constant: false,
  					id: 963,
  					name: "dateTimeAddr",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "988:72:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_address",
  						typeString: "address"
  					},
  					typeName: {
  						id: 961,
  						name: "address",
  						nodeType: "ElementaryTypeName",
  						src: "988:7:2",
  						stateMutability: "nonpayable",
  						typeDescriptions: {
  							typeIdentifier: "t_address",
  							typeString: "address"
  						}
  					},
  					value: {
  						argumentTypes: null,
  						hexValue: "307865393832453436326230393438353046313241463934643231443437306532316245394430453943",
  						id: 962,
  						isConstant: false,
  						isLValue: false,
  						isPure: true,
  						kind: "number",
  						lValueRequested: false,
  						nodeType: "Literal",
  						src: "1018:42:2",
  						subdenomination: null,
  						typeDescriptions: {
  							typeIdentifier: "t_address_payable",
  							typeString: "address payable"
  						},
  						value: "0xe982E462b094850F12AF94d21D470e21bE9D0E9C"
  					},
  					visibility: "public"
  				},
  				{
  					constant: false,
  					id: 968,
  					name: "dateTime",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "1262:42:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_contract$_DateTime_$956",
  						typeString: "contract DateTime"
  					},
  					typeName: {
  						contractScope: null,
  						id: 964,
  						name: "DateTime",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 956,
  						src: "1262:8:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_DateTime_$956",
  							typeString: "contract DateTime"
  						}
  					},
  					value: {
  						argumentTypes: null,
  						"arguments": [
  							{
  								argumentTypes: null,
  								id: 966,
  								name: "dateTimeAddr",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 963,
  								src: "1291:12:2",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								}
  							}
  						],
  						expression: {
  							argumentTypes: [
  								{
  									typeIdentifier: "t_address",
  									typeString: "address"
  								}
  							],
  							id: 965,
  							name: "DateTime",
  							nodeType: "Identifier",
  							overloadedDeclarations: [
  							],
  							referencedDeclaration: 956,
  							src: "1282:8:2",
  							typeDescriptions: {
  								typeIdentifier: "t_type$_t_contract$_DateTime_$956_$",
  								typeString: "type(contract DateTime)"
  							}
  						},
  						id: 967,
  						isConstant: false,
  						isLValue: false,
  						isPure: false,
  						kind: "typeConversion",
  						lValueRequested: false,
  						names: [
  						],
  						nodeType: "FunctionCall",
  						src: "1282:22:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_DateTime_$956",
  							typeString: "contract DateTime"
  						}
  					},
  					visibility: "internal"
  				},
  				{
  					constant: false,
  					id: 972,
  					name: "gsnCounter",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "1549:45:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_mapping$_t_bytes32_$_t_uint256_$",
  						typeString: "mapping(bytes32 => uint256)"
  					},
  					typeName: {
  						id: 971,
  						keyType: {
  							id: 969,
  							name: "bytes32",
  							nodeType: "ElementaryTypeName",
  							src: "1557:7:2",
  							typeDescriptions: {
  								typeIdentifier: "t_bytes32",
  								typeString: "bytes32"
  							}
  						},
  						nodeType: "Mapping",
  						src: "1549:27:2",
  						typeDescriptions: {
  							typeIdentifier: "t_mapping$_t_bytes32_$_t_uint256_$",
  							typeString: "mapping(bytes32 => uint256)"
  						},
  						valueType: {
  							id: 970,
  							name: "uint256",
  							nodeType: "ElementaryTypeName",
  							src: "1568:7:2",
  							typeDescriptions: {
  								typeIdentifier: "t_uint256",
  								typeString: "uint256"
  							}
  						}
  					},
  					value: null,
  					visibility: "public"
  				},
  				{
  					constant: false,
  					id: 974,
  					name: "gsnMaxCallsPerDay",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "1653:31:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_uint40",
  						typeString: "uint40"
  					},
  					typeName: {
  						id: 973,
  						name: "uint40",
  						nodeType: "ElementaryTypeName",
  						src: "1653:6:2",
  						typeDescriptions: {
  							typeIdentifier: "t_uint40",
  							typeString: "uint40"
  						}
  					},
  					value: null,
  					visibility: "public"
  				},
  				{
  					id: 977,
  					libraryName: {
  						contractScope: null,
  						id: 975,
  						name: "PolymorphicDictionaryLib",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 9011,
  						src: "1697:24:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_PolymorphicDictionaryLib_$9011",
  							typeString: "library PolymorphicDictionaryLib"
  						}
  					},
  					nodeType: "UsingForDirective",
  					src: "1691:82:2",
  					typeName: {
  						contractScope: null,
  						id: 976,
  						name: "PolymorphicDictionaryLib.PolymorphicDictionary",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 7515,
  						src: "1726:46:2",
  						typeDescriptions: {
  							typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage_ptr",
  							typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary"
  						}
  					}
  				},
  				{
  					id: 980,
  					libraryName: {
  						contractScope: null,
  						id: 978,
  						name: "Bytes32SetDictionaryLib",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 6571,
  						src: "1784:23:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_Bytes32SetDictionaryLib_$6571",
  							typeString: "library Bytes32SetDictionaryLib"
  						}
  					},
  					nodeType: "UsingForDirective",
  					src: "1778:79:2",
  					typeName: {
  						contractScope: null,
  						id: 979,
  						name: "Bytes32SetDictionaryLib.Bytes32SetDictionary",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 6275,
  						src: "1812:44:2",
  						typeDescriptions: {
  							typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage_ptr",
  							typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary"
  						}
  					}
  				},
  				{
  					constant: false,
  					id: 984,
  					name: "_table",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "2115:43:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  						typeString: "mapping(bytes32 => bytes32)"
  					},
  					typeName: {
  						id: 983,
  						keyType: {
  							id: 981,
  							name: "bytes32",
  							nodeType: "ElementaryTypeName",
  							src: "2123:7:2",
  							typeDescriptions: {
  								typeIdentifier: "t_bytes32",
  								typeString: "bytes32"
  							}
  						},
  						nodeType: "Mapping",
  						src: "2115:27:2",
  						typeDescriptions: {
  							typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  							typeString: "mapping(bytes32 => bytes32)"
  						},
  						valueType: {
  							id: 982,
  							name: "bytes32",
  							nodeType: "ElementaryTypeName",
  							src: "2134:7:2",
  							typeDescriptions: {
  								typeIdentifier: "t_bytes32",
  								typeString: "bytes32"
  							}
  						}
  					},
  					value: null,
  					visibility: "internal"
  				},
  				{
  					constant: false,
  					id: 986,
  					name: "tableId",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "2251:61:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  						typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary"
  					},
  					typeName: {
  						contractScope: null,
  						id: 985,
  						name: "Bytes32SetDictionaryLib.Bytes32SetDictionary",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 6275,
  						src: "2251:44:2",
  						typeDescriptions: {
  							typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage_ptr",
  							typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary"
  						}
  					},
  					value: null,
  					visibility: "internal"
  				},
  				{
  					id: 989,
  					libraryName: {
  						contractScope: null,
  						id: 987,
  						name: "TableLib",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 11018,
  						src: "2408:8:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_TableLib_$11018",
  							typeString: "library TableLib"
  						}
  					},
  					nodeType: "UsingForDirective",
  					src: "2402:34:2",
  					typeName: {
  						contractScope: null,
  						id: 988,
  						name: "TableLib.Table",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 10783,
  						src: "2421:14:2",
  						typeDescriptions: {
  							typeIdentifier: "t_struct$_Table_$10783_storage_ptr",
  							typeString: "struct TableLib.Table"
  						}
  					}
  				},
  				{
  					id: 992,
  					libraryName: {
  						contractScope: null,
  						id: 990,
  						name: "TableLib",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 11018,
  						src: "2447:8:2",
  						typeDescriptions: {
  							typeIdentifier: "t_contract$_TableLib_$11018",
  							typeString: "library TableLib"
  						}
  					},
  					nodeType: "UsingForDirective",
  					src: "2441:25:2",
  					typeName: {
  						id: 991,
  						name: "bytes",
  						nodeType: "ElementaryTypeName",
  						src: "2460:5:2",
  						typeDescriptions: {
  							typeIdentifier: "t_bytes_storage_ptr",
  							typeString: "bytes"
  						}
  					}
  				},
  				{
  					constant: true,
  					id: 995,
  					name: "schemasTables",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "2628:106:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_bytes32",
  						typeString: "bytes32"
  					},
  					typeName: {
  						id: 993,
  						name: "bytes32",
  						nodeType: "ElementaryTypeName",
  						src: "2628:7:2",
  						typeDescriptions: {
  							typeIdentifier: "t_bytes32",
  							typeString: "bytes32"
  						}
  					},
  					value: {
  						argumentTypes: null,
  						hexValue: "307837333633363836353664363137333265373037353632366336393633326537343631363236633635373330303030303030303030303030303030303030303030",
  						id: 994,
  						isConstant: false,
  						isLValue: false,
  						isPure: true,
  						kind: "number",
  						lValueRequested: false,
  						nodeType: "Literal",
  						src: "2668:66:2",
  						subdenomination: null,
  						typeDescriptions: {
  							typeIdentifier: "t_rational_52191615962582502679176554766158760808305166966340223837583177329853989912576_by_1",
  							typeString: "int_const 5219...(69 digits omitted)...2576"
  						},
  						value: "0x736368656d61732e7075626c69632e7461626c65730000000000000000000000"
  					},
  					visibility: "public"
  				},
  				{
  					constant: false,
  					id: 997,
  					name: "database",
  					nodeType: "VariableDeclaration",
  					scope: 2314,
  					src: "3009:64:2",
  					stateVariable: true,
  					storageLocation: "default",
  					typeDescriptions: {
  						typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  						typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary"
  					},
  					typeName: {
  						contractScope: null,
  						id: 996,
  						name: "PolymorphicDictionaryLib.PolymorphicDictionary",
  						nodeType: "UserDefinedTypeName",
  						referencedDeclaration: 7515,
  						src: "3009:46:2",
  						typeDescriptions: {
  							typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage_ptr",
  							typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary"
  						}
  					},
  					value: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 1017,
  						nodeType: "Block",
  						src: "3221:111:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											expression: {
  												argumentTypes: null,
  												id: 1005,
  												name: "msg",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 11033,
  												src: "3253:3:2",
  												typeDescriptions: {
  													typeIdentifier: "t_magic_message",
  													typeString: "msg"
  												}
  											},
  											id: 1006,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											memberName: "sender",
  											nodeType: "MemberAccess",
  											referencedDeclaration: null,
  											src: "3253:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1002,
  											name: "OwnableELA",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 5101,
  											src: "3231:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_contract$_OwnableELA_$5101_$",
  												typeString: "type(contract OwnableELA)"
  											}
  										},
  										id: 1004,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "initialize",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 5012,
  										src: "3231:21:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_address_$returns$__$",
  											typeString: "function (address)"
  										}
  									},
  									id: 1007,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "3231:33:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1008,
  								nodeType: "ExpressionStatement",
  								src: "3231:33:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1009,
  											name: "GSNRecipientELA",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 3780,
  											src: "3274:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_contract$_GSNRecipientELA_$3780_$",
  												typeString: "type(contract GSNRecipientELA)"
  											}
  										},
  										id: 1011,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "initialize",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 3743,
  										src: "3274:26:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1012,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "3274:28:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1013,
  								nodeType: "ExpressionStatement",
  								src: "3274:28:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1014,
  										name: "_initialize",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1035,
  										src: "3312:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1015,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "3312:13:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1016,
  								nodeType: "ExpressionStatement",
  								src: "3312:13:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1018,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 1000,
  							modifierName: {
  								argumentTypes: null,
  								id: 999,
  								name: "initializer",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 4952,
  								src: "3209:11:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "3209:11:2"
  						}
  					],
  					name: "initialize",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 998,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "3199:2:2"
  					},
  					returnParameters: {
  						id: 1001,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "3221:0:2"
  					},
  					scope: 2314,
  					src: "3180:152:2",
  					stateMutability: "nonpayable",
  					superFunction: 3743,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1034,
  						nodeType: "Block",
  						src: "3370:247:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1023,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1021,
  										name: "gsnMaxCallsPerDay",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 974,
  										src: "3380:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint40",
  											typeString: "uint40"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										hexValue: "31303030",
  										id: 1022,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "number",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "3400:4:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_rational_1000_by_1",
  											typeString: "int_const 1000"
  										},
  										value: "1000"
  									},
  									src: "3380:24:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint40",
  										typeString: "uint40"
  									}
  								},
  								id: 1024,
  								nodeType: "ExpressionStatement",
  								src: "3380:24:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1028,
  											name: "schemasTables",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 995,
  											src: "3540:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											expression: {
  												argumentTypes: null,
  												expression: {
  													argumentTypes: null,
  													id: 1029,
  													name: "PolymorphicDictionaryLib",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 9011,
  													src: "3555:24:2",
  													typeDescriptions: {
  														typeIdentifier: "t_type$_t_contract$_PolymorphicDictionaryLib_$9011_$",
  														typeString: "type(library PolymorphicDictionaryLib)"
  													}
  												},
  												id: 1030,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												memberName: "DictionaryType",
  												nodeType: "MemberAccess",
  												referencedDeclaration: 7520,
  												src: "3555:39:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_enum$_DictionaryType_$7520_$",
  													typeString: "type(enum PolymorphicDictionaryLib.DictionaryType)"
  												}
  											},
  											id: 1031,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											memberName: "OneToManyFixed",
  											nodeType: "MemberAccess",
  											referencedDeclaration: null,
  											src: "3555:54:2",
  											typeDescriptions: {
  												typeIdentifier: "t_enum$_DictionaryType_$7520",
  												typeString: "enum PolymorphicDictionaryLib.DictionaryType"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_enum$_DictionaryType_$7520",
  												typeString: "enum PolymorphicDictionaryLib.DictionaryType"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1025,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "3524:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1027,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "addKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8938,
  										src: "3524:15:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_enum$_DictionaryType_$7520_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,enum PolymorphicDictionaryLib.DictionaryType) returns (bool)"
  										}
  									},
  									id: 1032,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "3524:86:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1033,
  								nodeType: "ExpressionStatement",
  								src: "3524:86:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1035,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "_initialize",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1019,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "3358:2:2"
  					},
  					returnParameters: {
  						id: 1020,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "3370:0:2"
  					},
  					scope: 2314,
  					src: "3338:279:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 1093,
  						nodeType: "Block",
  						src: "4134:763:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											id: 1057,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												baseExpression: {
  													argumentTypes: null,
  													id: 1053,
  													name: "_table",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 984,
  													src: "4428:6:2",
  													typeDescriptions: {
  														typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  														typeString: "mapping(bytes32 => bytes32)"
  													}
  												},
  												id: 1055,
  												indexExpression: {
  													argumentTypes: null,
  													id: 1054,
  													name: "tableKey",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1039,
  													src: "4435:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												},
  												isConstant: false,
  												isLValue: true,
  												isPure: false,
  												lValueRequested: false,
  												nodeType: "IndexAccess",
  												src: "4428:16:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "30",
  												id: 1056,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "number",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "4448:1:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_rational_0_by_1",
  													typeString: "int_const 0"
  												},
  												value: "0"
  											},
  											src: "4428:21:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "5461626c6520616c726561647920657869737473",
  											id: 1058,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "4451:22:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_d8add126c0ed6d6d0798bb02d3c7c3567f9ff0247b5ed07dd21088b6700efbaf",
  												typeString: "literal_string \"Table already exists\""
  											},
  											value: "Table already exists"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_d8add126c0ed6d6d0798bb02d3c7c3567f9ff0247b5ed07dd21088b6700efbaf",
  												typeString: "literal_string \"Table already exists\""
  											}
  										],
  										id: 1052,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "4420:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1059,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4420:54:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1060,
  								nodeType: "ExpressionStatement",
  								src: "4420:54:2"
  							},
  							{
  								assignments: [
  									1062
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1062,
  										name: "delegate",
  										nodeType: "VariableDeclaration",
  										scope: 1093,
  										src: "4485:16:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										},
  										typeName: {
  											id: 1061,
  											name: "address",
  											nodeType: "ElementaryTypeName",
  											src: "4485:7:2",
  											stateMutability: "nonpayable",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1066,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											hexValue: "307830",
  											id: 1064,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "4512:3:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_0_by_1",
  												typeString: "int_const 0"
  											},
  											value: "0x0"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_rational_0_by_1",
  												typeString: "int_const 0"
  											}
  										],
  										id: 1063,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										lValueRequested: false,
  										nodeType: "ElementaryTypeNameExpression",
  										src: "4504:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_type$_t_address_$",
  											typeString: "type(address)"
  										},
  										typeName: "address"
  									},
  									id: 1065,
  									isConstant: false,
  									isLValue: false,
  									isPure: true,
  									kind: "typeConversion",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4504:12:2",
  									typeDescriptions: {
  										typeIdentifier: "t_address_payable",
  										typeString: "address payable"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "4485:31:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1068,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1039,
  											src: "4595:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1069,
  											name: "permission",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1041,
  											src: "4605:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1070,
  											name: "delegate",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1062,
  											src: "4617:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											},
  											{
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										],
  										id: 1067,
  										name: "setTableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2063,
  										src: "4578:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_uint8_$_t_address_$returns$__$",
  											typeString: "function (bytes32,uint8,address)"
  										}
  									},
  									id: 1071,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4578:48:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1072,
  								nodeType: "ExpressionStatement",
  								src: "4578:48:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1076,
  											name: "schemasTables",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 995,
  											src: "4661:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1077,
  											name: "tableName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1037,
  											src: "4676:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1073,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "4637:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1075,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "addValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8677,
  										src: "4637:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1078,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4637:49:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1079,
  								nodeType: "ExpressionStatement",
  								src: "4637:49:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1083,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1039,
  											src: "4781:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1080,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "4766:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1082,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "addKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6291,
  										src: "4766:14:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32) returns (bool)"
  										}
  									},
  									id: 1084,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4766:24:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1085,
  								nodeType: "ExpressionStatement",
  								src: "4766:24:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1087,
  											name: "tableName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1037,
  											src: "4845:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1088,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1039,
  											src: "4856:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1089,
  											name: "columnName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1044,
  											src: "4866:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1090,
  											name: "columnDtype",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1047,
  											src: "4878:11:2",
  											typeDescriptions: {
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											},
  											{
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										],
  										id: 1086,
  										name: "saveSchema",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1176,
  										src: "4834:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$",
  											typeString: "function (bytes32,bytes32,bytes32[] memory,bytes32[] memory) returns (bool)"
  										}
  									},
  									id: 1091,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "4834:56:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1092,
  								nodeType: "ExpressionStatement",
  								src: "4834:56:2"
  							}
  						]
  					},
  					documentation: "@dev create a new table, only the owner may create this\n     * @param tableName right padded zeroes (Web3.utils.stringToHex)\n@param tableKey this is the namehash of tableName",
  					id: 1094,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 1050,
  							modifierName: {
  								argumentTypes: null,
  								id: 1049,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "4124:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "4124:9:2"
  						}
  					],
  					name: "createTable",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1048,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1037,
  								name: "tableName",
  								nodeType: "VariableDeclaration",
  								scope: 1094,
  								src: "3965:17:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1036,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "3965:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1039,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1094,
  								src: "3992:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1038,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "3992:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1041,
  								name: "permission",
  								nodeType: "VariableDeclaration",
  								scope: 1094,
  								src: "4018:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint8",
  									typeString: "uint8"
  								},
  								typeName: {
  									id: 1040,
  									name: "uint8",
  									nodeType: "ElementaryTypeName",
  									src: "4018:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1044,
  								name: "columnName",
  								nodeType: "VariableDeclaration",
  								scope: 1094,
  								src: "4044:27:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1042,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "4044:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1043,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "4044:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1047,
  								name: "columnDtype",
  								nodeType: "VariableDeclaration",
  								scope: 1094,
  								src: "4081:28:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1045,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "4081:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1046,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "4081:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "3955:161:2"
  					},
  					returnParameters: {
  						id: 1051,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "4134:0:2"
  					},
  					scope: 2314,
  					src: "3935:962:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1122,
  						nodeType: "Block",
  						src: "5033:136:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1107,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										baseExpression: {
  											argumentTypes: null,
  											id: 1103,
  											name: "_table",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 984,
  											src: "5043:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  												typeString: "mapping(bytes32 => bytes32)"
  											}
  										},
  										id: 1105,
  										indexExpression: {
  											argumentTypes: null,
  											id: 1104,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1098,
  											src: "5050:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: true,
  										nodeType: "IndexAccess",
  										src: "5043:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										hexValue: "30",
  										id: 1106,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "number",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "5062:1:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_rational_0_by_1",
  											typeString: "int_const 0"
  										},
  										value: "0"
  									},
  									src: "5043:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								id: 1108,
  								nodeType: "ExpressionStatement",
  								src: "5043:20:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1112,
  											name: "schemasTables",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 995,
  											src: "5100:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1113,
  											name: "tableName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1096,
  											src: "5115:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1109,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "5073:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1111,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "removeValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8991,
  										src: "5073:26:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1114,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5073:52:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1115,
  								nodeType: "ExpressionStatement",
  								src: "5073:52:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1119,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1098,
  											src: "5153:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1116,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "5135:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1118,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "removeKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6404,
  										src: "5135:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32) returns (bool)"
  										}
  									},
  									id: 1120,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5135:27:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1121,
  								nodeType: "ExpressionStatement",
  								src: "5135:27:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1123,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 1101,
  							modifierName: {
  								argumentTypes: null,
  								id: 1100,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "5023:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "5023:9:2"
  						}
  					],
  					name: "deleteTable",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1099,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1096,
  								name: "tableName",
  								nodeType: "VariableDeclaration",
  								scope: 1123,
  								src: "4966:17:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1095,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "4966:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1098,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1123,
  								src: "4993:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1097,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "4993:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "4956:59:2"
  					},
  					returnParameters: {
  						id: 1102,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "5033:0:2"
  					},
  					scope: 2314,
  					src: "4936:233:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1134,
  						nodeType: "Block",
  						src: "5236:77:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1131,
  											name: "schemasTables",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 995,
  											src: "5292:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1129,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "5253:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1130,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "enumerateForKeyOneToManyFixed",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 7772,
  										src: "5253:38:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes32[] memory)"
  										}
  									},
  									id: 1132,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5253:53:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  										typeString: "bytes32[] memory"
  									}
  								},
  								functionReturnParameters: 1128,
  								id: 1133,
  								nodeType: "Return",
  								src: "5246:60:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1135,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getTables",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1124,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "5193:2:2"
  					},
  					returnParameters: {
  						id: 1128,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1127,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1135,
  								src: "5219:16:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1125,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "5219:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1126,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "5219:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "5218:18:2"
  					},
  					scope: 2314,
  					src: "5175:138:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1175,
  						nodeType: "Block",
  						src: "5645:331:2",
  						statements: [
  							{
  								assignments: [
  									1155
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1155,
  										name: "tableSchema",
  										nodeType: "VariableDeclaration",
  										scope: 1175,
  										src: "5656:33:2",
  										stateVariable: false,
  										storageLocation: "memory",
  										typeDescriptions: {
  											typeIdentifier: "t_struct$_Table_$10783_memory_ptr",
  											typeString: "struct TableLib.Table"
  										},
  										typeName: {
  											contractScope: null,
  											id: 1154,
  											name: "TableLib.Table",
  											nodeType: "UserDefinedTypeName",
  											referencedDeclaration: 10783,
  											src: "5656:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Table_$10783_storage_ptr",
  												typeString: "struct TableLib.Table"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1162,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1158,
  											name: "tableName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1137,
  											src: "5721:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1159,
  											name: "columnName",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1142,
  											src: "5744:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1160,
  											name: "columnDtype",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1145,
  											src: "5768:11:2",
  											typeDescriptions: {
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											},
  											{
  												typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  												typeString: "bytes32[] memory"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1156,
  											name: "TableLib",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11018,
  											src: "5692:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_contract$_TableLib_$11018_$",
  												typeString: "type(library TableLib)"
  											}
  										},
  										id: 1157,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "create",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 10883,
  										src: "5692:15:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_struct$_Table_$10783_memory_ptr_$",
  											typeString: "function (bytes32,bytes32[] memory,bytes32[] memory) pure returns (struct TableLib.Table memory)"
  										}
  									},
  									id: 1161,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5692:97:2",
  									typeDescriptions: {
  										typeIdentifier: "t_struct$_Table_$10783_memory_ptr",
  										typeString: "struct TableLib.Table memory"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "5656:133:2"
  							},
  							{
  								assignments: [
  									1164
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1164,
  										name: "encoded",
  										nodeType: "VariableDeclaration",
  										scope: 1175,
  										src: "5800:20:2",
  										stateVariable: false,
  										storageLocation: "memory",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes_memory_ptr",
  											typeString: "bytes"
  										},
  										typeName: {
  											id: 1163,
  											name: "bytes",
  											nodeType: "ElementaryTypeName",
  											src: "5800:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_storage_ptr",
  												typeString: "bytes"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1168,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1165,
  											name: "tableSchema",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1155,
  											src: "5823:11:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Table_$10783_memory_ptr",
  												typeString: "struct TableLib.Table memory"
  											}
  										},
  										id: 1166,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "encode",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 10935,
  										src: "5823:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_struct$_Table_$10783_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_Table_$10783_memory_ptr_$",
  											typeString: "function (struct TableLib.Table memory) pure returns (bytes memory)"
  										}
  									},
  									id: 1167,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5823:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_memory_ptr",
  										typeString: "bytes memory"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "5800:43:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1171,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1139,
  											src: "5951:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1172,
  											name: "encoded",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1164,
  											src: "5961:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1169,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "5927:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1170,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "setValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8628,
  										src: "5927:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes memory) returns (bool)"
  										}
  									},
  									id: 1173,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "5927:42:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								functionReturnParameters: 1151,
  								id: 1174,
  								nodeType: "Return",
  								src: "5920:49:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1176,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 1148,
  							modifierName: {
  								argumentTypes: null,
  								id: 1147,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "5620:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "5620:9:2"
  						}
  					],
  					name: "saveSchema",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1146,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1137,
  								name: "tableName",
  								nodeType: "VariableDeclaration",
  								scope: 1176,
  								src: "5487:17:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1136,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "5487:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1139,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1176,
  								src: "5514:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1138,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "5514:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1142,
  								name: "columnName",
  								nodeType: "VariableDeclaration",
  								scope: 1176,
  								src: "5540:27:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1140,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "5540:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1141,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "5540:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1145,
  								name: "columnDtype",
  								nodeType: "VariableDeclaration",
  								scope: 1176,
  								src: "5577:28:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1143,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "5577:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1144,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "5577:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "5477:135:2"
  					},
  					returnParameters: {
  						id: 1151,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1150,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1176,
  								src: "5639:4:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bool",
  									typeString: "bool"
  								},
  								typeName: {
  									id: 1149,
  									name: "bool",
  									nodeType: "ElementaryTypeName",
  									src: "5639:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "5638:6:2"
  					},
  					scope: 2314,
  					src: "5458:518:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1194,
  						nodeType: "Block",
  						src: "6080:108:2",
  						statements: [
  							{
  								assignments: [
  									1184
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1184,
  										name: "encoded",
  										nodeType: "VariableDeclaration",
  										scope: 1194,
  										src: "6090:20:2",
  										stateVariable: false,
  										storageLocation: "memory",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes_memory_ptr",
  											typeString: "bytes"
  										},
  										typeName: {
  											id: 1183,
  											name: "bytes",
  											nodeType: "ElementaryTypeName",
  											src: "6090:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_storage_ptr",
  												typeString: "bytes"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1189,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1187,
  											name: "_name",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1178,
  											src: "6137:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1185,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "6113:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1186,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getBytesForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8088,
  										src: "6113:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes memory)"
  										}
  									},
  									id: 1188,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "6113:30:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_memory_ptr",
  										typeString: "bytes memory"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "6090:53:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1190,
  											name: "encoded",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1184,
  											src: "6160:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										},
  										id: 1191,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "decodeTable",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 10984,
  										src: "6160:19:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_Table_$10783_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
  											typeString: "function (bytes memory) pure returns (struct TableLib.Table memory)"
  										}
  									},
  									id: 1192,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "6160:21:2",
  									typeDescriptions: {
  										typeIdentifier: "t_struct$_Table_$10783_memory_ptr",
  										typeString: "struct TableLib.Table memory"
  									}
  								},
  								functionReturnParameters: 1182,
  								id: 1193,
  								nodeType: "Return",
  								src: "6153:28:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1195,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getSchema",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1179,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1178,
  								name: "_name",
  								nodeType: "VariableDeclaration",
  								scope: 1195,
  								src: "6021:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1177,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "6021:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "6020:15:2"
  					},
  					returnParameters: {
  						id: 1182,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1181,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1195,
  								src: "6057:21:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_struct$_Table_$10783_memory_ptr",
  									typeString: "struct TableLib.Table"
  								},
  								typeName: {
  									contractScope: null,
  									id: 1180,
  									name: "TableLib.Table",
  									nodeType: "UserDefinedTypeName",
  									referencedDeclaration: 10783,
  									src: "6057:14:2",
  									typeDescriptions: {
  										typeIdentifier: "t_struct$_Table_$10783_storage_ptr",
  										typeString: "struct TableLib.Table"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "6056:23:2"
  					},
  					scope: 2314,
  					src: "6002:186:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1232,
  						nodeType: "Block",
  						src: "6390:423:2",
  						statements: [
  							{
  								assignments: [
  									1200,
  									1202
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1200,
  										name: "permission",
  										nodeType: "VariableDeclaration",
  										scope: 1232,
  										src: "6402:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 1199,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "6402:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									},
  									{
  										constant: false,
  										id: 1202,
  										name: "delegate",
  										nodeType: "VariableDeclaration",
  										scope: 1232,
  										src: "6422:16:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										},
  										typeName: {
  											id: 1201,
  											name: "address",
  											nodeType: "ElementaryTypeName",
  											src: "6422:7:2",
  											stateMutability: "nonpayable",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1206,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1204,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1197,
  											src: "6459:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1203,
  										name: "getTableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2028,
  										src: "6442:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_bytes32_$returns$_t_uint256_$_t_address_$",
  											typeString: "function (bytes32) view returns (uint256,address)"
  										}
  									},
  									id: 1205,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "6442:26:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$_t_uint256_$_t_address_$",
  										typeString: "tuple(uint256,address)"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "6401:67:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											},
  											id: 1210,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												id: 1208,
  												name: "permission",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1200,
  												src: "6551:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: ">",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "30",
  												id: 1209,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "number",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "6564:1:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_rational_0_by_1",
  													typeString: "int_const 0"
  												},
  												value: "0"
  											},
  											src: "6551:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "43616e6e6f7420494e5345525420696e746f2073797374656d207461626c65",
  											id: 1211,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "6567:33:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_28f57c2279a5e7e2e4199177afe179a3b463277cc9c606809c6534b86aa50229",
  												typeString: "literal_string \"Cannot INSERT into system table\""
  											},
  											value: "Cannot INSERT into system table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_28f57c2279a5e7e2e4199177afe179a3b463277cc9c606809c6534b86aa50229",
  												typeString: "literal_string \"Cannot INSERT into system table\""
  											}
  										],
  										id: 1207,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "6543:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1212,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "6543:58:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1213,
  								nodeType: "ExpressionStatement",
  								src: "6543:58:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1227,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												id: 1222,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													},
  													id: 1217,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														id: 1215,
  														name: "permission",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1200,
  														src: "6680:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: ">",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "31",
  														id: 1216,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "6693:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_1_by_1",
  															typeString: "int_const 1"
  														},
  														value: "1"
  													},
  													src: "6680:14:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "||",
  												rightExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													},
  													id: 1221,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														"arguments": [
  														],
  														expression: {
  															argumentTypes: [
  															],
  															id: 1218,
  															name: "isOwner",
  															nodeType: "Identifier",
  															overloadedDeclarations: [
  															],
  															referencedDeclaration: 5041,
  															src: "6698:7:2",
  															typeDescriptions: {
  																typeIdentifier: "t_function_internal_view$__$returns$_t_bool_$",
  																typeString: "function () view returns (bool)"
  															}
  														},
  														id: 1219,
  														isConstant: false,
  														isLValue: false,
  														isPure: false,
  														kind: "functionCall",
  														lValueRequested: false,
  														names: [
  														],
  														nodeType: "FunctionCall",
  														src: "6698:9:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: "==",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "74727565",
  														id: 1220,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "bool",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "6711:4:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														},
  														value: "true"
  													},
  													src: "6698:17:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												src: "6680:35:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "||",
  											rightExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_address",
  													typeString: "address"
  												},
  												id: 1226,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 1223,
  													name: "delegate",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1202,
  													src: "6719:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "==",
  												rightExpression: {
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1224,
  														name: "_msgSender",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  															3632
  														],
  														referencedDeclaration: 3632,
  														src: "6731:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  															typeString: "function () view returns (address)"
  														}
  													},
  													id: 1225,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "6731:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												src: "6719:24:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											src: "6680:63:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "4f6e6c79206f776e65722f64656c65676174652063616e20494e5345525420696e746f2074686973207461626c65",
  											id: 1228,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "6745:48:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_8da29dab96b947ba0a45fbb38f71b63a9c8bd8e01000bc5ea24df01471fecc83",
  												typeString: "literal_string \"Only owner/delegate can INSERT into this table\""
  											},
  											value: "Only owner/delegate can INSERT into this table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_8da29dab96b947ba0a45fbb38f71b63a9c8bd8e01000bc5ea24df01471fecc83",
  												typeString: "literal_string \"Only owner/delegate can INSERT into this table\""
  											}
  										],
  										id: 1214,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "6672:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1229,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "6672:122:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1230,
  								nodeType: "ExpressionStatement",
  								src: "6672:122:2"
  							},
  							{
  								id: 1231,
  								nodeType: "PlaceholderStatement",
  								src: "6805:1:2"
  							}
  						]
  					},
  					documentation: "@dev Table level permission checks",
  					id: 1233,
  					name: "insertCheck",
  					nodeType: "ModifierDefinition",
  					parameters: {
  						id: 1198,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1197,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1233,
  								src: "6372:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1196,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "6372:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "6371:18:2"
  					},
  					src: "6351:462:2",
  					visibility: "internal"
  				},
  				{
  					anonymous: false,
  					documentation: "Primarily exists to assist in query WHERE searches, therefore we\nwant the index to exist on the value and table, filtering on owner\nis important for performance",
  					id: 1245,
  					name: "InsertVal",
  					nodeType: "EventDefinition",
  					parameters: {
  						id: 1244,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1235,
  								indexed: true,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1245,
  								src: "7044:24:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1234,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7044:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1237,
  								indexed: true,
  								name: "fieldKey",
  								nodeType: "VariableDeclaration",
  								scope: 1245,
  								src: "7078:24:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1236,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7078:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1239,
  								indexed: true,
  								name: "val",
  								nodeType: "VariableDeclaration",
  								scope: 1245,
  								src: "7112:19:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1238,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7112:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1241,
  								indexed: false,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1245,
  								src: "7142:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1240,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7142:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1243,
  								indexed: false,
  								name: "owner",
  								nodeType: "VariableDeclaration",
  								scope: 1245,
  								src: "7163:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 1242,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "7163:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "7034:148:2"
  					},
  					src: "7018:165:2"
  				},
  				{
  					body: {
  						id: 1327,
  						nodeType: "Block",
  						src: "7678:1015:2",
  						statements: [
  							{
  								assignments: [
  									1262
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1262,
  										name: "idTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1327,
  										src: "7689:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1261,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "7689:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1267,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1264,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1249,
  											src: "7719:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1265,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1247,
  											src: "7726:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1263,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "7710:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1266,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "7710:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "7689:46:2"
  							},
  							{
  								assignments: [
  									1269
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1269,
  										name: "fieldIdTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1327,
  										src: "7745:23:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1268,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "7745:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1274,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1271,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1251,
  											src: "7780:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1272,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1262,
  											src: "7790:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1270,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "7771:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1273,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "7771:30:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "7745:56:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1281,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1278,
  														name: "fieldIdTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1269,
  														src: "7841:15:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1276,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "7820:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1277,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 7823,
  													src: "7820:20:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  													}
  												},
  												id: 1279,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "7820:37:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "66616c7365",
  												id: 1280,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "7861:5:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "false"
  											},
  											src: "7820:46:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "69642b6669656c6420616c726561647920657869737473",
  											id: 1282,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "7868:25:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_b47ab3ca8e2817377098c0fdb9f676216babd1393ec4fa6b120ecb6719d9fd66",
  												typeString: "literal_string \"id+field already exists\""
  											},
  											value: "id+field already exists"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_b47ab3ca8e2817377098c0fdb9f676216babd1393ec4fa6b120ecb6719d9fd66",
  												typeString: "literal_string \"id+field already exists\""
  											}
  										],
  										id: 1275,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "7812:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1283,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "7812:82:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1284,
  								nodeType: "ExpressionStatement",
  								src: "7812:82:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1285,
  										name: "increaseGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2153,
  										src: "7934:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1286,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "7934:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1287,
  								nodeType: "ExpressionStatement",
  								src: "7934:20:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1291,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1247,
  											src: "8156:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1292,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1253,
  											src: "8166:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1288,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "8133:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1290,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "addValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6379,
  										src: "8133:22:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1293,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "8133:36:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1294,
  								nodeType: "ExpressionStatement",
  								src: "8133:36:2"
  							},
  							{
  								condition: {
  									argumentTypes: null,
  									commonType: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									},
  									id: 1300,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftExpression: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												id: 1297,
  												name: "idTableKey",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1262,
  												src: "8316:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											],
  											expression: {
  												argumentTypes: null,
  												id: 1295,
  												name: "database",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 997,
  												src: "8295:8:2",
  												typeDescriptions: {
  													typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  													typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  												}
  											},
  											id: 1296,
  											isConstant: false,
  											isLValue: true,
  											isPure: false,
  											lValueRequested: false,
  											memberName: "containsKey",
  											nodeType: "MemberAccess",
  											referencedDeclaration: 7823,
  											src: "8295:20:2",
  											typeDescriptions: {
  												typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  												typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  											}
  										},
  										id: 1298,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "functionCall",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "8295:32:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bool",
  											typeString: "bool"
  										}
  									},
  									nodeType: "BinaryOperation",
  									operator: "==",
  									rightExpression: {
  										argumentTypes: null,
  										hexValue: "66616c7365",
  										id: 1299,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "bool",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "8331:5:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_bool",
  											typeString: "bool"
  										},
  										value: "false"
  									},
  									src: "8295:41:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: null,
  								id: 1308,
  								nodeType: "IfStatement",
  								src: "8291:109:2",
  								trueBody: {
  									id: 1307,
  									nodeType: "Block",
  									src: "8337:63:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1302,
  														name: "idTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1262,
  														src: "8364:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1303,
  														name: "id",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1253,
  														src: "8376:2:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1304,
  														name: "tableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1247,
  														src: "8380:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													id: 1301,
  													name: "_setRowOwner",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1490,
  													src: "8351:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
  														typeString: "function (bytes32,bytes32,bytes32)"
  													}
  												},
  												id: 1305,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "8351:38:2",
  												typeDescriptions: {
  													typeIdentifier: "t_tuple$__$",
  													typeString: "tuple()"
  												}
  											},
  											id: 1306,
  											nodeType: "ExpressionStatement",
  											src: "8351:38:2"
  										}
  									]
  								}
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1312,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1269,
  											src: "8541:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1314,
  													name: "val",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1255,
  													src: "8566:3:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												],
  												id: 1313,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "8558:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_bytes32_$",
  													typeString: "type(bytes32)"
  												},
  												typeName: "bytes32"
  											},
  											id: 1315,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "8558:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1309,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "8517:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1311,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "setValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8481,
  										src: "8517:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1316,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "8517:54:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1317,
  								nodeType: "ExpressionStatement",
  								src: "8517:54:2"
  							},
  							{
  								eventCall: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1319,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1247,
  											src: "8643:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1320,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1251,
  											src: "8653:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1321,
  											name: "val",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1255,
  											src: "8663:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1322,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1253,
  											src: "8668:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											"arguments": [
  											],
  											expression: {
  												argumentTypes: [
  												],
  												id: 1323,
  												name: "_msgSender",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  													3632
  												],
  												referencedDeclaration: 3632,
  												src: "8672:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  													typeString: "function () view returns (address)"
  												}
  											},
  											id: 1324,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "8672:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										],
  										id: 1318,
  										name: "InsertVal",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1245,
  										src: "8633:9:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$returns$__$",
  											typeString: "function (bytes32,bytes32,bytes32,bytes32,address)"
  										}
  									},
  									id: 1325,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "8633:52:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1326,
  								nodeType: "EmitStatement",
  								src: "8628:57:2"
  							}
  						]
  					},
  					documentation: "@dev Prior to insert, we check the permissions and autoIncrement\nTODO: use the schema and determine the proper type of data to insert\n     * @param tableKey the namehashed [table] name string\n@param idKey the sha3 hashed idKey\n@param id as the raw string (unhashed)",
  					id: 1328,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": [
  								{
  									argumentTypes: null,
  									id: 1258,
  									name: "tableKey",
  									nodeType: "Identifier",
  									overloadedDeclarations: [
  									],
  									referencedDeclaration: 1247,
  									src: "7669:8:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								}
  							],
  							id: 1259,
  							modifierName: {
  								argumentTypes: null,
  								id: 1257,
  								name: "insertCheck",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 1233,
  								src: "7657:11:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$_t_bytes32_$",
  									typeString: "modifier (bytes32)"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "7657:21:2"
  						}
  					],
  					name: "insertVal",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1256,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1247,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1328,
  								src: "7536:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1246,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7536:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1249,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1328,
  								src: "7562:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1248,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7562:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1251,
  								name: "fieldKey",
  								nodeType: "VariableDeclaration",
  								scope: 1328,
  								src: "7585:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1250,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7585:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1253,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1328,
  								src: "7612:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1252,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7612:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1255,
  								name: "val",
  								nodeType: "VariableDeclaration",
  								scope: 1328,
  								src: "7632:11:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1254,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "7632:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "7525:119:2"
  					},
  					returnParameters: {
  						id: 1260,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "7678:0:2"
  					},
  					scope: 2314,
  					src: "7507:1186:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1399,
  						nodeType: "Block",
  						src: "8877:713:2",
  						statements: [
  							{
  								assignments: [
  									1345
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1345,
  										name: "idTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1399,
  										src: "8888:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1344,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "8888:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1350,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1347,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1332,
  											src: "8918:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1348,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1330,
  											src: "8925:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1346,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "8909:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1349,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "8909:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "8888:46:2"
  							},
  							{
  								assignments: [
  									1352
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1352,
  										name: "fieldIdTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1399,
  										src: "8944:23:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1351,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "8944:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1357,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1354,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1334,
  											src: "8979:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1355,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1345,
  											src: "8989:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1353,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "8970:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1356,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "8970:30:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "8944:56:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1364,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1361,
  														name: "fieldIdTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1352,
  														src: "9040:15:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1359,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "9019:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1360,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 7823,
  													src: "9019:20:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  													}
  												},
  												id: 1362,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "9019:37:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "66616c7365",
  												id: 1363,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "9060:5:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "false"
  											},
  											src: "9019:46:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "69642b6669656c6420616c726561647920657869737473",
  											id: 1365,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "9067:25:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_b47ab3ca8e2817377098c0fdb9f676216babd1393ec4fa6b120ecb6719d9fd66",
  												typeString: "literal_string \"id+field already exists\""
  											},
  											value: "id+field already exists"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_b47ab3ca8e2817377098c0fdb9f676216babd1393ec4fa6b120ecb6719d9fd66",
  												typeString: "literal_string \"id+field already exists\""
  											}
  										],
  										id: 1358,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "9011:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1366,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9011:82:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1367,
  								nodeType: "ExpressionStatement",
  								src: "9011:82:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1368,
  										name: "increaseGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2153,
  										src: "9133:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1369,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9133:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1370,
  								nodeType: "ExpressionStatement",
  								src: "9133:20:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1374,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1330,
  											src: "9252:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1375,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1336,
  											src: "9262:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1371,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "9229:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1373,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "addValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6379,
  										src: "9229:22:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1376,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9229:36:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1377,
  								nodeType: "ExpressionStatement",
  								src: "9229:36:2"
  							},
  							{
  								condition: {
  									argumentTypes: null,
  									commonType: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									},
  									id: 1383,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftExpression: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												id: 1380,
  												name: "idTableKey",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1345,
  												src: "9412:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											],
  											expression: {
  												argumentTypes: null,
  												id: 1378,
  												name: "database",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 997,
  												src: "9391:8:2",
  												typeDescriptions: {
  													typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  													typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  												}
  											},
  											id: 1379,
  											isConstant: false,
  											isLValue: true,
  											isPure: false,
  											lValueRequested: false,
  											memberName: "containsKey",
  											nodeType: "MemberAccess",
  											referencedDeclaration: 7823,
  											src: "9391:20:2",
  											typeDescriptions: {
  												typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  												typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  											}
  										},
  										id: 1381,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "functionCall",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "9391:32:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bool",
  											typeString: "bool"
  										}
  									},
  									nodeType: "BinaryOperation",
  									operator: "==",
  									rightExpression: {
  										argumentTypes: null,
  										hexValue: "66616c7365",
  										id: 1382,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "bool",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "9427:5:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_bool",
  											typeString: "bool"
  										},
  										value: "false"
  									},
  									src: "9391:41:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: null,
  								id: 1391,
  								nodeType: "IfStatement",
  								src: "9387:109:2",
  								trueBody: {
  									id: 1390,
  									nodeType: "Block",
  									src: "9433:63:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1385,
  														name: "idTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1345,
  														src: "9460:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1386,
  														name: "id",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1336,
  														src: "9472:2:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1387,
  														name: "tableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1330,
  														src: "9476:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													id: 1384,
  													name: "_setRowOwner",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1490,
  													src: "9447:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
  														typeString: "function (bytes32,bytes32,bytes32)"
  													}
  												},
  												id: 1388,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "9447:38:2",
  												typeDescriptions: {
  													typeIdentifier: "t_tuple$__$",
  													typeString: "tuple()"
  												}
  											},
  											id: 1389,
  											nodeType: "ExpressionStatement",
  											src: "9447:38:2"
  										}
  									]
  								}
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1395,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1352,
  											src: "9562:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1396,
  											name: "val",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1338,
  											src: "9579:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1392,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "9538:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1394,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "setValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8628,
  										src: "9538:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes memory) returns (bool)"
  										}
  									},
  									id: 1397,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9538:45:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1398,
  								nodeType: "ExpressionStatement",
  								src: "9538:45:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1400,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": [
  								{
  									argumentTypes: null,
  									id: 1341,
  									name: "tableKey",
  									nodeType: "Identifier",
  									overloadedDeclarations: [
  									],
  									referencedDeclaration: 1330,
  									src: "8868:8:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								}
  							],
  							id: 1342,
  							modifierName: {
  								argumentTypes: null,
  								id: 1340,
  								name: "insertCheck",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 1233,
  								src: "8856:11:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$_t_bytes32_$",
  									typeString: "modifier (bytes32)"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "8856:21:2"
  						}
  					],
  					name: "insertValVar",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1339,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1330,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1400,
  								src: "8730:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1329,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "8730:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1332,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1400,
  								src: "8756:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1331,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "8756:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1334,
  								name: "fieldKey",
  								nodeType: "VariableDeclaration",
  								scope: 1400,
  								src: "8779:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1333,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "8779:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1336,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1400,
  								src: "8806:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1335,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "8806:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1338,
  								name: "val",
  								nodeType: "VariableDeclaration",
  								scope: 1400,
  								src: "8826:16:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_memory_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 1337,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "8826:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "8720:123:2"
  					},
  					returnParameters: {
  						id: 1343,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "8877:0:2"
  					},
  					scope: 2314,
  					src: "8699:891:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1489,
  						nodeType: "Block",
  						src: "9802:605:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1415,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1412,
  														name: "idTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1402,
  														src: "9842:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1410,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "9821:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1411,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 7823,
  													src: "9821:20:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  													}
  												},
  												id: 1413,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "9821:32:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "66616c7365",
  												id: 1414,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "9857:5:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "false"
  											},
  											src: "9821:41:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "726f7720616c726561647920686173206f776e6572",
  											id: 1416,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "9864:23:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_4f07436c5e922fe8ea527b1a1ba7481aa8d495ad72c7a326d88e3d9b4d6a1f59",
  												typeString: "literal_string \"row already has owner\""
  											},
  											value: "row already has owner"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_4f07436c5e922fe8ea527b1a1ba7481aa8d495ad72c7a326d88e3d9b4d6a1f59",
  												typeString: "literal_string \"row already has owner\""
  											}
  										],
  										id: 1409,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "9813:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1417,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9813:75:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1418,
  								nodeType: "ExpressionStatement",
  								src: "9813:75:2"
  							},
  							{
  								assignments: [
  									1420
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1420,
  										name: "rowMetadata",
  										nodeType: "VariableDeclaration",
  										scope: 1489,
  										src: "9899:19:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 1419,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "9899:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1421,
  								initialValue: null,
  								nodeType: "VariableDeclarationStatement",
  								src: "9899:19:2"
  							},
  							{
  								assignments: [
  									1423
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1423,
  										name: "year",
  										nodeType: "VariableDeclaration",
  										scope: 1489,
  										src: "9929:11:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint16",
  											typeString: "uint16"
  										},
  										typeName: {
  											id: 1422,
  											name: "uint16",
  											nodeType: "ElementaryTypeName",
  											src: "9929:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint16",
  												typeString: "uint16"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1428,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1426,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "9960:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1424,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "9943:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 1425,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getYear",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 941,
  										src: "9943:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint16_$",
  											typeString: "function (uint256) pure external returns (uint16)"
  										}
  									},
  									id: 1427,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9943:21:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint16",
  										typeString: "uint16"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "9929:35:2"
  							},
  							{
  								assignments: [
  									1430
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1430,
  										name: "month",
  										nodeType: "VariableDeclaration",
  										scope: 1489,
  										src: "9974:11:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint8",
  											typeString: "uint8"
  										},
  										typeName: {
  											id: 1429,
  											name: "uint8",
  											nodeType: "ElementaryTypeName",
  											src: "9974:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1435,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1433,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "10006:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1431,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "9988:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 1432,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getMonth",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 948,
  										src: "9988:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint8_$",
  											typeString: "function (uint256) pure external returns (uint8)"
  										}
  									},
  									id: 1434,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "9988:22:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "9974:36:2"
  							},
  							{
  								assignments: [
  									1437
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1437,
  										name: "day",
  										nodeType: "VariableDeclaration",
  										scope: 1489,
  										src: "10020:9:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint8",
  											typeString: "uint8"
  										},
  										typeName: {
  											id: 1436,
  											name: "uint8",
  											nodeType: "ElementaryTypeName",
  											src: "10020:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1442,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1440,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "10048:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1438,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "10032:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 1439,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getDay",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 955,
  										src: "10032:15:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint8_$",
  											typeString: "function (uint256) pure external returns (uint8)"
  										}
  									},
  									id: 1441,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "10032:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "10020:32:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1445,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1443,
  										name: "rowMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1420,
  										src: "10063:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										id: 1444,
  										name: "year",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1423,
  										src: "10078:4:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint16",
  											typeString: "uint16"
  										}
  									},
  									src: "10063:19:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 1446,
  								nodeType: "ExpressionStatement",
  								src: "10063:19:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1453,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1447,
  										name: "rowMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1420,
  										src: "10092:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 1452,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1449,
  													name: "month",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1430,
  													src: "10115:5:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												],
  												id: 1448,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "10107:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint256_$",
  													typeString: "type(uint256)"
  												},
  												typeName: "uint256"
  											},
  											id: 1450,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10107:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "3136",
  											id: 1451,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "10123:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_16_by_1",
  												typeString: "int_const 16"
  											},
  											value: "16"
  										},
  										src: "10107:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "10092:33:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 1454,
  								nodeType: "ExpressionStatement",
  								src: "10092:33:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1461,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1455,
  										name: "rowMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1420,
  										src: "10135:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 1460,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1457,
  													name: "day",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1437,
  													src: "10158:3:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												],
  												id: 1456,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "10150:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint256_$",
  													typeString: "type(uint256)"
  												},
  												typeName: "uint256"
  											},
  											id: 1458,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10150:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "3234",
  											id: 1459,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "10164:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_24_by_1",
  												typeString: "int_const 24"
  											},
  											value: "24"
  										},
  										src: "10150:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "10135:31:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 1462,
  								nodeType: "ExpressionStatement",
  								src: "10135:31:2"
  							},
  							{
  								assignments: [
  									1464
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1464,
  										name: "createdDate",
  										nodeType: "VariableDeclaration",
  										scope: 1489,
  										src: "10177:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes4",
  											typeString: "bytes4"
  										},
  										typeName: {
  											id: 1463,
  											name: "bytes4",
  											nodeType: "ElementaryTypeName",
  											src: "10177:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes4",
  												typeString: "bytes4"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1470,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1467,
  													name: "rowMetadata",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1420,
  													src: "10212:11:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												],
  												id: 1466,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "10205:6:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint32_$",
  													typeString: "type(uint32)"
  												},
  												typeName: "uint32"
  											},
  											id: 1468,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10205:19:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint32",
  												typeString: "uint32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint32",
  												typeString: "uint32"
  											}
  										],
  										id: 1465,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										lValueRequested: false,
  										nodeType: "ElementaryTypeNameExpression",
  										src: "10198:6:2",
  										typeDescriptions: {
  											typeIdentifier: "t_type$_t_bytes4_$",
  											typeString: "type(bytes4)"
  										},
  										typeName: "bytes4"
  									},
  									id: 1469,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "typeConversion",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "10198:27:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes4",
  										typeString: "bytes4"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "10177:48:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1478,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1471,
  										name: "rowMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1420,
  										src: "10236:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 1477,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1473,
  														name: "_msgSender",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  															3632
  														],
  														referencedDeclaration: 3632,
  														src: "10259:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  															typeString: "function () view returns (address)"
  														}
  													},
  													id: 1474,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "10259:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												],
  												id: 1472,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "10251:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint256_$",
  													typeString: "type(uint256)"
  												},
  												typeName: "uint256"
  											},
  											id: 1475,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10251:21:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "3332",
  											id: 1476,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "10274:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_32_by_1",
  												typeString: "int_const 32"
  											},
  											value: "32"
  										},
  										src: "10251:25:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "10236:40:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 1479,
  								nodeType: "ExpressionStatement",
  								src: "10236:40:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1483,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1402,
  											src: "10311:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1485,
  													name: "rowMetadata",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1420,
  													src: "10331:11:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												],
  												id: 1484,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "10323:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_bytes32_$",
  													typeString: "type(bytes32)"
  												},
  												typeName: "bytes32"
  											},
  											id: 1486,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10323:20:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1480,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "10287:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1482,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "setValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8481,
  										src: "10287:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1487,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "10287:57:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1488,
  								nodeType: "ExpressionStatement",
  								src: "10287:57:2"
  							}
  						]
  					},
  					documentation: "@dev we are essentially claiming this [id].[table] for the msg.sender, and setting the id createdDate",
  					id: 1490,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "_setRowOwner",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1407,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1402,
  								name: "idTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1490,
  								src: "9743:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1401,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "9743:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1404,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1490,
  								src: "9763:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1403,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "9763:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1406,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1490,
  								src: "9775:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1405,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "9775:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "9742:50:2"
  					},
  					returnParameters: {
  						id: 1408,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "9802:0:2"
  					},
  					scope: 2314,
  					src: "9721:686:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 1524,
  						nodeType: "Block",
  						src: "10733:184:2",
  						statements: [
  							{
  								assignments: [
  									1500
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1500,
  										name: "rowMetadata",
  										nodeType: "VariableDeclaration",
  										scope: 1524,
  										src: "10744:19:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 1499,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "10744:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1507,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1504,
  													name: "idTableKey",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1492,
  													src: "10800:10:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												],
  												expression: {
  													argumentTypes: null,
  													id: 1502,
  													name: "database",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 997,
  													src: "10774:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  														typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  													}
  												},
  												id: 1503,
  												isConstant: false,
  												isLValue: true,
  												isPure: false,
  												lValueRequested: false,
  												memberName: "getBytes32ForKey",
  												nodeType: "MemberAccess",
  												referencedDeclaration: 7996,
  												src: "10774:25:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  													typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes32)"
  												}
  											},
  											id: 1505,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "10774:37:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1501,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										lValueRequested: false,
  										nodeType: "ElementaryTypeNameExpression",
  										src: "10766:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_type$_t_uint256_$",
  											typeString: "type(uint256)"
  										},
  										typeName: "uint256"
  									},
  									id: 1506,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "typeConversion",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "10766:46:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "10744:68:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1514,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1508,
  										name: "createdDate",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1497,
  										src: "10823:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes4",
  											typeString: "bytes4"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1511,
  														name: "rowMetadata",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1500,
  														src: "10851:11:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													],
  													id: 1510,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													nodeType: "ElementaryTypeNameExpression",
  													src: "10844:6:2",
  													typeDescriptions: {
  														typeIdentifier: "t_type$_t_uint32_$",
  														typeString: "type(uint32)"
  													},
  													typeName: "uint32"
  												},
  												id: 1512,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "typeConversion",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "10844:19:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint32",
  													typeString: "uint32"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint32",
  													typeString: "uint32"
  												}
  											],
  											id: 1509,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "10837:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_bytes4_$",
  												typeString: "type(bytes4)"
  											},
  											typeName: "bytes4"
  										},
  										id: 1513,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "10837:27:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes4",
  											typeString: "bytes4"
  										}
  									},
  									src: "10823:41:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes4",
  										typeString: "bytes4"
  									}
  								},
  								id: 1515,
  								nodeType: "ExpressionStatement",
  								src: "10823:41:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1522,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 1516,
  										name: "rowOwner",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1495,
  										src: "10874:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												},
  												id: 1520,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 1518,
  													name: "rowMetadata",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1500,
  													src: "10893:11:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: ">>",
  												rightExpression: {
  													argumentTypes: null,
  													hexValue: "3332",
  													id: 1519,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													kind: "number",
  													lValueRequested: false,
  													nodeType: "Literal",
  													src: "10906:2:2",
  													subdenomination: null,
  													typeDescriptions: {
  														typeIdentifier: "t_rational_32_by_1",
  														typeString: "int_const 32"
  													},
  													value: "32"
  												},
  												src: "10893:15:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											],
  											id: 1517,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "10885:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_address_$",
  												typeString: "type(address)"
  											},
  											typeName: "address"
  										},
  										id: 1521,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "10885:24:2",
  										typeDescriptions: {
  											typeIdentifier: "t_address_payable",
  											typeString: "address payable"
  										}
  									},
  									src: "10874:35:2",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								id: 1523,
  								nodeType: "ExpressionStatement",
  								src: "10874:35:2"
  							}
  						]
  					},
  					documentation: "Primarily to assist querying all ids belonging to an owner",
  					id: 1525,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getRowOwner",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1493,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1492,
  								name: "idTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1525,
  								src: "10658:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1491,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "10658:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "10657:20:2"
  					},
  					returnParameters: {
  						id: 1498,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1495,
  								name: "rowOwner",
  								nodeType: "VariableDeclaration",
  								scope: 1525,
  								src: "10696:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 1494,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "10696:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1497,
  								name: "createdDate",
  								nodeType: "VariableDeclaration",
  								scope: 1525,
  								src: "10714:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes4",
  									typeString: "bytes4"
  								},
  								typeName: {
  									id: 1496,
  									name: "bytes4",
  									nodeType: "ElementaryTypeName",
  									src: "10714:6:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes4",
  										typeString: "bytes4"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "10695:38:2"
  					},
  					scope: 2314,
  					src: "10637:280:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1621,
  						nodeType: "Block",
  						src: "11018:1232:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1543,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1539,
  														name: "tableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1527,
  														src: "11065:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1540,
  														name: "id",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1533,
  														src: "11075:2:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1537,
  														name: "tableId",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 986,
  														src: "11037:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  															typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  														}
  													},
  													id: 1538,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsValueForKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 6462,
  													src: "11037:27:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  														typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) view returns (bool)"
  													}
  												},
  												id: 1541,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "11037:41:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "74727565",
  												id: 1542,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "11082:4:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "true"
  											},
  											src: "11037:49:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "696420646f65736e27742065786973742c2075736520494e53455254",
  											id: 1544,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "11088:30:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_e062c631cebfcba05fea250b6c3bf895a8069dc2ee280d9759ffc17ff124edf6",
  												typeString: "literal_string \"id doesn't exist, use INSERT\""
  											},
  											value: "id doesn't exist, use INSERT"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_e062c631cebfcba05fea250b6c3bf895a8069dc2ee280d9759ffc17ff124edf6",
  												typeString: "literal_string \"id doesn't exist, use INSERT\""
  											}
  										],
  										id: 1536,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "11029:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1545,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "11029:90:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1546,
  								nodeType: "ExpressionStatement",
  								src: "11029:90:2"
  							},
  							{
  								assignments: [
  									1548,
  									1550
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1548,
  										name: "permission",
  										nodeType: "VariableDeclaration",
  										scope: 1621,
  										src: "11131:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 1547,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "11131:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									},
  									{
  										constant: false,
  										id: 1550,
  										name: "delegate",
  										nodeType: "VariableDeclaration",
  										scope: 1621,
  										src: "11151:16:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										},
  										typeName: {
  											id: 1549,
  											name: "address",
  											nodeType: "ElementaryTypeName",
  											src: "11151:7:2",
  											stateMutability: "nonpayable",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1554,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1552,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1527,
  											src: "11188:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1551,
  										name: "getTableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2028,
  										src: "11171:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_bytes32_$returns$_t_uint256_$_t_address_$",
  											typeString: "function (bytes32) view returns (uint256,address)"
  										}
  									},
  									id: 1553,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "11171:26:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$_t_uint256_$_t_address_$",
  										typeString: "tuple(uint256,address)"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "11130:67:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											},
  											id: 1558,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												id: 1556,
  												name: "permission",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1548,
  												src: "11280:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: ">",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "30",
  												id: 1557,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "number",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "11293:1:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_rational_0_by_1",
  													typeString: "int_const 0"
  												},
  												value: "0"
  											},
  											src: "11280:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "43616e6e6f74205550444154452073797374656d207461626c65",
  											id: 1559,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "11296:28:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_1fb6cfc287a881526d28c733853bf507a7d955871af98ab667d0dc8dcd08d8eb",
  												typeString: "literal_string \"Cannot UPDATE system table\""
  											},
  											value: "Cannot UPDATE system table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_1fb6cfc287a881526d28c733853bf507a7d955871af98ab667d0dc8dcd08d8eb",
  												typeString: "literal_string \"Cannot UPDATE system table\""
  											}
  										],
  										id: 1555,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "11272:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1560,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "11272:53:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1561,
  								nodeType: "ExpressionStatement",
  								src: "11272:53:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1575,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												id: 1570,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													},
  													id: 1565,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														id: 1563,
  														name: "permission",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1548,
  														src: "11404:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: ">",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "31",
  														id: 1564,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "11417:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_1_by_1",
  															typeString: "int_const 1"
  														},
  														value: "1"
  													},
  													src: "11404:14:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "||",
  												rightExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													},
  													id: 1569,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														"arguments": [
  														],
  														expression: {
  															argumentTypes: [
  															],
  															id: 1566,
  															name: "isOwner",
  															nodeType: "Identifier",
  															overloadedDeclarations: [
  															],
  															referencedDeclaration: 5041,
  															src: "11422:7:2",
  															typeDescriptions: {
  																typeIdentifier: "t_function_internal_view$__$returns$_t_bool_$",
  																typeString: "function () view returns (bool)"
  															}
  														},
  														id: 1567,
  														isConstant: false,
  														isLValue: false,
  														isPure: false,
  														kind: "functionCall",
  														lValueRequested: false,
  														names: [
  														],
  														nodeType: "FunctionCall",
  														src: "11422:9:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: "==",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "74727565",
  														id: 1568,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "bool",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "11435:4:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														},
  														value: "true"
  													},
  													src: "11422:17:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												src: "11404:35:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "||",
  											rightExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_address",
  													typeString: "address"
  												},
  												id: 1574,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 1571,
  													name: "delegate",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1550,
  													src: "11443:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "==",
  												rightExpression: {
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1572,
  														name: "_msgSender",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  															3632
  														],
  														referencedDeclaration: 3632,
  														src: "11455:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  															typeString: "function () view returns (address)"
  														}
  													},
  													id: 1573,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "11455:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												src: "11443:24:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											src: "11404:63:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "4f6e6c79206f776e65722f64656c65676174652063616e2055504441544520696e746f2074686973207461626c65",
  											id: 1576,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "11469:48:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_41d537d2cf51ebb4c64ddf99f5e6ba67c43bcb89a0eb79039efa385d59e725e8",
  												typeString: "literal_string \"Only owner/delegate can UPDATE into this table\""
  											},
  											value: "Only owner/delegate can UPDATE into this table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_41d537d2cf51ebb4c64ddf99f5e6ba67c43bcb89a0eb79039efa385d59e725e8",
  												typeString: "literal_string \"Only owner/delegate can UPDATE into this table\""
  											}
  										],
  										id: 1562,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "11396:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1577,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "11396:122:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1578,
  								nodeType: "ExpressionStatement",
  								src: "11396:122:2"
  							},
  							{
  								condition: {
  									argumentTypes: null,
  									commonType: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									},
  									id: 1581,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftExpression: {
  										argumentTypes: null,
  										id: 1579,
  										name: "permission",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1548,
  										src: "11692:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "BinaryOperation",
  									operator: ">=",
  									rightExpression: {
  										argumentTypes: null,
  										hexValue: "32",
  										id: 1580,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "number",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "11706:1:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_rational_2_by_1",
  											typeString: "int_const 2"
  										},
  										value: "2"
  									},
  									src: "11692:15:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: null,
  								id: 1620,
  								nodeType: "IfStatement",
  								src: "11688:556:2",
  								trueBody: {
  									id: 1619,
  									nodeType: "Block",
  									src: "11709:535:2",
  									statements: [
  										{
  											assignments: [
  												1583
  											],
  											declarations: [
  												{
  													constant: false,
  													id: 1583,
  													name: "rowMetaData",
  													nodeType: "VariableDeclaration",
  													scope: 1619,
  													src: "11805:19:2",
  													stateVariable: false,
  													storageLocation: "default",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													},
  													typeName: {
  														id: 1582,
  														name: "bytes32",
  														nodeType: "ElementaryTypeName",
  														src: "11805:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													value: null,
  													visibility: "internal"
  												}
  											],
  											id: 1588,
  											initialValue: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1586,
  														name: "idTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1531,
  														src: "11853:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1584,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "11827:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1585,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "getBytes32ForKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 7996,
  													src: "11827:25:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes32)"
  													}
  												},
  												id: 1587,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "11827:37:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											nodeType: "VariableDeclarationStatement",
  											src: "11805:59:2"
  										},
  										{
  											assignments: [
  												1590
  											],
  											declarations: [
  												{
  													constant: false,
  													id: 1590,
  													name: "rowOwner",
  													nodeType: "VariableDeclaration",
  													scope: 1619,
  													src: "11878:16:2",
  													stateVariable: false,
  													storageLocation: "default",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													},
  													typeName: {
  														id: 1589,
  														name: "address",
  														nodeType: "ElementaryTypeName",
  														src: "11878:7:2",
  														stateMutability: "nonpayable",
  														typeDescriptions: {
  															typeIdentifier: "t_address",
  															typeString: "address"
  														}
  													},
  													value: null,
  													visibility: "internal"
  												}
  											],
  											id: 1598,
  											initialValue: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														commonType: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														},
  														id: 1596,
  														isConstant: false,
  														isLValue: false,
  														isPure: false,
  														lValueRequested: false,
  														leftExpression: {
  															argumentTypes: null,
  															"arguments": [
  																{
  																	argumentTypes: null,
  																	id: 1593,
  																	name: "rowMetaData",
  																	nodeType: "Identifier",
  																	overloadedDeclarations: [
  																	],
  																	referencedDeclaration: 1583,
  																	src: "11913:11:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_bytes32",
  																		typeString: "bytes32"
  																	}
  																}
  															],
  															expression: {
  																argumentTypes: [
  																	{
  																		typeIdentifier: "t_bytes32",
  																		typeString: "bytes32"
  																	}
  																],
  																id: 1592,
  																isConstant: false,
  																isLValue: false,
  																isPure: true,
  																lValueRequested: false,
  																nodeType: "ElementaryTypeNameExpression",
  																src: "11905:7:2",
  																typeDescriptions: {
  																	typeIdentifier: "t_type$_t_uint256_$",
  																	typeString: "type(uint256)"
  																},
  																typeName: "uint256"
  															},
  															id: 1594,
  															isConstant: false,
  															isLValue: false,
  															isPure: false,
  															kind: "typeConversion",
  															lValueRequested: false,
  															names: [
  															],
  															nodeType: "FunctionCall",
  															src: "11905:20:2",
  															typeDescriptions: {
  																typeIdentifier: "t_uint256",
  																typeString: "uint256"
  															}
  														},
  														nodeType: "BinaryOperation",
  														operator: ">>",
  														rightExpression: {
  															argumentTypes: null,
  															hexValue: "3332",
  															id: 1595,
  															isConstant: false,
  															isLValue: false,
  															isPure: true,
  															kind: "number",
  															lValueRequested: false,
  															nodeType: "Literal",
  															src: "11927:2:2",
  															subdenomination: null,
  															typeDescriptions: {
  																typeIdentifier: "t_rational_32_by_1",
  																typeString: "int_const 32"
  															},
  															value: "32"
  														},
  														src: "11905:24:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													],
  													id: 1591,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													nodeType: "ElementaryTypeNameExpression",
  													src: "11897:7:2",
  													typeDescriptions: {
  														typeIdentifier: "t_type$_t_address_$",
  														typeString: "type(address)"
  													},
  													typeName: "address"
  												},
  												id: 1597,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "typeConversion",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "11897:33:2",
  												typeDescriptions: {
  													typeIdentifier: "t_address_payable",
  													typeString: "address payable"
  												}
  											},
  											nodeType: "VariableDeclarationStatement",
  											src: "11878:52:2"
  										},
  										{
  											condition: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_address",
  													typeString: "address"
  												},
  												id: 1602,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 1599,
  													name: "rowOwner",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1590,
  													src: "12016:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "==",
  												rightExpression: {
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1600,
  														name: "_msgSender",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  															3632
  														],
  														referencedDeclaration: 3632,
  														src: "12028:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  															typeString: "function () view returns (address)"
  														}
  													},
  													id: 1601,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "12028:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												src: "12016:24:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											falseBody: {
  												id: 1617,
  												nodeType: "Block",
  												src: "12086:148:2",
  												statements: [
  													{
  														expression: {
  															argumentTypes: null,
  															"arguments": [
  																{
  																	argumentTypes: null,
  																	commonType: {
  																		typeIdentifier: "t_bool",
  																		typeString: "bool"
  																	},
  																	id: 1613,
  																	isConstant: false,
  																	isLValue: false,
  																	isPure: false,
  																	lValueRequested: false,
  																	leftExpression: {
  																		argumentTypes: null,
  																		commonType: {
  																			typeIdentifier: "t_bool",
  																			typeString: "bool"
  																		},
  																		id: 1608,
  																		isConstant: false,
  																		isLValue: false,
  																		isPure: false,
  																		lValueRequested: false,
  																		leftExpression: {
  																			argumentTypes: null,
  																			"arguments": [
  																			],
  																			expression: {
  																				argumentTypes: [
  																				],
  																				id: 1605,
  																				name: "isOwner",
  																				nodeType: "Identifier",
  																				overloadedDeclarations: [
  																				],
  																				referencedDeclaration: 5041,
  																				src: "12112:7:2",
  																				typeDescriptions: {
  																					typeIdentifier: "t_function_internal_view$__$returns$_t_bool_$",
  																					typeString: "function () view returns (bool)"
  																				}
  																			},
  																			id: 1606,
  																			isConstant: false,
  																			isLValue: false,
  																			isPure: false,
  																			kind: "functionCall",
  																			lValueRequested: false,
  																			names: [
  																			],
  																			nodeType: "FunctionCall",
  																			src: "12112:9:2",
  																			typeDescriptions: {
  																				typeIdentifier: "t_bool",
  																				typeString: "bool"
  																			}
  																		},
  																		nodeType: "BinaryOperation",
  																		operator: "==",
  																		rightExpression: {
  																			argumentTypes: null,
  																			hexValue: "74727565",
  																			id: 1607,
  																			isConstant: false,
  																			isLValue: false,
  																			isPure: true,
  																			kind: "bool",
  																			lValueRequested: false,
  																			nodeType: "Literal",
  																			src: "12125:4:2",
  																			subdenomination: null,
  																			typeDescriptions: {
  																				typeIdentifier: "t_bool",
  																				typeString: "bool"
  																			},
  																			value: "true"
  																		},
  																		src: "12112:17:2",
  																		typeDescriptions: {
  																			typeIdentifier: "t_bool",
  																			typeString: "bool"
  																		}
  																	},
  																	nodeType: "BinaryOperation",
  																	operator: "||",
  																	rightExpression: {
  																		argumentTypes: null,
  																		commonType: {
  																			typeIdentifier: "t_address",
  																			typeString: "address"
  																		},
  																		id: 1612,
  																		isConstant: false,
  																		isLValue: false,
  																		isPure: false,
  																		lValueRequested: false,
  																		leftExpression: {
  																			argumentTypes: null,
  																			id: 1609,
  																			name: "delegate",
  																			nodeType: "Identifier",
  																			overloadedDeclarations: [
  																			],
  																			referencedDeclaration: 1550,
  																			src: "12133:8:2",
  																			typeDescriptions: {
  																				typeIdentifier: "t_address",
  																				typeString: "address"
  																			}
  																		},
  																		nodeType: "BinaryOperation",
  																		operator: "==",
  																		rightExpression: {
  																			argumentTypes: null,
  																			"arguments": [
  																			],
  																			expression: {
  																				argumentTypes: [
  																				],
  																				id: 1610,
  																				name: "_msgSender",
  																				nodeType: "Identifier",
  																				overloadedDeclarations: [
  																					3632
  																				],
  																				referencedDeclaration: 3632,
  																				src: "12145:10:2",
  																				typeDescriptions: {
  																					typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  																					typeString: "function () view returns (address)"
  																				}
  																			},
  																			id: 1611,
  																			isConstant: false,
  																			isLValue: false,
  																			isPure: false,
  																			kind: "functionCall",
  																			lValueRequested: false,
  																			names: [
  																			],
  																			nodeType: "FunctionCall",
  																			src: "12145:12:2",
  																			typeDescriptions: {
  																				typeIdentifier: "t_address",
  																				typeString: "address"
  																			}
  																		},
  																		src: "12133:24:2",
  																		typeDescriptions: {
  																			typeIdentifier: "t_bool",
  																			typeString: "bool"
  																		}
  																	},
  																	src: "12112:45:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_bool",
  																		typeString: "bool"
  																	}
  																},
  																{
  																	argumentTypes: null,
  																	hexValue: "4e6f7420726f774f776e6572206f72206f776e65722f64656c656761746520666f722055504441544520696e746f2074686973207461626c65",
  																	id: 1614,
  																	isConstant: false,
  																	isLValue: false,
  																	isPure: true,
  																	kind: "string",
  																	lValueRequested: false,
  																	nodeType: "Literal",
  																	src: "12159:59:2",
  																	subdenomination: null,
  																	typeDescriptions: {
  																		typeIdentifier: "t_stringliteral_627ce0c74b5075c1ccd59f2bdb6411a148fdf65d04b3c288101b934a5fb8eae0",
  																		typeString: "literal_string \"Not rowOwner or owner/delegate for UPDATE into this table\""
  																	},
  																	value: "Not rowOwner or owner/delegate for UPDATE into this table"
  																}
  															],
  															expression: {
  																argumentTypes: [
  																	{
  																		typeIdentifier: "t_bool",
  																		typeString: "bool"
  																	},
  																	{
  																		typeIdentifier: "t_stringliteral_627ce0c74b5075c1ccd59f2bdb6411a148fdf65d04b3c288101b934a5fb8eae0",
  																		typeString: "literal_string \"Not rowOwner or owner/delegate for UPDATE into this table\""
  																	}
  																],
  																id: 1604,
  																name: "require",
  																nodeType: "Identifier",
  																overloadedDeclarations: [
  																	11036,
  																	11037
  																],
  																referencedDeclaration: 11037,
  																src: "12104:7:2",
  																typeDescriptions: {
  																	typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  																	typeString: "function (bool,string memory) pure"
  																}
  															},
  															id: 1615,
  															isConstant: false,
  															isLValue: false,
  															isPure: false,
  															kind: "functionCall",
  															lValueRequested: false,
  															names: [
  															],
  															nodeType: "FunctionCall",
  															src: "12104:115:2",
  															typeDescriptions: {
  																typeIdentifier: "t_tuple$__$",
  																typeString: "tuple()"
  															}
  														},
  														id: 1616,
  														nodeType: "ExpressionStatement",
  														src: "12104:115:2"
  													}
  												]
  											},
  											id: 1618,
  											nodeType: "IfStatement",
  											src: "12012:222:2",
  											trueBody: {
  												id: 1603,
  												nodeType: "Block",
  												src: "12041:39:2",
  												statements: [
  												]
  											}
  										}
  									]
  								}
  							}
  						]
  					},
  					documentation: null,
  					id: 1622,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "updateCheck",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1534,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1527,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1622,
  								src: "10944:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1526,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "10944:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1529,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1622,
  								src: "10962:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1528,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "10962:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1531,
  								name: "idTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1622,
  								src: "10977:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1530,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "10977:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1533,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1622,
  								src: "10997:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1532,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "10997:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "10943:65:2"
  					},
  					returnParameters: {
  						id: 1535,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "11018:0:2"
  					},
  					scope: 2314,
  					src: "10923:1327:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 1677,
  						nodeType: "Block",
  						src: "12406:456:2",
  						statements: [
  							{
  								assignments: [
  									1636
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1636,
  										name: "idTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1677,
  										src: "12417:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1635,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "12417:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1641,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1638,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1626,
  											src: "12447:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1639,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1624,
  											src: "12454:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1637,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "12438:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1640,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12438:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "12417:46:2"
  							},
  							{
  								assignments: [
  									1643
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1643,
  										name: "fieldIdTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1677,
  										src: "12473:23:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1642,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "12473:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1648,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1645,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1628,
  											src: "12508:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1646,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1636,
  											src: "12518:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1644,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "12499:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1647,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12499:30:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "12473:56:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1650,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1624,
  											src: "12552:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1651,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1626,
  											src: "12562:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1652,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1636,
  											src: "12569:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1653,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1630,
  											src: "12581:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1649,
  										name: "updateCheck",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1622,
  										src: "12540:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
  											typeString: "function (bytes32,bytes32,bytes32,bytes32)"
  										}
  									},
  									id: 1654,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12540:44:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1655,
  								nodeType: "ExpressionStatement",
  								src: "12540:44:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1656,
  										name: "increaseGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2153,
  										src: "12624:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1657,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12624:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1658,
  								nodeType: "ExpressionStatement",
  								src: "12624:20:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1662,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1643,
  											src: "12711:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 1664,
  													name: "val",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1632,
  													src: "12736:3:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												],
  												id: 1663,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "12728:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_bytes32_$",
  													typeString: "type(bytes32)"
  												},
  												typeName: "bytes32"
  											},
  											id: 1665,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "12728:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1659,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "12687:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1661,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "setValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8481,
  										src: "12687:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1666,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12687:54:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1667,
  								nodeType: "ExpressionStatement",
  								src: "12687:54:2"
  							},
  							{
  								eventCall: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1669,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1624,
  											src: "12813:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1670,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1628,
  											src: "12823:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1671,
  											name: "val",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1632,
  											src: "12833:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1672,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1630,
  											src: "12838:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											"arguments": [
  											],
  											expression: {
  												argumentTypes: [
  												],
  												id: 1673,
  												name: "_msgSender",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  													3632
  												],
  												referencedDeclaration: 3632,
  												src: "12842:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  													typeString: "function () view returns (address)"
  												}
  											},
  											id: 1674,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "12842:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										],
  										id: 1668,
  										name: "InsertVal",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1245,
  										src: "12803:9:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$returns$__$",
  											typeString: "function (bytes32,bytes32,bytes32,bytes32,address)"
  										}
  									},
  									id: 1675,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12803:52:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1676,
  								nodeType: "EmitStatement",
  								src: "12798:57:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1678,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "updateVal",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1633,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1624,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1678,
  								src: "12285:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1623,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12285:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1626,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1678,
  								src: "12311:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1625,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12311:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1628,
  								name: "fieldKey",
  								nodeType: "VariableDeclaration",
  								scope: 1678,
  								src: "12334:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1627,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12334:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1630,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1678,
  								src: "12361:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1629,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12361:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1632,
  								name: "val",
  								nodeType: "VariableDeclaration",
  								scope: 1678,
  								src: "12381:11:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1631,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12381:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "12274:119:2"
  					},
  					returnParameters: {
  						id: 1634,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "12406:0:2"
  					},
  					scope: 2314,
  					src: "12256:606:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1772,
  						nodeType: "Block",
  						src: "12963:1126:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1696,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1692,
  														name: "tableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1680,
  														src: "13010:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													},
  													{
  														argumentTypes: null,
  														id: 1693,
  														name: "id",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1686,
  														src: "13020:2:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														},
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1690,
  														name: "tableId",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 986,
  														src: "12982:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  															typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  														}
  													},
  													id: 1691,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsValueForKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 6462,
  													src: "12982:27:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  														typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) view returns (bool)"
  													}
  												},
  												id: 1694,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "12982:41:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "74727565",
  												id: 1695,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "13027:4:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "true"
  											},
  											src: "12982:49:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "696420646f65736e2774206578697374",
  											id: 1697,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "13033:18:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_db03d7ca062012de69c7826250fe821647bd15958d13d3f34e50a74943c7e2a1",
  												typeString: "literal_string \"id doesn't exist\""
  											},
  											value: "id doesn't exist"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_db03d7ca062012de69c7826250fe821647bd15958d13d3f34e50a74943c7e2a1",
  												typeString: "literal_string \"id doesn't exist\""
  											}
  										],
  										id: 1689,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "12974:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1698,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "12974:78:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1699,
  								nodeType: "ExpressionStatement",
  								src: "12974:78:2"
  							},
  							{
  								assignments: [
  									1701,
  									1703
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1701,
  										name: "permission",
  										nodeType: "VariableDeclaration",
  										scope: 1772,
  										src: "13064:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 1700,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "13064:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									},
  									{
  										constant: false,
  										id: 1703,
  										name: "delegate",
  										nodeType: "VariableDeclaration",
  										scope: 1772,
  										src: "13084:16:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										},
  										typeName: {
  											id: 1702,
  											name: "address",
  											nodeType: "ElementaryTypeName",
  											src: "13084:7:2",
  											stateMutability: "nonpayable",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1707,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1705,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1680,
  											src: "13121:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1704,
  										name: "getTableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2028,
  										src: "13104:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_bytes32_$returns$_t_uint256_$_t_address_$",
  											typeString: "function (bytes32) view returns (uint256,address)"
  										}
  									},
  									id: 1706,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "13104:26:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$_t_uint256_$_t_address_$",
  										typeString: "tuple(uint256,address)"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "13063:67:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											},
  											id: 1711,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												id: 1709,
  												name: "permission",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1701,
  												src: "13213:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: ">",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "30",
  												id: 1710,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "number",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "13226:1:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_rational_0_by_1",
  													typeString: "int_const 0"
  												},
  												value: "0"
  											},
  											src: "13213:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "43616e6e6f742044454c4554452066726f6d2073797374656d207461626c65",
  											id: 1712,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "13229:33:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_132c13b1ffd52b2761f3e4441db33850ce1f140ca1599ac0789f819d4b4791cd",
  												typeString: "literal_string \"Cannot DELETE from system table\""
  											},
  											value: "Cannot DELETE from system table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_132c13b1ffd52b2761f3e4441db33850ce1f140ca1599ac0789f819d4b4791cd",
  												typeString: "literal_string \"Cannot DELETE from system table\""
  											}
  										],
  										id: 1708,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "13205:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1713,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "13205:58:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1714,
  								nodeType: "ExpressionStatement",
  								src: "13205:58:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1728,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												id: 1723,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													},
  													id: 1718,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														id: 1716,
  														name: "permission",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1701,
  														src: "13342:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: ">",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "31",
  														id: 1717,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "13355:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_1_by_1",
  															typeString: "int_const 1"
  														},
  														value: "1"
  													},
  													src: "13342:14:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "||",
  												rightExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													},
  													id: 1722,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														"arguments": [
  														],
  														expression: {
  															argumentTypes: [
  															],
  															id: 1719,
  															name: "isOwner",
  															nodeType: "Identifier",
  															overloadedDeclarations: [
  															],
  															referencedDeclaration: 5041,
  															src: "13360:7:2",
  															typeDescriptions: {
  																typeIdentifier: "t_function_internal_view$__$returns$_t_bool_$",
  																typeString: "function () view returns (bool)"
  															}
  														},
  														id: 1720,
  														isConstant: false,
  														isLValue: false,
  														isPure: false,
  														kind: "functionCall",
  														lValueRequested: false,
  														names: [
  														],
  														nodeType: "FunctionCall",
  														src: "13360:9:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: "==",
  													rightExpression: {
  														argumentTypes: null,
  														hexValue: "74727565",
  														id: 1721,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "bool",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "13373:4:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_bool",
  															typeString: "bool"
  														},
  														value: "true"
  													},
  													src: "13360:17:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												src: "13342:35:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "||",
  											rightExpression: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_address",
  													typeString: "address"
  												},
  												id: 1727,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 1724,
  													name: "delegate",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1703,
  													src: "13381:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "==",
  												rightExpression: {
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1725,
  														name: "_msgSender",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  															3632
  														],
  														referencedDeclaration: 3632,
  														src: "13393:10:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  															typeString: "function () view returns (address)"
  														}
  													},
  													id: 1726,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "13393:12:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												},
  												src: "13381:24:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											src: "13342:63:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "4f6e6c79206f776e65722f64656c65676174652063616e2044454c4554452066726f6d2074686973207461626c65",
  											id: 1729,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "13407:48:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_c33372ce630f0cab4512ab6a1cf4a2edfc443bf5b1df150e7f701bd1549103a6",
  												typeString: "literal_string \"Only owner/delegate can DELETE from this table\""
  											},
  											value: "Only owner/delegate can DELETE from this table"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_c33372ce630f0cab4512ab6a1cf4a2edfc443bf5b1df150e7f701bd1549103a6",
  												typeString: "literal_string \"Only owner/delegate can DELETE from this table\""
  											}
  										],
  										id: 1715,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "13334:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1730,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "13334:122:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1731,
  								nodeType: "ExpressionStatement",
  								src: "13334:122:2"
  							},
  							{
  								condition: {
  									argumentTypes: null,
  									commonType: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									},
  									id: 1734,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftExpression: {
  										argumentTypes: null,
  										id: 1732,
  										name: "permission",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1701,
  										src: "13630:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "BinaryOperation",
  									operator: ">=",
  									rightExpression: {
  										argumentTypes: null,
  										hexValue: "32",
  										id: 1733,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										kind: "number",
  										lValueRequested: false,
  										nodeType: "Literal",
  										src: "13644:1:2",
  										subdenomination: null,
  										typeDescriptions: {
  											typeIdentifier: "t_rational_2_by_1",
  											typeString: "int_const 2"
  										},
  										value: "2"
  									},
  									src: "13630:15:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: null,
  								id: 1771,
  								nodeType: "IfStatement",
  								src: "13626:457:2",
  								trueBody: {
  									id: 1770,
  									nodeType: "Block",
  									src: "13647:436:2",
  									statements: [
  										{
  											condition: {
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												id: 1741,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													"arguments": [
  													],
  													expression: {
  														argumentTypes: [
  														],
  														id: 1735,
  														name: "isOwner",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 5041,
  														src: "13665:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_function_internal_view$__$returns$_t_bool_$",
  															typeString: "function () view returns (bool)"
  														}
  													},
  													id: 1736,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													kind: "functionCall",
  													lValueRequested: false,
  													names: [
  													],
  													nodeType: "FunctionCall",
  													src: "13665:9:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: "||",
  												rightExpression: {
  													argumentTypes: null,
  													commonType: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													},
  													id: 1740,
  													isConstant: false,
  													isLValue: false,
  													isPure: false,
  													lValueRequested: false,
  													leftExpression: {
  														argumentTypes: null,
  														id: 1737,
  														name: "delegate",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1703,
  														src: "13678:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_address",
  															typeString: "address"
  														}
  													},
  													nodeType: "BinaryOperation",
  													operator: "==",
  													rightExpression: {
  														argumentTypes: null,
  														"arguments": [
  														],
  														expression: {
  															argumentTypes: [
  															],
  															id: 1738,
  															name: "_msgSender",
  															nodeType: "Identifier",
  															overloadedDeclarations: [
  																3632
  															],
  															referencedDeclaration: 3632,
  															src: "13690:10:2",
  															typeDescriptions: {
  																typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  																typeString: "function () view returns (address)"
  															}
  														},
  														id: 1739,
  														isConstant: false,
  														isLValue: false,
  														isPure: false,
  														kind: "functionCall",
  														lValueRequested: false,
  														names: [
  														],
  														nodeType: "FunctionCall",
  														src: "13690:12:2",
  														typeDescriptions: {
  															typeIdentifier: "t_address",
  															typeString: "address"
  														}
  													},
  													src: "13678:24:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bool",
  														typeString: "bool"
  													}
  												},
  												src: "13665:37:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											falseBody: {
  												id: 1768,
  												nodeType: "Block",
  												src: "13748:325:2",
  												statements: [
  													{
  														assignments: [
  															1744
  														],
  														declarations: [
  															{
  																constant: false,
  																id: 1744,
  																name: "rowMetaData",
  																nodeType: "VariableDeclaration",
  																scope: 1768,
  																src: "13851:19:2",
  																stateVariable: false,
  																storageLocation: "default",
  																typeDescriptions: {
  																	typeIdentifier: "t_bytes32",
  																	typeString: "bytes32"
  																},
  																typeName: {
  																	id: 1743,
  																	name: "bytes32",
  																	nodeType: "ElementaryTypeName",
  																	src: "13851:7:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_bytes32",
  																		typeString: "bytes32"
  																	}
  																},
  																value: null,
  																visibility: "internal"
  															}
  														],
  														id: 1749,
  														initialValue: {
  															argumentTypes: null,
  															"arguments": [
  																{
  																	argumentTypes: null,
  																	id: 1747,
  																	name: "idTableKey",
  																	nodeType: "Identifier",
  																	overloadedDeclarations: [
  																	],
  																	referencedDeclaration: 1682,
  																	src: "13899:10:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_bytes32",
  																		typeString: "bytes32"
  																	}
  																}
  															],
  															expression: {
  																argumentTypes: [
  																	{
  																		typeIdentifier: "t_bytes32",
  																		typeString: "bytes32"
  																	}
  																],
  																expression: {
  																	argumentTypes: null,
  																	id: 1745,
  																	name: "database",
  																	nodeType: "Identifier",
  																	overloadedDeclarations: [
  																	],
  																	referencedDeclaration: 997,
  																	src: "13873:8:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  																		typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  																	}
  																},
  																id: 1746,
  																isConstant: false,
  																isLValue: true,
  																isPure: false,
  																lValueRequested: false,
  																memberName: "getBytes32ForKey",
  																nodeType: "MemberAccess",
  																referencedDeclaration: 7996,
  																src: "13873:25:2",
  																typeDescriptions: {
  																	typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  																	typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes32)"
  																}
  															},
  															id: 1748,
  															isConstant: false,
  															isLValue: false,
  															isPure: false,
  															kind: "functionCall",
  															lValueRequested: false,
  															names: [
  															],
  															nodeType: "FunctionCall",
  															src: "13873:37:2",
  															typeDescriptions: {
  																typeIdentifier: "t_bytes32",
  																typeString: "bytes32"
  															}
  														},
  														nodeType: "VariableDeclarationStatement",
  														src: "13851:59:2"
  													},
  													{
  														assignments: [
  															1751
  														],
  														declarations: [
  															{
  																constant: false,
  																id: 1751,
  																name: "rowOwner",
  																nodeType: "VariableDeclaration",
  																scope: 1768,
  																src: "13928:16:2",
  																stateVariable: false,
  																storageLocation: "default",
  																typeDescriptions: {
  																	typeIdentifier: "t_address",
  																	typeString: "address"
  																},
  																typeName: {
  																	id: 1750,
  																	name: "address",
  																	nodeType: "ElementaryTypeName",
  																	src: "13928:7:2",
  																	stateMutability: "nonpayable",
  																	typeDescriptions: {
  																		typeIdentifier: "t_address",
  																		typeString: "address"
  																	}
  																},
  																value: null,
  																visibility: "internal"
  															}
  														],
  														id: 1759,
  														initialValue: {
  															argumentTypes: null,
  															"arguments": [
  																{
  																	argumentTypes: null,
  																	commonType: {
  																		typeIdentifier: "t_uint256",
  																		typeString: "uint256"
  																	},
  																	id: 1757,
  																	isConstant: false,
  																	isLValue: false,
  																	isPure: false,
  																	lValueRequested: false,
  																	leftExpression: {
  																		argumentTypes: null,
  																		"arguments": [
  																			{
  																				argumentTypes: null,
  																				id: 1754,
  																				name: "rowMetaData",
  																				nodeType: "Identifier",
  																				overloadedDeclarations: [
  																				],
  																				referencedDeclaration: 1744,
  																				src: "13963:11:2",
  																				typeDescriptions: {
  																					typeIdentifier: "t_bytes32",
  																					typeString: "bytes32"
  																				}
  																			}
  																		],
  																		expression: {
  																			argumentTypes: [
  																				{
  																					typeIdentifier: "t_bytes32",
  																					typeString: "bytes32"
  																				}
  																			],
  																			id: 1753,
  																			isConstant: false,
  																			isLValue: false,
  																			isPure: true,
  																			lValueRequested: false,
  																			nodeType: "ElementaryTypeNameExpression",
  																			src: "13955:7:2",
  																			typeDescriptions: {
  																				typeIdentifier: "t_type$_t_uint256_$",
  																				typeString: "type(uint256)"
  																			},
  																			typeName: "uint256"
  																		},
  																		id: 1755,
  																		isConstant: false,
  																		isLValue: false,
  																		isPure: false,
  																		kind: "typeConversion",
  																		lValueRequested: false,
  																		names: [
  																		],
  																		nodeType: "FunctionCall",
  																		src: "13955:20:2",
  																		typeDescriptions: {
  																			typeIdentifier: "t_uint256",
  																			typeString: "uint256"
  																		}
  																	},
  																	nodeType: "BinaryOperation",
  																	operator: ">>",
  																	rightExpression: {
  																		argumentTypes: null,
  																		hexValue: "3332",
  																		id: 1756,
  																		isConstant: false,
  																		isLValue: false,
  																		isPure: true,
  																		kind: "number",
  																		lValueRequested: false,
  																		nodeType: "Literal",
  																		src: "13977:2:2",
  																		subdenomination: null,
  																		typeDescriptions: {
  																			typeIdentifier: "t_rational_32_by_1",
  																			typeString: "int_const 32"
  																		},
  																		value: "32"
  																	},
  																	src: "13955:24:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_uint256",
  																		typeString: "uint256"
  																	}
  																}
  															],
  															expression: {
  																argumentTypes: [
  																	{
  																		typeIdentifier: "t_uint256",
  																		typeString: "uint256"
  																	}
  																],
  																id: 1752,
  																isConstant: false,
  																isLValue: false,
  																isPure: true,
  																lValueRequested: false,
  																nodeType: "ElementaryTypeNameExpression",
  																src: "13947:7:2",
  																typeDescriptions: {
  																	typeIdentifier: "t_type$_t_address_$",
  																	typeString: "type(address)"
  																},
  																typeName: "address"
  															},
  															id: 1758,
  															isConstant: false,
  															isLValue: false,
  															isPure: false,
  															kind: "typeConversion",
  															lValueRequested: false,
  															names: [
  															],
  															nodeType: "FunctionCall",
  															src: "13947:33:2",
  															typeDescriptions: {
  																typeIdentifier: "t_address_payable",
  																typeString: "address payable"
  															}
  														},
  														nodeType: "VariableDeclarationStatement",
  														src: "13928:52:2"
  													},
  													{
  														expression: {
  															argumentTypes: null,
  															"arguments": [
  																{
  																	argumentTypes: null,
  																	commonType: {
  																		typeIdentifier: "t_address",
  																		typeString: "address"
  																	},
  																	id: 1764,
  																	isConstant: false,
  																	isLValue: false,
  																	isPure: false,
  																	lValueRequested: false,
  																	leftExpression: {
  																		argumentTypes: null,
  																		id: 1761,
  																		name: "rowOwner",
  																		nodeType: "Identifier",
  																		overloadedDeclarations: [
  																		],
  																		referencedDeclaration: 1751,
  																		src: "14006:8:2",
  																		typeDescriptions: {
  																			typeIdentifier: "t_address",
  																			typeString: "address"
  																		}
  																	},
  																	nodeType: "BinaryOperation",
  																	operator: "==",
  																	rightExpression: {
  																		argumentTypes: null,
  																		"arguments": [
  																		],
  																		expression: {
  																			argumentTypes: [
  																			],
  																			id: 1762,
  																			name: "_msgSender",
  																			nodeType: "Identifier",
  																			overloadedDeclarations: [
  																				3632
  																			],
  																			referencedDeclaration: 3632,
  																			src: "14018:10:2",
  																			typeDescriptions: {
  																				typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  																				typeString: "function () view returns (address)"
  																			}
  																		},
  																		id: 1763,
  																		isConstant: false,
  																		isLValue: false,
  																		isPure: false,
  																		kind: "functionCall",
  																		lValueRequested: false,
  																		names: [
  																		],
  																		nodeType: "FunctionCall",
  																		src: "14018:12:2",
  																		typeDescriptions: {
  																			typeIdentifier: "t_address",
  																			typeString: "address"
  																		}
  																	},
  																	src: "14006:24:2",
  																	typeDescriptions: {
  																		typeIdentifier: "t_bool",
  																		typeString: "bool"
  																	}
  																},
  																{
  																	argumentTypes: null,
  																	hexValue: "53656e646572206e6f74206f776e6572206f6620726f77",
  																	id: 1765,
  																	isConstant: false,
  																	isLValue: false,
  																	isPure: true,
  																	kind: "string",
  																	lValueRequested: false,
  																	nodeType: "Literal",
  																	src: "14032:25:2",
  																	subdenomination: null,
  																	typeDescriptions: {
  																		typeIdentifier: "t_stringliteral_fa8a74fd1acb40aac2f8444f4811d8b38e0f8d0e7daab82b9b6c362343d2fb4a",
  																		typeString: "literal_string \"Sender not owner of row\""
  																	},
  																	value: "Sender not owner of row"
  																}
  															],
  															expression: {
  																argumentTypes: [
  																	{
  																		typeIdentifier: "t_bool",
  																		typeString: "bool"
  																	},
  																	{
  																		typeIdentifier: "t_stringliteral_fa8a74fd1acb40aac2f8444f4811d8b38e0f8d0e7daab82b9b6c362343d2fb4a",
  																		typeString: "literal_string \"Sender not owner of row\""
  																	}
  																],
  																id: 1760,
  																name: "require",
  																nodeType: "Identifier",
  																overloadedDeclarations: [
  																	11036,
  																	11037
  																],
  																referencedDeclaration: 11037,
  																src: "13998:7:2",
  																typeDescriptions: {
  																	typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  																	typeString: "function (bool,string memory) pure"
  																}
  															},
  															id: 1766,
  															isConstant: false,
  															isLValue: false,
  															isPure: false,
  															kind: "functionCall",
  															lValueRequested: false,
  															names: [
  															],
  															nodeType: "FunctionCall",
  															src: "13998:60:2",
  															typeDescriptions: {
  																typeIdentifier: "t_tuple$__$",
  																typeString: "tuple()"
  															}
  														},
  														id: 1767,
  														nodeType: "ExpressionStatement",
  														src: "13998:60:2"
  													}
  												]
  											},
  											id: 1769,
  											nodeType: "IfStatement",
  											src: "13661:412:2",
  											trueBody: {
  												id: 1742,
  												nodeType: "Block",
  												src: "13703:39:2",
  												statements: [
  												]
  											}
  										}
  									]
  								}
  							}
  						]
  					},
  					documentation: null,
  					id: 1773,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "deleteCheck",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1687,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1680,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1773,
  								src: "12889:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1679,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12889:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1682,
  								name: "idTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1773,
  								src: "12907:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1681,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12907:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1684,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1773,
  								src: "12927:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1683,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12927:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1686,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1773,
  								src: "12942:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1685,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "12942:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "12888:65:2"
  					},
  					returnParameters: {
  						id: 1688,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "12963:0:2"
  					},
  					scope: 2314,
  					src: "12868:1221:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 1822,
  						nodeType: "Block",
  						src: "14388:1063:2",
  						statements: [
  							{
  								assignments: [
  									1785
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1785,
  										name: "idTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1822,
  										src: "14399:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1784,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "14399:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1790,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1787,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1777,
  											src: "14429:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1788,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1775,
  											src: "14436:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1786,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "14420:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1789,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14420:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "14399:46:2"
  							},
  							{
  								assignments: [
  									1792
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1792,
  										name: "fieldIdTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1822,
  										src: "14455:23:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1791,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "14455:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1797,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1794,
  											name: "fieldKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1779,
  											src: "14490:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1795,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1785,
  											src: "14500:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1793,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "14481:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1796,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14481:30:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "14455:56:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1799,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1775,
  											src: "14534:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1800,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1785,
  											src: "14544:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1801,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1777,
  											src: "14556:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1802,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1781,
  											src: "14563:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1798,
  										name: "deleteCheck",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1773,
  										src: "14522:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
  											typeString: "function (bytes32,bytes32,bytes32,bytes32)"
  										}
  									},
  									id: 1803,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14522:44:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1804,
  								nodeType: "ExpressionStatement",
  								src: "14522:44:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1805,
  										name: "increaseGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2153,
  										src: "14606:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1806,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14606:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1807,
  								nodeType: "ExpressionStatement",
  								src: "14606:20:2"
  							},
  							{
  								assignments: [
  									1809
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1809,
  										name: "removed",
  										nodeType: "VariableDeclaration",
  										scope: 1822,
  										src: "14663:12:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bool",
  											typeString: "bool"
  										},
  										typeName: {
  											id: 1808,
  											name: "bool",
  											nodeType: "ElementaryTypeName",
  											src: "14663:4:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1814,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1812,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1792,
  											src: "14697:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1810,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "14678:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1811,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "removeKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 8972,
  										src: "14678:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) returns (bool)"
  										}
  									},
  									id: 1813,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14678:35:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "14663:50:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1818,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												id: 1816,
  												name: "removed",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1809,
  												src: "14732:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "74727565",
  												id: 1817,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "14743:4:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "true"
  											},
  											src: "14732:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "6572726f722072656d6f76696e67206b6579",
  											id: 1819,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "14749:20:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_9802ffb053ccae9d16816deee5376dcb8b1c3e7f6a19281a861295bb0e1ac720",
  												typeString: "literal_string \"error removing key\""
  											},
  											value: "error removing key"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_9802ffb053ccae9d16816deee5376dcb8b1c3e7f6a19281a861295bb0e1ac720",
  												typeString: "literal_string \"error removing key\""
  											}
  										],
  										id: 1815,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "14724:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1820,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "14724:46:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1821,
  								nodeType: "ExpressionStatement",
  								src: "14724:46:2"
  							}
  						]
  					},
  					documentation: "@dev TODO: add modifier checks based on update\n     * TODO: this needs to properly remove the row when there are multiple ids\n     ",
  					id: 1823,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "deleteVal",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1782,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1775,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1823,
  								src: "14287:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1774,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "14287:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1777,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1823,
  								src: "14313:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1776,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "14313:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1779,
  								name: "fieldKey",
  								nodeType: "VariableDeclaration",
  								scope: 1823,
  								src: "14336:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1778,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "14336:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1781,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1823,
  								src: "14363:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1780,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "14363:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "14276:104:2"
  					},
  					returnParameters: {
  						id: 1783,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "14388:0:2"
  					},
  					scope: 2314,
  					src: "14258:1193:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1856,
  						nodeType: "Block",
  						src: "15833:254:2",
  						statements: [
  							{
  								assignments: [
  									1833
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1833,
  										name: "idTableKey",
  										nodeType: "VariableDeclaration",
  										scope: 1856,
  										src: "15844:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1832,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "15844:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1838,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1835,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1827,
  											src: "15874:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1836,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1825,
  											src: "15881:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1834,
  										name: "namehash",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1985,
  										src: "15865:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
  											typeString: "function (bytes32,bytes32) pure returns (bytes32)"
  										}
  									},
  									id: 1837,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "15865:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "15844:46:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1840,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1825,
  											src: "15913:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1841,
  											name: "idTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1833,
  											src: "15923:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1842,
  											name: "idKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1827,
  											src: "15935:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1843,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1829,
  											src: "15942:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 1839,
  										name: "deleteCheck",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1773,
  										src: "15901:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
  											typeString: "function (bytes32,bytes32,bytes32,bytes32)"
  										}
  									},
  									id: 1844,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "15901:44:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1845,
  								nodeType: "ExpressionStatement",
  								src: "15901:44:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 1846,
  										name: "increaseGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2153,
  										src: "15985:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$__$returns$__$",
  											typeString: "function ()"
  										}
  									},
  									id: 1847,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "15985:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1848,
  								nodeType: "ExpressionStatement",
  								src: "15985:20:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1852,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1825,
  											src: "16067:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1853,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1829,
  											src: "16077:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1849,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "16041:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1851,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "removeValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6433,
  										src: "16041:25:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_nonpayable$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) returns (bool)"
  										}
  									},
  									id: 1854,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "16041:39:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								id: 1855,
  								nodeType: "ExpressionStatement",
  								src: "16041:39:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1857,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "deleteRow",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1830,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1825,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1857,
  								src: "15759:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1824,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "15759:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1827,
  								name: "idKey",
  								nodeType: "VariableDeclaration",
  								scope: 1857,
  								src: "15785:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1826,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "15785:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1829,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1857,
  								src: "15808:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1828,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "15808:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "15748:77:2"
  					},
  					returnParameters: {
  						id: 1831,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "15833:0:2"
  					},
  					scope: 2314,
  					src: "15730:357:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 1869,
  						nodeType: "Block",
  						src: "17476:49:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1866,
  											name: "key",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1859,
  											src: "17514:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1864,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "17493:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1865,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "containsKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 7823,
  										src: "17493:20:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  										}
  									},
  									id: 1867,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "17493:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								functionReturnParameters: 1863,
  								id: 1868,
  								nodeType: "Return",
  								src: "17486:32:2"
  							}
  						]
  					},
  					documentation: "@dev Table actual insert call, NOTE this doesn't work on testnet currently due to a stack size issue,\n     but it can work with a paid transaction I guess",
  					id: 1870,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "checkDataKey",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1860,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1859,
  								name: "key",
  								nodeType: "VariableDeclaration",
  								scope: 1870,
  								src: "17434:11:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1858,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "17434:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17433:13:2"
  					},
  					returnParameters: {
  						id: 1863,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1862,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1870,
  								src: "17470:4:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bool",
  									typeString: "bool"
  								},
  								typeName: {
  									id: 1861,
  									name: "bool",
  									nodeType: "ElementaryTypeName",
  									src: "17470:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17469:6:2"
  					},
  					scope: 2314,
  					src: "17412:113:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1893,
  						nodeType: "Block",
  						src: "17735:182:2",
  						statements: [
  							{
  								condition: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1879,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1872,
  											src: "17771:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1877,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "17750:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1878,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "containsKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 7823,
  										src: "17750:20:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  										}
  									},
  									id: 1880,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "17750:37:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: {
  									id: 1891,
  									nodeType: "Block",
  									src: "17869:42:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														hexValue: "30",
  														id: 1888,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "17898:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_0_by_1",
  															typeString: "int_const 0"
  														},
  														value: "0"
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_rational_0_by_1",
  															typeString: "int_const 0"
  														}
  													],
  													id: 1887,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													nodeType: "ElementaryTypeNameExpression",
  													src: "17890:7:2",
  													typeDescriptions: {
  														typeIdentifier: "t_type$_t_bytes32_$",
  														typeString: "type(bytes32)"
  													},
  													typeName: "bytes32"
  												},
  												id: 1889,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "typeConversion",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "17890:10:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											functionReturnParameters: 1876,
  											id: 1890,
  											nodeType: "Return",
  											src: "17883:17:2"
  										}
  									]
  								},
  								id: 1892,
  								nodeType: "IfStatement",
  								src: "17746:165:2",
  								trueBody: {
  									id: 1886,
  									nodeType: "Block",
  									src: "17789:74:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1883,
  														name: "fieldIdTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1872,
  														src: "17836:15:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1881,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "17810:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1882,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "getBytes32ForKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 7996,
  													src: "17810:25:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes32)"
  													}
  												},
  												id: 1884,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "17810:42:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											functionReturnParameters: 1876,
  											id: 1885,
  											nodeType: "Return",
  											src: "17803:49:2"
  										}
  									]
  								}
  							}
  						]
  					},
  					documentation: "@dev all data is public, so no need for security checks, we leave the data type handling to the client",
  					id: 1894,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getRowValue",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1873,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1872,
  								name: "fieldIdTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1894,
  								src: "17678:23:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1871,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "17678:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17677:25:2"
  					},
  					returnParameters: {
  						id: 1876,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1875,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1894,
  								src: "17726:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1874,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "17726:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17725:9:2"
  					},
  					scope: 2314,
  					src: "17657:260:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1918,
  						nodeType: "Block",
  						src: "18009:182:2",
  						statements: [
  							{
  								condition: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1903,
  											name: "fieldIdTableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1896,
  											src: "18045:15:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1901,
  											name: "database",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 997,
  											src: "18024:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  												typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  											}
  										},
  										id: 1902,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "containsKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 7823,
  										src: "18024:20:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  											typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bool)"
  										}
  									},
  									id: 1904,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "18024:37:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: {
  									id: 1916,
  									nodeType: "Block",
  									src: "18141:44:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														hexValue: "30",
  														id: 1913,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "18172:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_0_by_1",
  															typeString: "int_const 0"
  														},
  														value: "0"
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_rational_0_by_1",
  															typeString: "int_const 0"
  														}
  													],
  													id: 1912,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													nodeType: "NewExpression",
  													src: "18162:9:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
  														typeString: "function (uint256) pure returns (bytes memory)"
  													},
  													typeName: {
  														id: 1911,
  														name: "bytes",
  														nodeType: "ElementaryTypeName",
  														src: "18166:5:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes_storage_ptr",
  															typeString: "bytes"
  														}
  													}
  												},
  												id: 1914,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "18162:12:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes_memory",
  													typeString: "bytes memory"
  												}
  											},
  											functionReturnParameters: 1900,
  											id: 1915,
  											nodeType: "Return",
  											src: "18155:19:2"
  										}
  									]
  								},
  								id: 1917,
  								nodeType: "IfStatement",
  								src: "18020:165:2",
  								trueBody: {
  									id: 1910,
  									nodeType: "Block",
  									src: "18063:72:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1907,
  														name: "fieldIdTableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1896,
  														src: "18108:15:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1905,
  														name: "database",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 997,
  														src: "18084:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_PolymorphicDictionary_$7515_storage",
  															typeString: "struct PolymorphicDictionaryLib.PolymorphicDictionary storage ref"
  														}
  													},
  													id: 1906,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "getBytesForKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 8088,
  													src: "18084:23:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$_t_bytes32_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_PolymorphicDictionary_$7515_storage_ptr_$",
  														typeString: "function (struct PolymorphicDictionaryLib.PolymorphicDictionary storage pointer,bytes32) view returns (bytes memory)"
  													}
  												},
  												id: 1908,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "18084:40:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes_memory_ptr",
  													typeString: "bytes memory"
  												}
  											},
  											functionReturnParameters: 1900,
  											id: 1909,
  											nodeType: "Return",
  											src: "18077:47:2"
  										}
  									]
  								}
  							}
  						]
  					},
  					documentation: null,
  					id: 1919,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getRowValueVar",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1897,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1896,
  								name: "fieldIdTableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1919,
  								src: "17947:23:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1895,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "17947:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17946:25:2"
  					},
  					returnParameters: {
  						id: 1900,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1899,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1919,
  								src: "17995:12:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_memory_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 1898,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "17995:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "17994:14:2"
  					},
  					scope: 2314,
  					src: "17923:268:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1942,
  						nodeType: "Block",
  						src: "18479:136:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											id: 1933,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 1930,
  														name: "tableKey",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 1921,
  														src: "18518:8:2",
  														typeDescriptions: {
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_bytes32",
  															typeString: "bytes32"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 1928,
  														name: "tableId",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 986,
  														src: "18498:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  															typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  														}
  													},
  													id: 1929,
  													isConstant: false,
  													isLValue: true,
  													isPure: false,
  													lValueRequested: false,
  													memberName: "containsKey",
  													nodeType: "MemberAccess",
  													referencedDeclaration: 6307,
  													src: "18498:19:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_view$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  														typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32) view returns (bool)"
  													}
  												},
  												id: 1931,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "18498:29:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: "==",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "74727565",
  												id: 1932,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "bool",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "18531:4:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_bool",
  													typeString: "bool"
  												},
  												value: "true"
  											},
  											src: "18498:37:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "7461626c65206e6f742063726561746564",
  											id: 1934,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "18537:19:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_db6f56d35b8b4ab5d0197ec2e5e2f49c98a4f29978dd7ddea23231a13bd6f2fb",
  												typeString: "literal_string \"table not created\""
  											},
  											value: "table not created"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_db6f56d35b8b4ab5d0197ec2e5e2f49c98a4f29978dd7ddea23231a13bd6f2fb",
  												typeString: "literal_string \"table not created\""
  											}
  										],
  										id: 1927,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "18490:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 1935,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "18490:67:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 1936,
  								nodeType: "ExpressionStatement",
  								src: "18490:67:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1939,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1921,
  											src: "18599:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1937,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "18575:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1938,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "enumerateForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6516,
  										src: "18575:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32) view returns (bytes32[] memory)"
  										}
  									},
  									id: 1940,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "18575:33:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  										typeString: "bytes32[] memory"
  									}
  								},
  								functionReturnParameters: 1926,
  								id: 1941,
  								nodeType: "Return",
  								src: "18568:40:2"
  							}
  						]
  					},
  					documentation: "@dev Warning this produces an Error: overflow (operation=\"setValue\", fault=\"overflow\", details=\"Number can only safely store up to 53 bits\")\n     if the table doesn't exist",
  					id: 1943,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getTableIds",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1922,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1921,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1943,
  								src: "18421:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1920,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "18421:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "18420:18:2"
  					},
  					returnParameters: {
  						id: 1926,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1925,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1943,
  								src: "18462:16:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_array$_t_bytes32_$dyn_memory_ptr",
  									typeString: "bytes32[]"
  								},
  								typeName: {
  									baseType: {
  										id: 1923,
  										name: "bytes32",
  										nodeType: "ElementaryTypeName",
  										src: "18462:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									id: 1924,
  									length: null,
  									nodeType: "ArrayTypeName",
  									src: "18462:9:2",
  									typeDescriptions: {
  										typeIdentifier: "t_array$_t_bytes32_$dyn_storage_ptr",
  										typeString: "bytes32[]"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "18461:18:2"
  					},
  					scope: 2314,
  					src: "18400:215:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1958,
  						nodeType: "Block",
  						src: "18701:65:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1954,
  											name: "tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1945,
  											src: "18746:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 1955,
  											name: "id",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1947,
  											src: "18756:2:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 1952,
  											name: "tableId",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 986,
  											src: "18718:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_struct$_Bytes32SetDictionary_$6275_storage",
  												typeString: "struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage ref"
  											}
  										},
  										id: 1953,
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "containsValueForKey",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 6462,
  										src: "18718:27:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32SetDictionary_$6275_storage_ptr_$",
  											typeString: "function (struct Bytes32SetDictionaryLib.Bytes32SetDictionary storage pointer,bytes32,bytes32) view returns (bool)"
  										}
  									},
  									id: 1956,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "18718:41:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								functionReturnParameters: 1951,
  								id: 1957,
  								nodeType: "Return",
  								src: "18711:48:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1959,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getIdExists",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1948,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1945,
  								name: "tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 1959,
  								src: "18642:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1944,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "18642:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1947,
  								name: "id",
  								nodeType: "VariableDeclaration",
  								scope: 1959,
  								src: "18660:10:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1946,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "18660:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "18641:30:2"
  					},
  					returnParameters: {
  						id: 1951,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1950,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1959,
  								src: "18695:4:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bool",
  									typeString: "bool"
  								},
  								typeName: {
  									id: 1949,
  									name: "bool",
  									nodeType: "ElementaryTypeName",
  									src: "18695:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "18694:6:2"
  					},
  					scope: 2314,
  					src: "18621:145:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 1984,
  						nodeType: "Block",
  						src: "19061:237:2",
  						statements: [
  							{
  								assignments: [
  									1969
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1969,
  										name: "concat",
  										nodeType: "VariableDeclaration",
  										scope: 1984,
  										src: "19071:19:2",
  										stateVariable: false,
  										storageLocation: "memory",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes_memory_ptr",
  											typeString: "bytes"
  										},
  										typeName: {
  											id: 1968,
  											name: "bytes",
  											nodeType: "ElementaryTypeName",
  											src: "19071:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_storage_ptr",
  												typeString: "bytes"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1974,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											hexValue: "3634",
  											id: 1972,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "19103:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_64_by_1",
  												typeString: "int_const 64"
  											},
  											value: "64"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_rational_64_by_1",
  												typeString: "int_const 64"
  											}
  										],
  										id: 1971,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										lValueRequested: false,
  										nodeType: "NewExpression",
  										src: "19093:9:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
  											typeString: "function (uint256) pure returns (bytes memory)"
  										},
  										typeName: {
  											id: 1970,
  											name: "bytes",
  											nodeType: "ElementaryTypeName",
  											src: "19097:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_storage_ptr",
  												typeString: "bytes"
  											}
  										}
  									},
  									id: 1973,
  									isConstant: false,
  									isLValue: false,
  									isPure: true,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "19093:13:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_memory",
  										typeString: "bytes memory"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "19071:35:2"
  							},
  							{
  								externalReferences: [
  									{
  										subKey: {
  											declaration: 1961,
  											isOffset: false,
  											isSlot: false,
  											src: "19164:6:2",
  											valueSize: 1
  										}
  									},
  									{
  										concat: {
  											declaration: 1969,
  											isOffset: false,
  											isSlot: false,
  											src: "19151:6:2",
  											valueSize: 1
  										}
  									},
  									{
  										base: {
  											declaration: 1963,
  											isOffset: false,
  											isSlot: false,
  											src: "19208:4:2",
  											valueSize: 1
  										}
  									},
  									{
  										concat: {
  											declaration: 1969,
  											isOffset: false,
  											isSlot: false,
  											src: "19195:6:2",
  											valueSize: 1
  										}
  									}
  								],
  								id: 1975,
  								nodeType: "InlineAssembly",
  								operations: "{\n    mstore(add(concat, 64), subKey)\n    mstore(add(concat, 32), base)\n}",
  								src: "19117:123:2"
  							},
  							{
  								assignments: [
  									1977
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 1977,
  										name: "result",
  										nodeType: "VariableDeclaration",
  										scope: 1984,
  										src: "19233:14:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 1976,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "19233:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 1981,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 1979,
  											name: "concat",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 1969,
  											src: "19260:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes_memory_ptr",
  												typeString: "bytes memory"
  											}
  										],
  										id: 1978,
  										name: "keccak256",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 11027,
  										src: "19250:9:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
  											typeString: "function (bytes memory) pure returns (bytes32)"
  										}
  									},
  									id: 1980,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "19250:17:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "19233:34:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 1982,
  									name: "result",
  									nodeType: "Identifier",
  									overloadedDeclarations: [
  									],
  									referencedDeclaration: 1977,
  									src: "19285:6:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								functionReturnParameters: 1967,
  								id: 1983,
  								nodeType: "Return",
  								src: "19278:13:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 1985,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "namehash",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1964,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1961,
  								name: "subKey",
  								nodeType: "VariableDeclaration",
  								scope: 1985,
  								src: "18999:14:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1960,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "18999:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1963,
  								name: "base",
  								nodeType: "VariableDeclaration",
  								scope: 1985,
  								src: "19015:12:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1962,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "19015:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "18998:30:2"
  					},
  					returnParameters: {
  						id: 1967,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1966,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 1985,
  								src: "19052:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1965,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "19052:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "19051:9:2"
  					},
  					scope: 2314,
  					src: "18981:317:2",
  					stateMutability: "pure",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 2027,
  						nodeType: "Block",
  						src: "19536:231:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											commonType: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											},
  											id: 1999,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											lValueRequested: false,
  											leftExpression: {
  												argumentTypes: null,
  												baseExpression: {
  													argumentTypes: null,
  													id: 1995,
  													name: "_table",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 984,
  													src: "19554:6:2",
  													typeDescriptions: {
  														typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  														typeString: "mapping(bytes32 => bytes32)"
  													}
  												},
  												id: 1997,
  												indexExpression: {
  													argumentTypes: null,
  													id: 1996,
  													name: "_tableKey",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 1987,
  													src: "19561:9:2",
  													typeDescriptions: {
  														typeIdentifier: "t_bytes32",
  														typeString: "bytes32"
  													}
  												},
  												isConstant: false,
  												isLValue: true,
  												isPure: false,
  												lValueRequested: false,
  												nodeType: "IndexAccess",
  												src: "19554:17:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											nodeType: "BinaryOperation",
  											operator: ">",
  											rightExpression: {
  												argumentTypes: null,
  												hexValue: "30",
  												id: 1998,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												kind: "number",
  												lValueRequested: false,
  												nodeType: "Literal",
  												src: "19574:1:2",
  												subdenomination: null,
  												typeDescriptions: {
  													typeIdentifier: "t_rational_0_by_1",
  													typeString: "int_const 0"
  												},
  												value: "0"
  											},
  											src: "19554:21:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											}
  										},
  										{
  											argumentTypes: null,
  											hexValue: "7461626c6520646f6573206e6f74206578697374",
  											id: 2000,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "string",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "19577:22:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_stringliteral_f7e9b396f082020836b3f74274104d95ad6dff938f95c751e799f51d9bb78cba",
  												typeString: "literal_string \"table does not exist\""
  											},
  											value: "table does not exist"
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bool",
  												typeString: "bool"
  											},
  											{
  												typeIdentifier: "t_stringliteral_f7e9b396f082020836b3f74274104d95ad6dff938f95c751e799f51d9bb78cba",
  												typeString: "literal_string \"table does not exist\""
  											}
  										],
  										id: 1994,
  										name: "require",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											11036,
  											11037
  										],
  										referencedDeclaration: 11037,
  										src: "19546:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
  											typeString: "function (bool,string memory) pure"
  										}
  									},
  									id: 2001,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "19546:54:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 2002,
  								nodeType: "ExpressionStatement",
  								src: "19546:54:2"
  							},
  							{
  								assignments: [
  									2004
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2004,
  										name: "tableMetadata",
  										nodeType: "VariableDeclaration",
  										scope: 2027,
  										src: "19611:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2003,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "19611:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2010,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											baseExpression: {
  												argumentTypes: null,
  												id: 2006,
  												name: "_table",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 984,
  												src: "19643:6:2",
  												typeDescriptions: {
  													typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  													typeString: "mapping(bytes32 => bytes32)"
  												}
  											},
  											id: 2008,
  											indexExpression: {
  												argumentTypes: null,
  												id: 2007,
  												name: "_tableKey",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 1987,
  												src: "19650:9:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes32",
  													typeString: "bytes32"
  												}
  											},
  											isConstant: false,
  											isLValue: true,
  											isPure: false,
  											lValueRequested: false,
  											nodeType: "IndexAccess",
  											src: "19643:17:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										],
  										id: 2005,
  										isConstant: false,
  										isLValue: false,
  										isPure: true,
  										lValueRequested: false,
  										nodeType: "ElementaryTypeNameExpression",
  										src: "19635:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_type$_t_uint256_$",
  											typeString: "type(uint256)"
  										},
  										typeName: "uint256"
  									},
  									id: 2009,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "typeConversion",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "19635:26:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "19611:50:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2017,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2011,
  										name: "permission",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1990,
  										src: "19672:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 2014,
  														name: "tableMetadata",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 2004,
  														src: "19699:13:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													],
  													id: 2013,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													nodeType: "ElementaryTypeNameExpression",
  													src: "19693:5:2",
  													typeDescriptions: {
  														typeIdentifier: "t_type$_t_uint8_$",
  														typeString: "type(uint8)"
  													},
  													typeName: "uint8"
  												},
  												id: 2015,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "typeConversion",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "19693:20:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint8",
  													typeString: "uint8"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint8",
  													typeString: "uint8"
  												}
  											],
  											id: 2012,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "19685:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_uint256_$",
  												typeString: "type(uint256)"
  											},
  											typeName: "uint256"
  										},
  										id: 2016,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "19685:29:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "19672:42:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2018,
  								nodeType: "ExpressionStatement",
  								src: "19672:42:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2025,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2019,
  										name: "delegate",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 1992,
  										src: "19724:8:2",
  										typeDescriptions: {
  											typeIdentifier: "t_address",
  											typeString: "address"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												commonType: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												},
  												id: 2023,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												lValueRequested: false,
  												leftExpression: {
  													argumentTypes: null,
  													id: 2021,
  													name: "tableMetadata",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 2004,
  													src: "19743:13:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint256",
  														typeString: "uint256"
  													}
  												},
  												nodeType: "BinaryOperation",
  												operator: ">>",
  												rightExpression: {
  													argumentTypes: null,
  													hexValue: "38",
  													id: 2022,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													kind: "number",
  													lValueRequested: false,
  													nodeType: "Literal",
  													src: "19758:1:2",
  													subdenomination: null,
  													typeDescriptions: {
  														typeIdentifier: "t_rational_8_by_1",
  														typeString: "int_const 8"
  													},
  													value: "8"
  												},
  												src: "19743:16:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											],
  											id: 2020,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "19735:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_address_$",
  												typeString: "type(address)"
  											},
  											typeName: "address"
  										},
  										id: 2024,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "19735:25:2",
  										typeDescriptions: {
  											typeIdentifier: "t_address_payable",
  											typeString: "address payable"
  										}
  									},
  									src: "19724:36:2",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								id: 2026,
  								nodeType: "ExpressionStatement",
  								src: "19724:36:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2028,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getTableMetadata",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 1988,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1987,
  								name: "_tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 2028,
  								src: "19430:17:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 1986,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "19430:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "19429:19:2"
  					},
  					returnParameters: {
  						id: 1993,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 1990,
  								name: "permission",
  								nodeType: "VariableDeclaration",
  								scope: 2028,
  								src: "19494:18:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 1989,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "19494:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 1992,
  								name: "delegate",
  								nodeType: "VariableDeclaration",
  								scope: 2028,
  								src: "19514:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 1991,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "19514:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "19493:38:2"
  					},
  					scope: 2314,
  					src: "19404:363:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 2062,
  						nodeType: "Block",
  						src: "19872:176:2",
  						statements: [
  							{
  								assignments: [
  									2040
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2040,
  										name: "tableMetadata",
  										nodeType: "VariableDeclaration",
  										scope: 2062,
  										src: "19882:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2039,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "19882:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2041,
  								initialValue: null,
  								nodeType: "VariableDeclarationStatement",
  								src: "19882:21:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2044,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2042,
  										name: "tableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2040,
  										src: "19914:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										id: 2043,
  										name: "permission",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2032,
  										src: "19931:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint8",
  											typeString: "uint8"
  										}
  									},
  									src: "19914:27:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2045,
  								nodeType: "ExpressionStatement",
  								src: "19914:27:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2052,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2046,
  										name: "tableMetadata",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2040,
  										src: "19951:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint160",
  											typeString: "uint160"
  										},
  										id: 2051,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 2048,
  													name: "delegate",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 2034,
  													src: "19976:8:2",
  													typeDescriptions: {
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_address",
  														typeString: "address"
  													}
  												],
  												id: 2047,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "19968:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint160_$",
  													typeString: "type(uint160)"
  												},
  												typeName: "uint160"
  											},
  											id: 2049,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "19968:17:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint160",
  												typeString: "uint160"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "38",
  											id: 2050,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "19987:1:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_8_by_1",
  												typeString: "int_const 8"
  											},
  											value: "8"
  										},
  										src: "19968:20:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint160",
  											typeString: "uint160"
  										}
  									},
  									src: "19951:37:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2053,
  								nodeType: "ExpressionStatement",
  								src: "19951:37:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2060,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										baseExpression: {
  											argumentTypes: null,
  											id: 2054,
  											name: "_table",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 984,
  											src: "19999:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_mapping$_t_bytes32_$_t_bytes32_$",
  												typeString: "mapping(bytes32 => bytes32)"
  											}
  										},
  										id: 2056,
  										indexExpression: {
  											argumentTypes: null,
  											id: 2055,
  											name: "_tableKey",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2030,
  											src: "20006:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: true,
  										nodeType: "IndexAccess",
  										src: "19999:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												id: 2058,
  												name: "tableMetadata",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 2040,
  												src: "20027:13:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											],
  											id: 2057,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "20019:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_bytes32_$",
  												typeString: "type(bytes32)"
  											},
  											typeName: "bytes32"
  										},
  										id: 2059,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "20019:22:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									src: "19999:42:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								id: 2061,
  								nodeType: "ExpressionStatement",
  								src: "19999:42:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2063,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 2037,
  							modifierName: {
  								argumentTypes: null,
  								id: 2036,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "19862:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "19862:9:2"
  						}
  					],
  					name: "setTableMetadata",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2035,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2030,
  								name: "_tableKey",
  								nodeType: "VariableDeclaration",
  								scope: 2063,
  								src: "19799:17:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 2029,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "19799:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2032,
  								name: "permission",
  								nodeType: "VariableDeclaration",
  								scope: 2063,
  								src: "19818:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint8",
  									typeString: "uint8"
  								},
  								typeName: {
  									id: 2031,
  									name: "uint8",
  									nodeType: "ElementaryTypeName",
  									src: "19818:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2034,
  								name: "delegate",
  								nodeType: "VariableDeclaration",
  								scope: 2063,
  								src: "19836:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 2033,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "19836:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "19798:55:2"
  					},
  					returnParameters: {
  						id: 2038,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "19872:0:2"
  					},
  					scope: 2314,
  					src: "19773:275:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "private"
  				},
  				{
  					body: {
  						id: 2066,
  						nodeType: "Block",
  						src: "20181:2:2",
  						statements: [
  						]
  					},
  					documentation: null,
  					id: 2067,
  					implemented: true,
  					kind: "fallback",
  					modifiers: [
  					],
  					name: "",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2064,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "20161:2:2"
  					},
  					returnParameters: {
  						id: 2065,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "20181:0:2"
  					},
  					scope: 2314,
  					src: "20153:30:2",
  					stateMutability: "payable",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 2115,
  						nodeType: "Block",
  						src: "20722:312:2",
  						statements: [
  							{
  								assignments: [
  									2093
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2093,
  										name: "curDateHashed",
  										nodeType: "VariableDeclaration",
  										scope: 2115,
  										src: "20733:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 2092,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "20733:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2096,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 2094,
  										name: "getGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2212,
  										src: "20757:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$__$returns$_t_bytes32_$",
  											typeString: "function () view returns (bytes32)"
  										}
  									},
  									id: 2095,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "20757:15:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "20733:39:2"
  							},
  							{
  								assignments: [
  									2098
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2098,
  										name: "curCounter",
  										nodeType: "VariableDeclaration",
  										scope: 2115,
  										src: "20842:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2097,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "20842:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2102,
  								initialValue: {
  									argumentTypes: null,
  									baseExpression: {
  										argumentTypes: null,
  										id: 2099,
  										name: "gsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 972,
  										src: "20863:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_mapping$_t_bytes32_$_t_uint256_$",
  											typeString: "mapping(bytes32 => uint256)"
  										}
  									},
  									id: 2101,
  									indexExpression: {
  										argumentTypes: null,
  										id: 2100,
  										name: "curDateHashed",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2093,
  										src: "20874:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									isConstant: false,
  									isLValue: true,
  									isPure: false,
  									lValueRequested: false,
  									nodeType: "IndexAccess",
  									src: "20863:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "20842:46:2"
  							},
  							{
  								condition: {
  									argumentTypes: null,
  									commonType: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									},
  									id: 2105,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftExpression: {
  										argumentTypes: null,
  										id: 2103,
  										name: "curCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2098,
  										src: "20903:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "BinaryOperation",
  									operator: ">=",
  									rightExpression: {
  										argumentTypes: null,
  										id: 2104,
  										name: "gsnMaxCallsPerDay",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 974,
  										src: "20917:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint40",
  											typeString: "uint40"
  										}
  									},
  									src: "20903:31:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								falseBody: null,
  								id: 2111,
  								nodeType: "IfStatement",
  								src: "20899:89:2",
  								trueBody: {
  									id: 2110,
  									nodeType: "Block",
  									src: "20935:53:2",
  									statements: [
  										{
  											expression: {
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														hexValue: "32",
  														id: 2107,
  														isConstant: false,
  														isLValue: false,
  														isPure: true,
  														kind: "number",
  														lValueRequested: false,
  														nodeType: "Literal",
  														src: "20975:1:2",
  														subdenomination: null,
  														typeDescriptions: {
  															typeIdentifier: "t_rational_2_by_1",
  															typeString: "int_const 2"
  														},
  														value: "2"
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_rational_2_by_1",
  															typeString: "int_const 2"
  														}
  													],
  													id: 2106,
  													name: "_rejectRelayedCall",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 4189,
  													src: "20956:18:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$_t_bytes_memory_ptr_$",
  														typeString: "function (uint256) pure returns (uint256,bytes memory)"
  													}
  												},
  												id: 2108,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "20956:21:2",
  												typeDescriptions: {
  													typeIdentifier: "t_tuple$_t_uint256_$_t_bytes_memory_ptr_$",
  													typeString: "tuple(uint256,bytes memory)"
  												}
  											},
  											functionReturnParameters: 2091,
  											id: 2109,
  											nodeType: "Return",
  											src: "20949:28:2"
  										}
  									]
  								}
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 2112,
  										name: "_approveRelayedCall",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  											4159,
  											4173
  										],
  										referencedDeclaration: 4159,
  										src: "21006:19:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_pure$__$returns$_t_uint256_$_t_bytes_memory_ptr_$",
  											typeString: "function () pure returns (uint256,bytes memory)"
  										}
  									},
  									id: 2113,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "21006:21:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$_t_uint256_$_t_bytes_memory_ptr_$",
  										typeString: "tuple(uint256,bytes memory)"
  									}
  								},
  								functionReturnParameters: 2091,
  								id: 2114,
  								nodeType: "Return",
  								src: "20999:28:2"
  							}
  						]
  					},
  					documentation: "As a first layer of defense we employ a max number of checks per day",
  					id: 2116,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "acceptRelayedCall",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2086,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2069,
  								name: "relay",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20415:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 2068,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "20415:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2071,
  								name: "from",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20438:12:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address",
  									typeString: "address"
  								},
  								typeName: {
  									id: 2070,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "20438:7:2",
  									stateMutability: "nonpayable",
  									typeDescriptions: {
  										typeIdentifier: "t_address",
  										typeString: "address"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2073,
  								name: "encodedFunction",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20460:30:2",
  								stateVariable: false,
  								storageLocation: "calldata",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_calldata_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 2072,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "20460:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2075,
  								name: "transactionFee",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20500:22:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2074,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20500:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2077,
  								name: "gasPrice",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20532:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2076,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20532:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2079,
  								name: "gasLimit",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20558:16:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2078,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20558:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2081,
  								name: "nonce",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20584:13:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2080,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20584:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2083,
  								name: "approvalData",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20607:27:2",
  								stateVariable: false,
  								storageLocation: "calldata",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_calldata_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 2082,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "20607:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2085,
  								name: "maxPossibleCharge",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20644:25:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2084,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20644:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "20405:270:2"
  					},
  					returnParameters: {
  						id: 2091,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2088,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20699:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2087,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "20699:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2090,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2116,
  								src: "20708:12:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_memory_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 2089,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "20708:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "20698:23:2"
  					},
  					scope: 2314,
  					src: "20379:655:2",
  					stateMutability: "view",
  					superFunction: 4065,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 2129,
  						nodeType: "Block",
  						src: "21102:48:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2127,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2123,
  										name: "gsnMaxCallsPerDay",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 974,
  										src: "21112:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint40",
  											typeString: "uint40"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												id: 2125,
  												name: "max",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 2118,
  												src: "21139:3:2",
  												typeDescriptions: {
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_uint256",
  													typeString: "uint256"
  												}
  											],
  											id: 2124,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											lValueRequested: false,
  											nodeType: "ElementaryTypeNameExpression",
  											src: "21132:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_type$_t_uint40_$",
  												typeString: "type(uint40)"
  											},
  											typeName: "uint40"
  										},
  										id: 2126,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "typeConversion",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "21132:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint40",
  											typeString: "uint40"
  										}
  									},
  									src: "21112:31:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint40",
  										typeString: "uint40"
  									}
  								},
  								id: 2128,
  								nodeType: "ExpressionStatement",
  								src: "21112:31:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2130,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 2121,
  							modifierName: {
  								argumentTypes: null,
  								id: 2120,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "21092:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "21092:9:2"
  						}
  					],
  					name: "setGsnMaxCallsPerDay",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2119,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2118,
  								name: "max",
  								nodeType: "VariableDeclaration",
  								scope: 2130,
  								src: "21070:11:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2117,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "21070:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "21069:13:2"
  					},
  					returnParameters: {
  						id: 2122,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "21102:0:2"
  					},
  					scope: 2314,
  					src: "21040:110:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "external"
  				},
  				{
  					body: {
  						id: 2152,
  						nodeType: "Block",
  						src: "21368:243:2",
  						statements: [
  							{
  								assignments: [
  									2134
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2134,
  										name: "curDateHashed",
  										nodeType: "VariableDeclaration",
  										scope: 2152,
  										src: "21379:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										},
  										typeName: {
  											id: 2133,
  											name: "bytes32",
  											nodeType: "ElementaryTypeName",
  											src: "21379:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2137,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 2135,
  										name: "getGsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2212,
  										src: "21403:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$__$returns$_t_bytes32_$",
  											typeString: "function () view returns (bytes32)"
  										}
  									},
  									id: 2136,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "21403:15:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "21379:39:2"
  							},
  							{
  								assignments: [
  									2139
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2139,
  										name: "curCounter",
  										nodeType: "VariableDeclaration",
  										scope: 2152,
  										src: "21429:18:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2138,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "21429:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2143,
  								initialValue: {
  									argumentTypes: null,
  									baseExpression: {
  										argumentTypes: null,
  										id: 2140,
  										name: "gsnCounter",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 972,
  										src: "21450:10:2",
  										typeDescriptions: {
  											typeIdentifier: "t_mapping$_t_bytes32_$_t_uint256_$",
  											typeString: "mapping(bytes32 => uint256)"
  										}
  									},
  									id: 2142,
  									indexExpression: {
  										argumentTypes: null,
  										id: 2141,
  										name: "curDateHashed",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2134,
  										src: "21461:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									isConstant: false,
  									isLValue: true,
  									isPure: false,
  									lValueRequested: false,
  									nodeType: "IndexAccess",
  									src: "21450:25:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "21429:46:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2150,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										baseExpression: {
  											argumentTypes: null,
  											id: 2144,
  											name: "gsnCounter",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 972,
  											src: "21486:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_mapping$_t_bytes32_$_t_uint256_$",
  												typeString: "mapping(bytes32 => uint256)"
  											}
  										},
  										id: 2146,
  										indexExpression: {
  											argumentTypes: null,
  											id: 2145,
  											name: "curDateHashed",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2134,
  											src: "21497:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_bytes32",
  												typeString: "bytes32"
  											}
  										},
  										isConstant: false,
  										isLValue: true,
  										isPure: false,
  										lValueRequested: true,
  										nodeType: "IndexAccess",
  										src: "21486:25:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 2149,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											id: 2147,
  											name: "curCounter",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2139,
  											src: "21514:10:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "+",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "31",
  											id: 2148,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "21527:1:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_1_by_1",
  												typeString: "int_const 1"
  											},
  											value: "1"
  										},
  										src: "21514:14:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "21486:42:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2151,
  								nodeType: "ExpressionStatement",
  								src: "21486:42:2"
  							}
  						]
  					},
  					documentation: "Increase the GSN Counter for today",
  					id: 2153,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "increaseGsnCounter",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2131,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "21356:2:2"
  					},
  					returnParameters: {
  						id: 2132,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "21368:0:2"
  					},
  					scope: 2314,
  					src: "21329:282:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 2211,
  						nodeType: "Block",
  						src: "21710:332:2",
  						statements: [
  							{
  								assignments: [
  									2159
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2159,
  										name: "curDate",
  										nodeType: "VariableDeclaration",
  										scope: 2211,
  										src: "21721:15:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2158,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "21721:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2160,
  								initialValue: null,
  								nodeType: "VariableDeclarationStatement",
  								src: "21721:15:2"
  							},
  							{
  								assignments: [
  									2162
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2162,
  										name: "year",
  										nodeType: "VariableDeclaration",
  										scope: 2211,
  										src: "21747:11:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint16",
  											typeString: "uint16"
  										},
  										typeName: {
  											id: 2161,
  											name: "uint16",
  											nodeType: "ElementaryTypeName",
  											src: "21747:6:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint16",
  												typeString: "uint16"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2167,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 2165,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "21778:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 2163,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "21761:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 2164,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getYear",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 941,
  										src: "21761:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint16_$",
  											typeString: "function (uint256) pure external returns (uint16)"
  										}
  									},
  									id: 2166,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "21761:21:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint16",
  										typeString: "uint16"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "21747:35:2"
  							},
  							{
  								assignments: [
  									2169
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2169,
  										name: "month",
  										nodeType: "VariableDeclaration",
  										scope: 2211,
  										src: "21792:11:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint8",
  											typeString: "uint8"
  										},
  										typeName: {
  											id: 2168,
  											name: "uint8",
  											nodeType: "ElementaryTypeName",
  											src: "21792:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2174,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 2172,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "21824:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 2170,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "21806:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 2171,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getMonth",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 948,
  										src: "21806:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint8_$",
  											typeString: "function (uint256) pure external returns (uint8)"
  										}
  									},
  									id: 2173,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "21806:22:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "21792:36:2"
  							},
  							{
  								assignments: [
  									2176
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2176,
  										name: "day",
  										nodeType: "VariableDeclaration",
  										scope: 2211,
  										src: "21838:9:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint8",
  											typeString: "uint8"
  										},
  										typeName: {
  											id: 2175,
  											name: "uint8",
  											nodeType: "ElementaryTypeName",
  											src: "21838:5:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint8",
  												typeString: "uint8"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2181,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 2179,
  											name: "now",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11035,
  											src: "21866:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 2177,
  											name: "dateTime",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 968,
  											src: "21850:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_DateTime_$956",
  												typeString: "contract DateTime"
  											}
  										},
  										id: 2178,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "getDay",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 955,
  										src: "21850:15:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_pure$_t_uint256_$returns$_t_uint8_$",
  											typeString: "function (uint256) pure external returns (uint8)"
  										}
  									},
  									id: 2180,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "21850:20:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint8",
  										typeString: "uint8"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "21838:32:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2184,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2182,
  										name: "curDate",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2159,
  										src: "21881:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										id: 2183,
  										name: "year",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2162,
  										src: "21892:4:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint16",
  											typeString: "uint16"
  										}
  									},
  									src: "21881:15:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2185,
  								nodeType: "ExpressionStatement",
  								src: "21881:15:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2192,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2186,
  										name: "curDate",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2159,
  										src: "21906:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 2191,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 2188,
  													name: "month",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 2169,
  													src: "21925:5:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												],
  												id: 2187,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "21917:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint256_$",
  													typeString: "type(uint256)"
  												},
  												typeName: "uint256"
  											},
  											id: 2189,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "21917:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "3136",
  											id: 2190,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "21933:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_16_by_1",
  												typeString: "int_const 16"
  											},
  											value: "16"
  										},
  										src: "21917:18:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "21906:29:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2193,
  								nodeType: "ExpressionStatement",
  								src: "21906:29:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2200,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2194,
  										name: "curDate",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2159,
  										src: "21945:7:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "|=",
  									rightHandSide: {
  										argumentTypes: null,
  										commonType: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										id: 2199,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										leftExpression: {
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 2196,
  													name: "day",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 2176,
  													src: "21964:3:2",
  													typeDescriptions: {
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_uint8",
  														typeString: "uint8"
  													}
  												],
  												id: 2195,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "21956:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_uint256_$",
  													typeString: "type(uint256)"
  												},
  												typeName: "uint256"
  											},
  											id: 2197,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "21956:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										nodeType: "BinaryOperation",
  										operator: "<<",
  										rightExpression: {
  											argumentTypes: null,
  											hexValue: "3234",
  											id: 2198,
  											isConstant: false,
  											isLValue: false,
  											isPure: true,
  											kind: "number",
  											lValueRequested: false,
  											nodeType: "Literal",
  											src: "21970:2:2",
  											subdenomination: null,
  											typeDescriptions: {
  												typeIdentifier: "t_rational_24_by_1",
  												typeString: "int_const 24"
  											},
  											value: "24"
  										},
  										src: "21956:16:2",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										}
  									},
  									src: "21945:27:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								id: 2201,
  								nodeType: "ExpressionStatement",
  								src: "21945:27:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2209,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									lValueRequested: false,
  									leftHandSide: {
  										argumentTypes: null,
  										id: 2202,
  										name: "curDateHashed",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2156,
  										src: "21983:13:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									nodeType: "Assignment",
  									operator: "=",
  									rightHandSide: {
  										argumentTypes: null,
  										"arguments": [
  											{
  												argumentTypes: null,
  												"arguments": [
  													{
  														argumentTypes: null,
  														id: 2206,
  														name: "curDate",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 2159,
  														src: "22026:7:2",
  														typeDescriptions: {
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													}
  												],
  												expression: {
  													argumentTypes: [
  														{
  															typeIdentifier: "t_uint256",
  															typeString: "uint256"
  														}
  													],
  													expression: {
  														argumentTypes: null,
  														id: 2204,
  														name: "abi",
  														nodeType: "Identifier",
  														overloadedDeclarations: [
  														],
  														referencedDeclaration: 11020,
  														src: "22009:3:2",
  														typeDescriptions: {
  															typeIdentifier: "t_magic_abi",
  															typeString: "abi"
  														}
  													},
  													id: 2205,
  													isConstant: false,
  													isLValue: false,
  													isPure: true,
  													lValueRequested: false,
  													memberName: "encodePacked",
  													nodeType: "MemberAccess",
  													referencedDeclaration: null,
  													src: "22009:16:2",
  													typeDescriptions: {
  														typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
  														typeString: "function () pure returns (bytes memory)"
  													}
  												},
  												id: 2207,
  												isConstant: false,
  												isLValue: false,
  												isPure: false,
  												kind: "functionCall",
  												lValueRequested: false,
  												names: [
  												],
  												nodeType: "FunctionCall",
  												src: "22009:25:2",
  												typeDescriptions: {
  													typeIdentifier: "t_bytes_memory_ptr",
  													typeString: "bytes memory"
  												}
  											}
  										],
  										expression: {
  											argumentTypes: [
  												{
  													typeIdentifier: "t_bytes_memory_ptr",
  													typeString: "bytes memory"
  												}
  											],
  											id: 2203,
  											name: "keccak256",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 11027,
  											src: "21999:9:2",
  											typeDescriptions: {
  												typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
  												typeString: "function (bytes memory) pure returns (bytes32)"
  											}
  										},
  										id: 2208,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										kind: "functionCall",
  										lValueRequested: false,
  										names: [
  										],
  										nodeType: "FunctionCall",
  										src: "21999:36:2",
  										typeDescriptions: {
  											typeIdentifier: "t_bytes32",
  											typeString: "bytes32"
  										}
  									},
  									src: "21983:52:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								id: 2210,
  								nodeType: "ExpressionStatement",
  								src: "21983:52:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2212,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getGsnCounter",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2154,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "21661:2:2"
  					},
  					returnParameters: {
  						id: 2157,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2156,
  								name: "curDateHashed",
  								nodeType: "VariableDeclaration",
  								scope: 2212,
  								src: "21687:21:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 2155,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "21687:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "21686:23:2"
  					},
  					scope: 2314,
  					src: "21639:403:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 2219,
  						nodeType: "Block",
  						src: "22221:7:2",
  						statements: [
  						]
  					},
  					documentation: null,
  					id: 2220,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "_preRelayedCall",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2215,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2214,
  								name: "context",
  								nodeType: "VariableDeclaration",
  								scope: 2220,
  								src: "22172:20:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_memory_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 2213,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "22172:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22171:22:2"
  					},
  					returnParameters: {
  						id: 2218,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2217,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2220,
  								src: "22212:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 2216,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "22212:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22211:9:2"
  					},
  					scope: 2314,
  					src: "22147:81:2",
  					stateMutability: "nonpayable",
  					superFunction: 4197,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 2231,
  						nodeType: "Block",
  						src: "22328:7:2",
  						statements: [
  						]
  					},
  					documentation: null,
  					id: 2232,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "_postRelayedCall",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2229,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2222,
  								name: "context",
  								nodeType: "VariableDeclaration",
  								scope: 2232,
  								src: "22260:20:2",
  								stateVariable: false,
  								storageLocation: "memory",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes_memory_ptr",
  									typeString: "bytes"
  								},
  								typeName: {
  									id: 2221,
  									name: "bytes",
  									nodeType: "ElementaryTypeName",
  									src: "22260:5:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes_storage_ptr",
  										typeString: "bytes"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2224,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2232,
  								src: "22282:4:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bool",
  									typeString: "bool"
  								},
  								typeName: {
  									id: 2223,
  									name: "bool",
  									nodeType: "ElementaryTypeName",
  									src: "22282:4:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bool",
  										typeString: "bool"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2226,
  								name: "actualCharge",
  								nodeType: "VariableDeclaration",
  								scope: 2232,
  								src: "22288:20:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2225,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "22288:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2228,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2232,
  								src: "22310:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_bytes32",
  									typeString: "bytes32"
  								},
  								typeName: {
  									id: 2227,
  									name: "bytes32",
  									nodeType: "ElementaryTypeName",
  									src: "22310:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_bytes32",
  										typeString: "bytes32"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22259:59:2"
  					},
  					returnParameters: {
  						id: 2230,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "22328:0:2"
  					},
  					scope: 2314,
  					src: "22234:101:2",
  					stateMutability: "nonpayable",
  					superFunction: 4209,
  					visibility: "internal"
  				},
  				{
  					body: {
  						id: 2253,
  						nodeType: "Block",
  						src: "22609:92:2",
  						statements: [
  							{
  								assignments: [
  									2242
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2242,
  										name: "relayHub",
  										nodeType: "VariableDeclaration",
  										scope: 2253,
  										src: "22619:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  											typeString: "contract IRelayHubELA"
  										},
  										typeName: {
  											contractScope: null,
  											id: 2241,
  											name: "IRelayHubELA",
  											nodeType: "UserDefinedTypeName",
  											referencedDeclaration: 4033,
  											src: "22619:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2245,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 2243,
  										name: "getRelayHub",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2313,
  										src: "22643:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$__$returns$_t_contract$_IRelayHubELA_$4033_$",
  											typeString: "function () view returns (contract IRelayHubELA)"
  										}
  									},
  									id: 2244,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "22643:13:2",
  									typeDescriptions: {
  										typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  										typeString: "contract IRelayHubELA"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "22619:37:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 2249,
  											name: "amt",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2234,
  											src: "22684:3:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 2250,
  											name: "dest",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2236,
  											src: "22689:4:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											},
  											{
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 2246,
  											name: "relayHub",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2242,
  											src: "22666:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										id: 2248,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "withdraw",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 3887,
  										src: "22666:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_nonpayable$_t_uint256_$_t_address_payable_$returns$__$",
  											typeString: "function (uint256,address payable) external"
  										}
  									},
  									id: 2251,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "22666:28:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 2252,
  								nodeType: "ExpressionStatement",
  								src: "22666:28:2"
  							}
  						]
  					},
  					documentation: "@dev Withdraw a specific amount of the GSNReceipient funds\n@param amt Amount of wei to withdraw\n@param dest This is the arbitrary withdrawal destination address",
  					id: 2254,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 2239,
  							modifierName: {
  								argumentTypes: null,
  								id: 2238,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "22599:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "22599:9:2"
  						}
  					],
  					name: "withdraw",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2237,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2234,
  								name: "amt",
  								nodeType: "VariableDeclaration",
  								scope: 2254,
  								src: "22557:11:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2233,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "22557:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							},
  							{
  								constant: false,
  								id: 2236,
  								name: "dest",
  								nodeType: "VariableDeclaration",
  								scope: 2254,
  								src: "22570:20:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address_payable",
  									typeString: "address payable"
  								},
  								typeName: {
  									id: 2235,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "22570:15:2",
  									stateMutability: "payable",
  									typeDescriptions: {
  										typeIdentifier: "t_address_payable",
  										typeString: "address payable"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22556:35:2"
  					},
  					returnParameters: {
  						id: 2240,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "22609:0:2"
  					},
  					scope: 2314,
  					src: "22539:162:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 2287,
  						nodeType: "Block",
  						src: "22922:186:2",
  						statements: [
  							{
  								assignments: [
  									2264
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2264,
  										name: "relayHub",
  										nodeType: "VariableDeclaration",
  										scope: 2287,
  										src: "22932:21:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  											typeString: "contract IRelayHubELA"
  										},
  										typeName: {
  											contractScope: null,
  											id: 2263,
  											name: "IRelayHubELA",
  											nodeType: "UserDefinedTypeName",
  											referencedDeclaration: 4033,
  											src: "22932:12:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2267,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  									],
  									expression: {
  										argumentTypes: [
  										],
  										id: 2265,
  										name: "getRelayHub",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 2313,
  										src: "22956:11:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_internal_view$__$returns$_t_contract$_IRelayHubELA_$4033_$",
  											typeString: "function () view returns (contract IRelayHubELA)"
  										}
  									},
  									id: 2266,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "22956:13:2",
  									typeDescriptions: {
  										typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  										typeString: "contract IRelayHubELA"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "22932:37:2"
  							},
  							{
  								assignments: [
  									2269
  								],
  								declarations: [
  									{
  										constant: false,
  										id: 2269,
  										name: "balance",
  										nodeType: "VariableDeclaration",
  										scope: 2287,
  										src: "22979:15:2",
  										stateVariable: false,
  										storageLocation: "default",
  										typeDescriptions: {
  											typeIdentifier: "t_uint256",
  											typeString: "uint256"
  										},
  										typeName: {
  											id: 2268,
  											name: "uint256",
  											nodeType: "ElementaryTypeName",
  											src: "22979:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										value: null,
  										visibility: "internal"
  									}
  								],
  								id: 2277,
  								initialValue: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 2274,
  													name: "this",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 11092,
  													src: "23029:4:2",
  													typeDescriptions: {
  														typeIdentifier: "t_contract$_ELAJSStore_$2314",
  														typeString: "contract ELAJSStore"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_contract$_ELAJSStore_$2314",
  														typeString: "contract ELAJSStore"
  													}
  												],
  												id: 2273,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "23021:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_address_$",
  													typeString: "type(address)"
  												},
  												typeName: "address"
  											},
  											id: 2275,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "23021:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											"arguments": [
  											],
  											expression: {
  												argumentTypes: [
  												],
  												id: 2270,
  												name: "getRelayHub",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 2313,
  												src: "22997:11:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$__$returns$_t_contract$_IRelayHubELA_$4033_$",
  													typeString: "function () view returns (contract IRelayHubELA)"
  												}
  											},
  											id: 2271,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "22997:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										id: 2272,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "balanceOf",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 3880,
  										src: "22997:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
  											typeString: "function (address) view external returns (uint256)"
  										}
  									},
  									id: 2276,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "22997:38:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								nodeType: "VariableDeclarationStatement",
  								src: "22979:56:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											id: 2281,
  											name: "balance",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2269,
  											src: "23063:7:2",
  											typeDescriptions: {
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											}
  										},
  										{
  											argumentTypes: null,
  											id: 2282,
  											name: "dest",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2256,
  											src: "23072:4:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_uint256",
  												typeString: "uint256"
  											},
  											{
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											id: 2278,
  											name: "relayHub",
  											nodeType: "Identifier",
  											overloadedDeclarations: [
  											],
  											referencedDeclaration: 2264,
  											src: "23045:8:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										id: 2280,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "withdraw",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 3887,
  										src: "23045:17:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_nonpayable$_t_uint256_$_t_address_payable_$returns$__$",
  											typeString: "function (uint256,address payable) external"
  										}
  									},
  									id: 2283,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "23045:32:2",
  									typeDescriptions: {
  										typeIdentifier: "t_tuple$__$",
  										typeString: "tuple()"
  									}
  								},
  								id: 2284,
  								nodeType: "ExpressionStatement",
  								src: "23045:32:2"
  							},
  							{
  								expression: {
  									argumentTypes: null,
  									id: 2285,
  									name: "balance",
  									nodeType: "Identifier",
  									overloadedDeclarations: [
  									],
  									referencedDeclaration: 2269,
  									src: "23094:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								functionReturnParameters: 2262,
  								id: 2286,
  								nodeType: "Return",
  								src: "23087:14:2"
  							}
  						]
  					},
  					documentation: "@dev Withdraw all the GSNReceipient funds\n@param dest This is the arbitrary withdrawal destination address",
  					id: 2288,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  						{
  							"arguments": null,
  							id: 2259,
  							modifierName: {
  								argumentTypes: null,
  								id: 2258,
  								name: "onlyOwner",
  								nodeType: "Identifier",
  								overloadedDeclarations: [
  								],
  								referencedDeclaration: 5030,
  								src: "22894:9:2",
  								typeDescriptions: {
  									typeIdentifier: "t_modifier$__$",
  									typeString: "modifier ()"
  								}
  							},
  							nodeType: "ModifierInvocation",
  							src: "22894:9:2"
  						}
  					],
  					name: "withdrawAll",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2257,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2256,
  								name: "dest",
  								nodeType: "VariableDeclaration",
  								scope: 2288,
  								src: "22865:20:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_address_payable",
  									typeString: "address payable"
  								},
  								typeName: {
  									id: 2255,
  									name: "address",
  									nodeType: "ElementaryTypeName",
  									src: "22865:15:2",
  									stateMutability: "payable",
  									typeDescriptions: {
  										typeIdentifier: "t_address_payable",
  										typeString: "address payable"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22864:22:2"
  					},
  					returnParameters: {
  						id: 2262,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2261,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2288,
  								src: "22913:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2260,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "22913:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "22912:9:2"
  					},
  					scope: 2314,
  					src: "22844:264:2",
  					stateMutability: "nonpayable",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 2301,
  						nodeType: "Block",
  						src: "23169:62:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											"arguments": [
  												{
  													argumentTypes: null,
  													id: 2297,
  													name: "this",
  													nodeType: "Identifier",
  													overloadedDeclarations: [
  													],
  													referencedDeclaration: 11092,
  													src: "23218:4:2",
  													typeDescriptions: {
  														typeIdentifier: "t_contract$_ELAJSStore_$2314",
  														typeString: "contract ELAJSStore"
  													}
  												}
  											],
  											expression: {
  												argumentTypes: [
  													{
  														typeIdentifier: "t_contract$_ELAJSStore_$2314",
  														typeString: "contract ELAJSStore"
  													}
  												],
  												id: 2296,
  												isConstant: false,
  												isLValue: false,
  												isPure: true,
  												lValueRequested: false,
  												nodeType: "ElementaryTypeNameExpression",
  												src: "23210:7:2",
  												typeDescriptions: {
  													typeIdentifier: "t_type$_t_address_$",
  													typeString: "type(address)"
  												},
  												typeName: "address"
  											},
  											id: 2298,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "typeConversion",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "23210:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_address_payable",
  												typeString: "address payable"
  											}
  										],
  										expression: {
  											argumentTypes: null,
  											"arguments": [
  											],
  											expression: {
  												argumentTypes: [
  												],
  												id: 2293,
  												name: "getRelayHub",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 2313,
  												src: "23186:11:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$__$returns$_t_contract$_IRelayHubELA_$4033_$",
  													typeString: "function () view returns (contract IRelayHubELA)"
  												}
  											},
  											id: 2294,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "23186:13:2",
  											typeDescriptions: {
  												typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  												typeString: "contract IRelayHubELA"
  											}
  										},
  										id: 2295,
  										isConstant: false,
  										isLValue: false,
  										isPure: false,
  										lValueRequested: false,
  										memberName: "balanceOf",
  										nodeType: "MemberAccess",
  										referencedDeclaration: 3880,
  										src: "23186:23:2",
  										typeDescriptions: {
  											typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
  											typeString: "function (address) view external returns (uint256)"
  										}
  									},
  									id: 2299,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "functionCall",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "23186:38:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								functionReturnParameters: 2292,
  								id: 2300,
  								nodeType: "Return",
  								src: "23179:45:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2302,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getGSNBalance",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2289,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "23136:2:2"
  					},
  					returnParameters: {
  						id: 2292,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2291,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2302,
  								src: "23160:7:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_uint256",
  									typeString: "uint256"
  								},
  								typeName: {
  									id: 2290,
  									name: "uint256",
  									nodeType: "ElementaryTypeName",
  									src: "23160:7:2",
  									typeDescriptions: {
  										typeIdentifier: "t_uint256",
  										typeString: "uint256"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "23159:9:2"
  					},
  					scope: 2314,
  					src: "23114:117:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "public"
  				},
  				{
  					body: {
  						id: 2312,
  						nodeType: "Block",
  						src: "23297:52:2",
  						statements: [
  							{
  								expression: {
  									argumentTypes: null,
  									"arguments": [
  										{
  											argumentTypes: null,
  											"arguments": [
  											],
  											expression: {
  												argumentTypes: [
  												],
  												id: 2308,
  												name: "_getRelayHub",
  												nodeType: "Identifier",
  												overloadedDeclarations: [
  												],
  												referencedDeclaration: 3575,
  												src: "23327:12:2",
  												typeDescriptions: {
  													typeIdentifier: "t_function_internal_view$__$returns$_t_address_$",
  													typeString: "function () view returns (address)"
  												}
  											},
  											id: 2309,
  											isConstant: false,
  											isLValue: false,
  											isPure: false,
  											kind: "functionCall",
  											lValueRequested: false,
  											names: [
  											],
  											nodeType: "FunctionCall",
  											src: "23327:14:2",
  											typeDescriptions: {
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										}
  									],
  									expression: {
  										argumentTypes: [
  											{
  												typeIdentifier: "t_address",
  												typeString: "address"
  											}
  										],
  										id: 2307,
  										name: "IRelayHubELA",
  										nodeType: "Identifier",
  										overloadedDeclarations: [
  										],
  										referencedDeclaration: 4033,
  										src: "23314:12:2",
  										typeDescriptions: {
  											typeIdentifier: "t_type$_t_contract$_IRelayHubELA_$4033_$",
  											typeString: "type(contract IRelayHubELA)"
  										}
  									},
  									id: 2310,
  									isConstant: false,
  									isLValue: false,
  									isPure: false,
  									kind: "typeConversion",
  									lValueRequested: false,
  									names: [
  									],
  									nodeType: "FunctionCall",
  									src: "23314:28:2",
  									typeDescriptions: {
  										typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  										typeString: "contract IRelayHubELA"
  									}
  								},
  								functionReturnParameters: 2306,
  								id: 2311,
  								nodeType: "Return",
  								src: "23307:35:2"
  							}
  						]
  					},
  					documentation: null,
  					id: 2313,
  					implemented: true,
  					kind: "function",
  					modifiers: [
  					],
  					name: "getRelayHub",
  					nodeType: "FunctionDefinition",
  					parameters: {
  						id: 2303,
  						nodeType: "ParameterList",
  						parameters: [
  						],
  						src: "23257:2:2"
  					},
  					returnParameters: {
  						id: 2306,
  						nodeType: "ParameterList",
  						parameters: [
  							{
  								constant: false,
  								id: 2305,
  								name: "",
  								nodeType: "VariableDeclaration",
  								scope: 2313,
  								src: "23283:12:2",
  								stateVariable: false,
  								storageLocation: "default",
  								typeDescriptions: {
  									typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  									typeString: "contract IRelayHubELA"
  								},
  								typeName: {
  									contractScope: null,
  									id: 2304,
  									name: "IRelayHubELA",
  									nodeType: "UserDefinedTypeName",
  									referencedDeclaration: 4033,
  									src: "23283:12:2",
  									typeDescriptions: {
  										typeIdentifier: "t_contract$_IRelayHubELA_$4033",
  										typeString: "contract IRelayHubELA"
  									}
  								},
  								value: null,
  								visibility: "internal"
  							}
  						],
  						src: "23282:14:2"
  					},
  					scope: 2314,
  					src: "23237:112:2",
  					stateMutability: "view",
  					superFunction: null,
  					visibility: "internal"
  				}
  			],
  			scope: 2315,
  			src: "782:22569:2"
  		}
  	],
  	src: "0:23352:2"
  };
  var bytecode = "";
  var deployedBytecode = "0x6080604052600436106101c1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062f714ce146101c357806301ee810a146101ec5780631fd6dda51461021757806328343c3414610254578063287e72461461027f578063365628a2146102bd5780633c2e8599146102e65780633ffe300e146103115780634102fbf61461033a57806359cb73a4146103655780636729003c146103a2578063715018a6146103df57806374e861d6146103f65780637af9c663146104215780637e03a8241461045e57806380274db7146104875780638129fc1c146104c45780638175d7eb146104db57806383947ea0146105045780638d3178cc146105425780638da5cb5b1461056b5780638f32d59b14610596578063a2ea7c6e146105c1578063ad61ccd5146105fe578063b467949b14610629578063bc41c3dd14610652578063c2309bf91461067b578063c4d66de8146106b8578063d2c5ce31146106e1578063d887f1051461070c578063e06e0e221461074a578063e3c504e414610773578063ed90cb37146107b0578063f201fe2a146107d9578063f2fde38b14610816578063fa09e6301461083f575b005b3480156101cf57600080fd5b506101ea60048036036101e59190810190614e05565b61087c565b005b3480156101f857600080fd5b5061020161095e565b60405161020e9190615cd6565b60405180910390f35b34801561022357600080fd5b5061023e6004803603610239919081019061496e565b610975565b60405161024b9190615814565b60405180910390f35b34801561026057600080fd5b50610269610992565b60405161027691906157f2565b60405180910390f35b34801561028b57600080fd5b506102a660048036036102a1919081019061496e565b6109d0565b6040516102b49291906157c9565b60405180910390f35b3480156102c957600080fd5b506102e460048036036102df9190810190614c1e565b610a26565b005b3480156102f257600080fd5b506102fb610b3e565b6040516103089190615c39565b60405180910390f35b34801561031d57600080fd5b5061033860048036036103339190810190614b8f565b610bf1565b005b34801561034657600080fd5b5061034f610dc5565b60405161035c919061582f565b60405180910390f35b34801561037157600080fd5b5061038c6004803603610387919081019061496e565b610dec565b6040516103999190615c39565b60405180910390f35b3480156103ae57600080fd5b506103c960048036036103c4919081019061496e565b610e04565b6040516103d6919061582f565b60405180910390f35b3480156103eb57600080fd5b506103f4610e47565b005b34801561040257600080fd5b5061040b610f51565b6040516104189190615793565b60405180910390f35b34801561042d57600080fd5b50610448600480360361044391908101906149d3565b610f60565b6040516104559190615814565b60405180910390f35b34801561046a57600080fd5b5061048560048036036104809190810190614b18565b610fef565b005b34801561049357600080fd5b506104ae60048036036104a99190810190614cc5565b611082565b6040516104bb919061582f565b60405180910390f35b3480156104d057600080fd5b506104d9611150565b005b3480156104e757600080fd5b5061050260048036036104fd9190810190614a66565b611254565b005b34801561051057600080fd5b5061052b6004803603610526919081019061486e565b611293565b604051610539929190615ca6565b60405180910390f35b34801561054e57600080fd5b5061056960048036036105649190810190614ab5565b611312565b005b34801561057757600080fd5b506105806113ac565b60405161058d9190615793565b60405180910390f35b3480156105a257600080fd5b506105ab6113d6565b6040516105b89190615814565b60405180910390f35b3480156105cd57600080fd5b506105e860048036036105e3919081019061496e565b611435565b6040516105f59190615c17565b60405180910390f35b34801561060a57600080fd5b50610613611466565b6040516106209190615895565b60405180910390f35b34801561063557600080fd5b50610650600480360361064b9190810190614b18565b6114a3565b005b34801561065e57600080fd5b5061067960048036036106749190810190614db3565b6116ba565b005b34801561068757600080fd5b506106a2600480360361069d919081019061496e565b611729565b6040516106af91906157f2565b60405180910390f35b3480156106c457600080fd5b506106df60048036036106da919081019061481c565b6117a2565b005b3480156106ed57600080fd5b506106f661194c565b6040516107039190615793565b60405180910390f35b34801561071857600080fd5b50610733600480360361072e919081019061496e565b611972565b604051610741929190615c54565b60405180910390f35b34801561075657600080fd5b50610771600480360361076c9190810190614d0a565b611a07565b005b34801561077f57600080fd5b5061079a6004803603610795919081019061496e565b611ad5565b6040516107a79190615873565b60405180910390f35b3480156107bc57600080fd5b506107d760048036036107d29190810190614997565b611b48565b005b3480156107e557600080fd5b5061080060048036036107fb9190810190614997565b611c00565b60405161080d9190615814565b60405180910390f35b34801561082257600080fd5b5061083d6004803603610838919081019061481c565b611c20565b005b34801561084b57600080fd5b5061086660048036036108619190810190614845565b611c75565b6040516108739190615c39565b60405180910390f35b6108846113d6565b15156108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc90615a77565b60405180910390fd5b60006108cf611e0e565b90508073ffffffffffffffffffffffffffffffffffffffff1662f714ce84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610927929190615c7d565b600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b50505050505050565b606960009054906101000a900464ffffffffff1681565b600061098b82606e611e1d90919063ffffffff16565b9050919050565b60606109cb7f736368656d61732e7075626c69632e7461626c65730000000000000000000000600102606e611e9490919063ffffffff16565b905090565b60008060006109e984606e611eb490919063ffffffff16565b600190049050807c0100000000000000000000000000000000000000000000000000000000029150602081908060020a8204915050925050915091565b610a2e6113d6565b1515610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6690615a77565b60405180910390fd5b6000600102606a600086815260200190815260200160002054141515610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190615b37565b60405180910390fd5b6000809050610ada858583611ed4565b610b137f736368656d61732e7075626c69632e7461626c6573000000000000000000000060010287606e611f809092919063ffffffff16565b50610b2885606b6120ab90919063ffffffff16565b50610b3586868585610f60565b50505050505050565b6000610b48611e0e565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b9c91906157ae565b60206040518083038186803b158015610bb457600080fd5b505afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bec9190810190614ddc565b905090565b84600080610bfe83611972565b91509150600082111515610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90615957565b60405180910390fd5b6001821180610c61575060011515610c5d6113d6565b1515145b80610c9e5750610c6f6120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd690615a37565b60405180910390fd5b6000610ceb888a61211f565b90506000610cf9888361211f565b905060001515610d1382606e611e1d90919063ffffffff16565b1515141515610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e90615ab7565b60405180910390fd5b610d5f61217c565b610d758a88606b6121bf9092919063ffffffff16565b5060001515610d8e83606e611e1d90919063ffffffff16565b15151415610da257610da182888c61220a565b5b610db88187606e6125609092919063ffffffff16565b5050505050505050505050565b7f736368656d61732e7075626c69632e7461626c6573000000000000000000000060010281565b60686020528060005260406000206000915090505481565b6000610e1a82606e611e1d90919063ffffffff16565b15610e3a57610e3382606e611eb490919063ffffffff16565b9050610e42565b600060010290505b919050565b610e4f6113d6565b1515610e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8790615a77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000610f5b61268b565b905090565b6000610f6a6113d6565b1515610fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa290615a77565b60405180910390fd5b610fb36144f7565b610fbe8685856126bc565b90506060610fcb82612739565b9050610fe38682606e6125609092919063ffffffff16565b92505050949350505050565b6000610ffb858761211f565b90506000611009858361211f565b905061101787878487612809565b61101f61217c565b6110358184606e612a649092919063ffffffff16565b508285887f73f74243127530ba96dc00b266dfa2b8da17d2b0489b55f8f947074436f23b71876110636120cb565b60405161107192919061584a565b60405180910390a450505050505050565b600061108c610f51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f2906158d7565b60405180910390fd5b61114883838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612b8f565b905092915050565b600060019054906101000a900460ff168061116f575061116e612b96565b5b8061118657506000809054906101000a900460ff16155b15156111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be90615a97565b60405180910390fd5b60008060019054906101000a900460ff161590508015611217576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611220336117a2565b611228612bad565b611230612ca0565b80156112515760008060016101000a81548160ff0219169083151502179055505b50565b6000611260838561211f565b905061126e84828585612d02565b61127661217c565b61128c8483606b612f569092919063ffffffff16565b5050505050565b6000606060006112a1612fa1565b9050600060686000838152602001908152602001600020549050606960009054906101000a900464ffffffffff1664ffffffffff16811015156112f3576112e8600261325c565b935093505050611302565b6112fb61327e565b9350935050505b9b509b9950505050505050505050565b600061131e848661211f565b9050600061132c848361211f565b905061133a86838786612d02565b61134261217c565b600061135882606e6132a390919063ffffffff16565b9050600115158115151415156113a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139a90615a57565b60405180910390fd5b50505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114196120cb565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b61143d6144f7565b606061145383606e61331a90919063ffffffff16565b905061145e8161333a565b915050919050565b60606040805190810160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b846000806114b083611972565b915091506000821115156114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090615957565b60405180910390fd5b600182118061151357506001151561150f6113d6565b1515145b8061155057506115216120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515611591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158890615a37565b60405180910390fd5b600061159d888a61211f565b905060006115ab888361211f565b9050600015156115c582606e611e1d90919063ffffffff16565b1515141515611609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160090615ab7565b60405180910390fd5b61161161217c565b6116278a88606b6121bf9092919063ffffffff16565b506000151561164083606e611e1d90919063ffffffff16565b151514156116545761165382888c61220a565b5b61166a8187606e612a649092919063ffffffff16565b5085888b7f73f74243127530ba96dc00b266dfa2b8da17d2b0489b55f8f947074436f23b718a6116986120cb565b6040516116a692919061584a565b60405180910390a450505050505050505050565b6116c26113d6565b1515611703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fa90615a77565b60405180910390fd5b80606960006101000a81548164ffffffffff021916908364ffffffffff16021790555050565b60606001151561174383606b6133e390919063ffffffff16565b1515141515611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90615b77565b60405180910390fd5b61179b82606b61340390919063ffffffff16565b9050919050565b600060019054906101000a900460ff16806117c157506117c0612b96565b5b806117d857506000809054906101000a900460ff16155b1515611819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181090615a97565b60405180910390fd5b60008060019054906101000a900460ff161590508015611869576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380156119485760008060016101000a81548160ff0219169083151502179055505b5050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600102606a6000858152602001908152602001600020541115156119d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c790615bd7565b60405180910390fd5b6000606a6000858152602001908152602001600020546001900490508060ff169250600881908060020a8204915050915050915091565b611a0f610f51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a75906158d7565b60405180910390fd5b611ace85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050848484613472565b5050505050565b6060611aeb82606e611e1d90919063ffffffff16565b15611b0b57611b0482606e61331a90919063ffffffff16565b9050611b43565b60006040519080825280601f01601f191660200182016040528015611b3f5781602001600182028038833980820191505090505b5090505b919050565b611b506113d6565b1515611b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8890615a77565b60405180910390fd5b6000600102606a600083815260200190815260200160002081905550611be67f736368656d61732e7075626c69632e7461626c6573000000000000000000000060010283606e6134789092919063ffffffff16565b50611bfb81606b61349b90919063ffffffff16565b505050565b6000611c188383606b6134d49092919063ffffffff16565b905092915050565b611c286113d6565b1515611c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6090615a77565b60405180910390fd5b611c728161351f565b50565b6000611c7f6113d6565b1515611cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb790615a77565b60405180910390fd5b6000611cca611e0e565b90506000611cd6611e0e565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d2a91906157ae565b60206040518083038186803b158015611d4257600080fd5b505afa158015611d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d7a9190810190614ddc565b90508173ffffffffffffffffffffffffffffffffffffffff1662f714ce82866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dd2929190615c7d565b600060405180830381600087803b158015611dec57600080fd5b505af1158015611e00573d6000803e3d6000fd5b505050508092505050919050565b6000611e1861268b565b905090565b6000611e35828460000161365190919063ffffffff16565b80611e525750611e51828460030161367190919063ffffffff16565b5b80611e6f5750611e6e82846006016133e390919063ffffffff16565b5b80611e8c5750611e8b828460090161369190919063ffffffff16565b5b905092915050565b6060611eac828460060161340390919063ffffffff16565b905092915050565b6000611ecc82846000016136b190919063ffffffff16565b905092915050565b611edc6113d6565b1515611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1490615a77565b60405180910390fd5b60008260ff168117905060088273ffffffffffffffffffffffffffffffffffffffff169060020a0273ffffffffffffffffffffffffffffffffffffffff168117905080600102606a60008681526020019081526020016000208190555050505050565b6000611f98838560000161365190919063ffffffff16565b151515611fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd1906159b7565b60405180910390fd5b611ff0838560030161367190919063ffffffff16565b151515612032576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612029906159b7565b60405180910390fd5b612048838560090161369190919063ffffffff16565b15151561208a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612081906159b7565b60405180910390fd5b6120a28383866006016121bf9092919063ffffffff16565b90509392505050565b60006120c3828460010161371c90919063ffffffff16565b905092915050565b60006120d561268b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121115733905061211c565b612119613788565b90505b90565b60006060604080519080825280601f01601f1916602001820160405280156121565781602001600182028038833980820191505090505b509050836040820152826020820152600081805190602001209050809250505092915050565b6000612186612fa1565b90506000606860008381526020019081526020016000205490506001810160686000848152602001908152602001600020819055505050565b60006121cb84846133e3565b156121fe576121f78285600001600086815260200190815260200160002061371c90919063ffffffff16565b9050612203565b600090505b9392505050565b6000151561222284606e611e1d90919063ffffffff16565b1515141515612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225d906159d7565b60405180910390fd5b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392d66313426040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122e09190615c39565b60206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123309190810190614d8a565b90506000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a324ad24426040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123ab9190615c39565b60206040518083038186803b1580156123c357600080fd5b505afa1580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123fb9190810190614e41565b90506000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c72840426040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124769190615c39565b60206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124c69190810190614e41565b90508261ffff168417935060108260ff169060020a028417935060188160ff169060020a02841793506000847c0100000000000000000000000000000000000000000000000000000000029050602061251d6120cb565b73ffffffffffffffffffffffffffffffffffffffff169060020a02851794506125558886600102606e612a649092919063ffffffff16565b505050505050505050565b6000612578838560000161365190919063ffffffff16565b1515156125ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b1906159b7565b60405180910390fd5b6125d083856006016133e390919063ffffffff16565b151515612612576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612609906159b7565b60405180910390fd5b612628838560090161369190919063ffffffff16565b15151561266a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612661906159b7565b60405180910390fd5b6126828383866003016138009092919063ffffffff16565b90509392505050565b6000807f06b7792c761dcc05af1761f0315ce8b01ac39c16cc934eb0b2f7a8e71414f2626001029050805491505090565b6126c46144f7565b8151835114151561270a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612701906159f7565b60405180910390fd5b6127126144f7565b84816000018181525050612726848461384b565b8160200181905250809150509392505050565b6060600061274683613961565b90506060816040519080825280601f01601f19166020018201604052801561277d5781602001600182028038833980820191505090505b5090506127998282866000015161397c9092919063ffffffff16565b6020820391506127b8828286602001516139869092919063ffffffff16565b91506000821415156127ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f6906158b7565b60405180910390fd5b8092505050919050565b600115156128238583606b6134d49092919063ffffffff16565b1515141515612867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285e90615bb7565b60405180910390fd5b60008061287386611972565b915091506000821115156128bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b390615917565b60405180910390fd5b60018211806128d65750600115156128d26113d6565b1515145b8061291357506128e46120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515612954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294b90615997565b60405180910390fd5b600282101515612a5c57600061297485606e611eb490919063ffffffff16565b9050600060208260019004908060020a820491505090506129936120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129cb57612a59565b600115156129d76113d6565b15151480612a1757506129e86120cb565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1515612a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4f90615a17565b60405180910390fd5b5b50505b505050505050565b6000612a7c838560030161367190919063ffffffff16565b151515612abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab5906159b7565b60405180910390fd5b612ad483856006016133e390919063ffffffff16565b151515612b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0d906159b7565b60405180910390fd5b612b2c838560090161369190919063ffffffff16565b151515612b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b65906159b7565b60405180910390fd5b612b86838386600001613a439092919063ffffffff16565b90509392505050565b6000919050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff1680612bcc5750612bcb612b96565b5b80612be357506000809054906101000a900460ff16155b1515612c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1b90615a97565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c74576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c7c613a7e565b8015612c9d5760008060016101000a81548160ff0219169083151502179055505b50565b6103e8606960006101000a81548164ffffffffff021916908364ffffffffff160217905550612cff7f736368656d61732e7075626c69632e7461626c657300000000000000000000006001026000606e613b869092919063ffffffff16565b50565b60011515612d1c8583606b6134d49092919063ffffffff16565b1515141515612d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5790615b57565b60405180910390fd5b600080612d6c86611972565b91509150600082111515612db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dac906158f7565b60405180910390fd5b6001821180612dcf575060011515612dcb6113d6565b1515145b80612e0c5750612ddd6120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515612e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4490615ad7565b60405180910390fd5b600282101515612f4e57612e5f6113d6565b80612e9c5750612e6d6120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15612ea657612f4d565b6000612ebc86606e611eb490919063ffffffff16565b9050600060208260019004908060020a82049150509050612edb6120cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515612f4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4190615bf7565b60405180910390fd5b50505b5b505050505050565b6000612f6284846133e3565b15612f9557612f8e82856000016000868152602001908152602001600020613e6e90919063ffffffff16565b9050612f9a565b600090505b9392505050565b6000806000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392d66313426040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161301d9190615c39565b60206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061306d9190810190614d8a565b90506000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a324ad24426040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016130e89190615c39565b60206040518083038186803b15801561310057600080fd5b505afa158015613114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131389190810190614e41565b90506000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166365c72840426040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131b39190615c39565b60206040518083038186803b1580156131cb57600080fd5b505afa1580156131df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132039190810190614e41565b90508261ffff168417935060108260ff169060020a028417935060188160ff169060020a028417935083604051602001808281526020019150506040516020818303038152906040528051906020012094505050505090565b6000606082600b01602060405190810160405280600081525091509150915091565b6000606061329b6020604051908101604052806000815250613f67565b915091509091565b60006132bb8284600001613f7790919063ffffffff16565b806132d857506132d78284600301613fc990919063ffffffff16565b5b806132f557506132f4828460060161349b90919063ffffffff16565b5b806133125750613311828460090161402390919063ffffffff16565b5b905092915050565b6060613332828460030161405c90919063ffffffff16565b905092915050565b6133426144f7565b6000825190506133506144f7565b613363828561415f90919063ffffffff16565b816000018181525050602082039150613385828561416d90919063ffffffff16565b8191508260200181945082905250506000821415156133d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d0906158b7565b60405180910390fd5b8092505050919050565b60006133fb828460010161427890919063ffffffff16565b905092915050565b606061340f83836133e3565b156134385761343183600001600084815260200190815260200160002061429b565b905061346c565b60006040519080825280602002602001820160405280156134685781602001602082028038833980820191505090505b5090505b92915050565b50505050565b6000613492838386600601612f569092919063ffffffff16565b90509392505050565b60006134a783836133e3565b156134c9576134c28284600101613e6e90919063ffffffff16565b90506134ce565b600090505b92915050565b60006134e084846133e3565b156135135761350c8285600001600086815260200190815260200160002061427890919063ffffffff16565b9050613518565b600090505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161358890615937565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000613669828460010161427890919063ffffffff16565b905092915050565b6000613689828460010161427890919063ffffffff16565b905092915050565b60006136a9828460010161427890919063ffffffff16565b905092915050565b60006136bd8383613651565b15156136fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136f590615b97565b60405180910390fd5b82600001600083815260200190815260200160002054905092915050565b60006137288383614278565b151561377d578260010182908060018154018082558091505090600182039060005260206000200160009091929091909150558360000160008481526020019081526020016000208190555060019050613782565b600090505b92915050565b600060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff81830151169250829250505090565b600081846000016000858152602001908152602001600020908051906020019061382b929190614514565b50613842838560010161371c90919063ffffffff16565b90509392505050565b606081518351141515613893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161388a906159f7565b60405180910390fd5b606083516040519080825280602002602001820160405280156138d057816020015b6138bd614594565b8152602001906001900390816138b55790505b50905060008090505b8451811015613956576138ea6145b4565b85828151811015156138f857fe5b90602001906020020151816000018181525050848281518110151561391957fe5b9060200190602002015181602001818152505080838381518110151561393b57fe5b906020019060200201819052505080806001019150506138d9565b508091505092915050565b60006139708260200151614338565b60208001019050919050565b8282820152505050565b6000808390506139a9818461399a88614338565b6143469092919063ffffffff16565b60208103905060008090505b8551811015613a37576139ee828588848151811015156139d157fe5b906020019060200201516000015161397c9092919063ffffffff16565b602082039150613a2482858884815181101515613a0757fe5b906020019060200201516020015161397c9092919063ffffffff16565b60208203915080806001019150506139b5565b50809150509392505050565b60008184600001600085815260200190815260200160002081905550613a75838560010161371c90919063ffffffff16565b90509392505050565b600060019054906101000a900460ff1680613a9d5750613a9c612b96565b5b80613ab457506000809054906101000a900460ff16155b1515613af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613aec90615a97565b60405180910390fd5b60008060019054906101000a900460ff161590508015613b45576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b613b6273d216153c06e857cd7f72665e0af1d7d82172f494614350565b8015613b835760008060016101000a81548160ff0219169083151502179055505b50565b60006004826003811115613b9657fe5b60ff16101515613bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bd290615b17565b60405180910390fd5b613bf1838560000161365190919063ffffffff16565b151515613c33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c2a906159b7565b60405180910390fd5b613c49838560030161367190919063ffffffff16565b151515613c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c82906159b7565b60405180910390fd5b613ca183856006016133e390919063ffffffff16565b151515613ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cda906159b7565b60405180910390fd5b613cf9838560090161369190919063ffffffff16565b151515613d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d32906159b7565b60405180910390fd5b816003811115613d4757fe5b60006003811115613d5457fe5b1415613d7757613d7083856006016120ab90919063ffffffff16565b9050613e67565b816003811115613d8357fe5b60016003811115613d9057fe5b1415613db357613dac83856009016144c990919063ffffffff16565b9050613e67565b816003811115613dbf57fe5b60026003811115613dcc57fe5b1415613df557613dee83600060010286600001613a439092919063ffffffff16565b9050613e67565b816003811115613e0157fe5b600380811115613e0d57fe5b1415613e6657613e5f8360006040519080825280601f01601f191660200182016040528015613e4b5781602001600182028038833980820191505090505b50866003016138009092919063ffffffff16565b9050613e67565b5b9392505050565b6000613e7a8383614278565b15613f5c5760006001846000016000858152602001908152602001600020540390506000600185600101805490500390508181141515613f135760008560010182815481101515613ec757fe5b90600052602060002001549050808660010184815481101515613ee657fe5b90600052602060002001819055506001830186600001600083815260200190815260200160002081905550505b84600001600085815260200190815260200160002060009055846001018054801515613f3b57fe5b60019003818190600052602060002001600090559055600192505050613f61565b600090505b92915050565b6000606060008391509150915091565b6000613f838383613651565b15613fbe5782600001600083815260200190815260200160002060009055613fb78284600101613e6e90919063ffffffff16565b9050613fc3565b600090505b92915050565b6000613fd58383613671565b15614018578260000160008381526020019081526020016000206000613ffb91906145d4565b6140118284600101613e6e90919063ffffffff16565b905061401d565b600090505b92915050565b600061402f8383613691565b156140515761404a8284600101613e6e90919063ffffffff16565b9050614056565b600090505b92915050565b60606140688383613671565b15156140a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140a090615b97565b60405180910390fd5b8260000160008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141525780601f1061412757610100808354040283529160200191614152565b820191906000526020600020905b81548152906001019060200180831161413557829003601f168201915b5050505050905092915050565b600081830151905092915050565b6060600080839050600061418a82876144e990919063ffffffff16565b905060208203915060006040828115156141a057fe5b0490506060816040519080825280602002602001820160405280156141df57816020015b6141cc614594565b8152602001906001900390816141c45790505b50905060008090505b82811015614266576141f86145b4565b61420b868b61415f90919063ffffffff16565b81600001818152505060208603955061422d868b61415f90919063ffffffff16565b81602001818152505060208603955080838381518110151561424b57fe5b906020019060200201819052505080806001019150506141e8565b50808495509550505050509250929050565b600080836000016000848152602001908152602001600020541415905092915050565b60608082600101805490506040519080825280602002602001820160405280156142d45781602001602082028038833980820191505090505b50905060005b836001018054905081101561432e5783600101818154811015156142fa57fe5b9060005260206000200154828281518110151561431357fe5b906020019060200201818152505080806001019150506142da565b5080915050919050565b600060408251029050919050565b8282820152505050565b600061435a61268b565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156143ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143c590615af7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561443f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161443690615977565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e860405160405180910390a360007f06b7792c761dcc05af1761f0315ce8b01ac39c16cc934eb0b2f7a8e71414f2626001029050828155505050565b60006144e1828460010161371c90919063ffffffff16565b905092915050565b600081830151905092915050565b604080519081016040528060008019168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061455557805160ff1916838001178555614583565b82800160010185558215614583579182015b82811115614582578251825591602001919060010190614567565b5b509050614590919061461c565b5090565b604080519081016040528060008019168152602001600080191681525090565b604080519081016040528060008019168152602001600080191681525090565b50805460018160011615610100020316600290046000825580601f106145fa5750614619565b601f016020900490600052602060002090810190614618919061461c565b5b50565b61463e91905b8082111561463a576000816000905550600101614622565b5090565b90565b600061464d8235615e73565b905092915050565b60006146618235615e85565b905092915050565b600082601f830112151561467c57600080fd5b813561468f61468a82615d1e565b615cf1565b915081818352602084019350602081019050838560208402820111156146b457600080fd5b60005b838110156146e457816146ca8882614702565b8452602084019350602083019250506001810190506146b7565b5050505092915050565b60006146fa8235615e97565b905092915050565b600061470e8235615ea3565b905092915050565b60008083601f840112151561472a57600080fd5b8235905067ffffffffffffffff81111561474357600080fd5b60208301915083600182028301111561475b57600080fd5b9250929050565b600082601f830112151561477557600080fd5b813561478861478382615d46565b615cf1565b915080825260208301602083018583830111156147a457600080fd5b6147af838284615f08565b50505092915050565b60006147c48251615ead565b905092915050565b60006147d88235615ebb565b905092915050565b60006147ec8251615ebb565b905092915050565b60006148008235615ec5565b905092915050565b60006148148251615ec5565b905092915050565b60006020828403121561482e57600080fd5b600061483c84828501614641565b91505092915050565b60006020828403121561485757600080fd5b600061486584828501614655565b91505092915050565b60008060008060008060008060008060006101208c8e03121561489057600080fd5b600061489e8e828f01614641565b9b505060206148af8e828f01614641565b9a505060408c013567ffffffffffffffff8111156148cc57600080fd5b6148d88e828f01614716565b995099505060606148eb8e828f016147cc565b97505060806148fc8e828f016147cc565b96505060a061490d8e828f016147cc565b95505060c061491e8e828f016147cc565b94505060e08c013567ffffffffffffffff81111561493b57600080fd5b6149478e828f01614716565b935093505061010061495b8e828f016147cc565b9150509295989b509295989b9093969950565b60006020828403121561498057600080fd5b600061498e84828501614702565b91505092915050565b600080604083850312156149aa57600080fd5b60006149b885828601614702565b92505060206149c985828601614702565b9150509250929050565b600080600080608085870312156149e957600080fd5b60006149f787828801614702565b9450506020614a0887828801614702565b935050604085013567ffffffffffffffff811115614a2557600080fd5b614a3187828801614669565b925050606085013567ffffffffffffffff811115614a4e57600080fd5b614a5a87828801614669565b91505092959194509250565b600080600060608486031215614a7b57600080fd5b6000614a8986828701614702565b9350506020614a9a86828701614702565b9250506040614aab86828701614702565b9150509250925092565b60008060008060808587031215614acb57600080fd5b6000614ad987828801614702565b9450506020614aea87828801614702565b9350506040614afb87828801614702565b9250506060614b0c87828801614702565b91505092959194509250565b600080600080600060a08688031215614b3057600080fd5b6000614b3e88828901614702565b9550506020614b4f88828901614702565b9450506040614b6088828901614702565b9350506060614b7188828901614702565b9250506080614b8288828901614702565b9150509295509295909350565b600080600080600060a08688031215614ba757600080fd5b6000614bb588828901614702565b9550506020614bc688828901614702565b9450506040614bd788828901614702565b9350506060614be888828901614702565b925050608086013567ffffffffffffffff811115614c0557600080fd5b614c1188828901614762565b9150509295509295909350565b600080600080600060a08688031215614c3657600080fd5b6000614c4488828901614702565b9550506020614c5588828901614702565b9450506040614c66888289016147f4565b935050606086013567ffffffffffffffff811115614c8357600080fd5b614c8f88828901614669565b925050608086013567ffffffffffffffff811115614cac57600080fd5b614cb888828901614669565b9150509295509295909350565b60008060208385031215614cd857600080fd5b600083013567ffffffffffffffff811115614cf257600080fd5b614cfe85828601614716565b92509250509250929050565b600080600080600060808688031215614d2257600080fd5b600086013567ffffffffffffffff811115614d3c57600080fd5b614d4888828901614716565b95509550506020614d5b888289016146ee565b9350506040614d6c888289016147cc565b9250506060614d7d88828901614702565b9150509295509295909350565b600060208284031215614d9c57600080fd5b6000614daa848285016147b8565b91505092915050565b600060208284031215614dc557600080fd5b6000614dd3848285016147cc565b91505092915050565b600060208284031215614dee57600080fd5b6000614dfc848285016147e0565b91505092915050565b60008060408385031215614e1857600080fd5b6000614e26858286016147cc565b9250506020614e3785828601614655565b9150509250929050565b600060208284031215614e5357600080fd5b6000614e6184828501614808565b91505092915050565b614e7381615ed2565b82525050565b614e8281615de4565b82525050565b614e9181615dd2565b82525050565b6000614ea282615d8c565b808452602084019350614eb483615d72565b60005b82811015614ee657614eca868351614f5c565b614ed382615db8565b9150602086019550600181019050614eb7565b50849250505092915050565b6000614efd82615d97565b808452602084019350614f0f83615d7f565b60005b82811015614f4157614f25868351615709565b614f2e82615dc5565b9150604086019550600181019050614f12565b50849250505092915050565b614f5681615df6565b82525050565b614f6581615e02565b82525050565b614f7481615e0c565b82525050565b6000614f8582615da2565b808452614f99816020860160208601615f17565b614fa281615f4a565b602085010191505092915050565b6000614fbb82615dad565b808452614fcf816020860160208601615f17565b614fd881615f4a565b602085010191505092915050565b6000601c82527f456e636f64696e67204572726f723a206f666673657420213d20302e000000006020830152604082019050919050565b6000602682527f47534e426f756e636572426173653a2063616c6c6572206973206e6f7420526560208301527f6c617948756200000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601f82527f43616e6e6f742044454c4554452066726f6d2073797374656d207461626c65006020830152604082019050919050565b6000601a82527f43616e6e6f74205550444154452073797374656d207461626c650000000000006020830152604082019050919050565b6000602682527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208301527f64647265737300000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601f82527f43616e6e6f7420494e5345525420696e746f2073797374656d207461626c65006020830152604082019050919050565b6000602b82527f47534e436f6e746578743a206e65772052656c6179487562206973207468652060208301527f63757272656e74206f6e650000000000000000000000000000000000000000006040830152606082019050919050565b6000602e82527f4f6e6c79206f776e65722f64656c65676174652063616e20555044415445206960208301527f6e746f2074686973207461626c650000000000000000000000000000000000006040830152606082019050919050565b6000602082527f4572726f723a206b65792065786973747320696e206f7468657220646963742e6020830152604082019050919050565b6000601582527f726f7720616c726561647920686173206f776e657200000000000000000000006020830152604082019050919050565b6000601082527f4572726f7220616c69676e6d656e742e000000000000000000000000000000006020830152604082019050919050565b6000603982527f4e6f7420726f774f776e6572206f72206f776e65722f64656c6567617465206660208301527f6f722055504441544520696e746f2074686973207461626c65000000000000006040830152606082019050919050565b6000602e82527f4f6e6c79206f776e65722f64656c65676174652063616e20494e53455254206960208301527f6e746f2074686973207461626c650000000000000000000000000000000000006040830152606082019050919050565b6000601282527f6572726f722072656d6f76696e67206b657900000000000000000000000000006020830152604082019050919050565b6000602082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726020830152604082019050919050565b6000602e82527f436f6e747261637420696e7374616e63652068617320616c726561647920626560208301527f656e20696e697469616c697a65640000000000000000000000000000000000006040830152606082019050919050565b6000601782527f69642b6669656c6420616c7265616479206578697374730000000000000000006020830152604082019050919050565b6000602e82527f4f6e6c79206f776e65722f64656c65676174652063616e2044454c455445206660208301527f726f6d2074686973207461626c650000000000000000000000000000000000006040830152606082019050919050565b6000602c82527f47534e436f6e746578743a206e65772052656c6179487562206973207468652060208301527f7a65726f206164647265737300000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f496e76616c6964207461626c65207479706521000000000000000000000000006020830152604082019050919050565b6000601482527f5461626c6520616c7265616479206578697374730000000000000000000000006020830152604082019050919050565b6000601082527f696420646f65736e2774206578697374000000000000000000000000000000006020830152604082019050919050565b6000601182527f7461626c65206e6f7420637265617465640000000000000000000000000000006020830152604082019050919050565b6000601382527f4b657920646f6573206e6f7420657869737421000000000000000000000000006020830152604082019050919050565b6000601c82527f696420646f65736e27742065786973742c2075736520494e53455254000000006020830152604082019050919050565b6000601482527f7461626c6520646f6573206e6f742065786973740000000000000000000000006020830152604082019050919050565b6000601782527f53656e646572206e6f74206f776e6572206f6620726f770000000000000000006020830152604082019050919050565b60408201600082015161571f6000850182614f5c565b5060208201516157326020850182614f5c565b50505050565b60006040830160008301516157506000860182614f5c565b50602083015184820360208601526157688282614ef2565b9150508091505092915050565b61577e81615e58565b82525050565b61578d81615e62565b82525050565b60006020820190506157a86000830184614e88565b92915050565b60006020820190506157c36000830184614e6a565b92915050565b60006040820190506157de6000830185614e88565b6157eb6020830184614f6b565b9392505050565b6000602082019050818103600083015261580c8184614e97565b905092915050565b60006020820190506158296000830184614f4d565b92915050565b60006020820190506158446000830184614f5c565b92915050565b600060408201905061585f6000830185614f5c565b61586c6020830184614e88565b9392505050565b6000602082019050818103600083015261588d8184614f7a565b905092915050565b600060208201905081810360008301526158af8184614fb0565b905092915050565b600060208201905081810360008301526158d081614fe6565b9050919050565b600060208201905081810360008301526158f08161501d565b9050919050565b600060208201905081810360008301526159108161507a565b9050919050565b60006020820190508181036000830152615930816150b1565b9050919050565b60006020820190508181036000830152615950816150e8565b9050919050565b6000602082019050818103600083015261597081615145565b9050919050565b600060208201905081810360008301526159908161517c565b9050919050565b600060208201905081810360008301526159b0816151d9565b9050919050565b600060208201905081810360008301526159d081615236565b9050919050565b600060208201905081810360008301526159f08161526d565b9050919050565b60006020820190508181036000830152615a10816152a4565b9050919050565b60006020820190508181036000830152615a30816152db565b9050919050565b60006020820190508181036000830152615a5081615338565b9050919050565b60006020820190508181036000830152615a7081615395565b9050919050565b60006020820190508181036000830152615a90816153cc565b9050919050565b60006020820190508181036000830152615ab081615403565b9050919050565b60006020820190508181036000830152615ad081615460565b9050919050565b60006020820190508181036000830152615af081615497565b9050919050565b60006020820190508181036000830152615b10816154f4565b9050919050565b60006020820190508181036000830152615b3081615551565b9050919050565b60006020820190508181036000830152615b5081615588565b9050919050565b60006020820190508181036000830152615b70816155bf565b9050919050565b60006020820190508181036000830152615b90816155f6565b9050919050565b60006020820190508181036000830152615bb08161562d565b9050919050565b60006020820190508181036000830152615bd081615664565b9050919050565b60006020820190508181036000830152615bf08161569b565b9050919050565b60006020820190508181036000830152615c10816156d2565b9050919050565b60006020820190508181036000830152615c318184615738565b905092915050565b6000602082019050615c4e6000830184615775565b92915050565b6000604082019050615c696000830185615775565b615c766020830184614e88565b9392505050565b6000604082019050615c926000830185615775565b615c9f6020830184614e79565b9392505050565b6000604082019050615cbb6000830185615775565b8181036020830152615ccd8184614f7a565b90509392505050565b6000602082019050615ceb6000830184615784565b92915050565b6000604051905081810181811067ffffffffffffffff82111715615d1457600080fd5b8060405250919050565b600067ffffffffffffffff821115615d3557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615d5d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000615ddd82615e38565b9050919050565b6000615def82615e38565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b6000615e7e82615e38565b9050919050565b6000615e9082615e38565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615edd82615ee4565b9050919050565b6000615eef82615ef6565b9050919050565b6000615f0182615e38565b9050919050565b82818337600083830152505050565b60005b83811015615f35578082015181840152602081019050615f1a565b83811115615f44576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058201d5f3d6ec07f30d723f65e499d850bfa669904f053e07221879cfbd616a0c2e96c6578706572696d656e74616cf50037";
  var compiler = {
  	name: "solc",
  	version: "0.5.0+commit.1d4f565a.Emscripten.clang",
  	optimizer: {
  		enabled: false,
  		runs: 200
  	},
  	evmVersion: "byzantium"
  };
  var networks = {
  	"3": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xb9A7C26DEA47Fc965f5c5311dd5618C0c6B97f13",
  		updated_at: 1587218898302
  	},
  	"1585998008507": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC",
  		updated_at: 1586000828148
  	},
  	"1586011004637": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xc22Ffa318051d8aF4E5f2E2732d7049486fcE093",
  		updated_at: 1586076696505
  	},
  	"1586077022249": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xf5288515FD1394B814e38293f41dC22ad8085532",
  		updated_at: 1586078222281
  	},
  	"1586078282048": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xBc53027c52B0Ee6ad90347b8D03A719f30d9d7aB",
  		updated_at: 1586079473220
  	},
  	"1586220713610": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x32B283164B5A283A01208CA894b534b9eA9C4632",
  		updated_at: 1586237928784
  	},
  	"1586238448586": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x0b19679bdEBA8Ae070534dA587cd4161D0053d75",
  		updated_at: 1586242201453
  	},
  	"1586253728867": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x3a936D6Ec8e28f7254A1603D33d040eE044a8340",
  		updated_at: 1586266128230
  	},
  	"1586267134607": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x9F1Cdfa4501a5B601E39141B1dF10B4ba3EAB978",
  		updated_at: 1586269322701
  	},
  	"1586273268014": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x1fF052905302eBbB1Ea38648c588B5F0826c655f",
  		updated_at: 1586284007229
  	},
  	"1586344166328": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xFdE7611924484765d4BAbeBd0a37Dc1d43c193C5",
  		updated_at: 1586344472249
  	},
  	"1586427421260": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xF6ae1A8bD48307609353388fFB0ab91dC7cc28C1",
  		updated_at: 1586436228998
  	},
  	"1586452175809": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x4F2e7A845cDbe0a6957C30D9051e453dA1838261",
  		updated_at: 1586452194216
  	},
  	"1586458717203": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x09662026534c93C0e36187110f6c6508D7c82654",
  		updated_at: 1586458815291
  	},
  	"1586501942236": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xCD7D03cf805c633DeA6FC3E7522d343A8caAD9Cb",
  		updated_at: 1586516562199
  	},
  	"1586518076316": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x4817a0Cf1016069a0b17B77d16bdF64B5243003B",
  		updated_at: 1586519769536
  	},
  	"1586519899574": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xA3d11db1823547b6434b3e821d14b58d9dDD819E",
  		updated_at: 1586524521697
  	},
  	"1586525870458": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x1E57ccB526292cCaD5255982000A280Ea7F8259b",
  		updated_at: 1586546908167
  	},
  	"1586589955485": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x8096f0c657B1111caaBE7059e7DE2E9428d7Ca26",
  		updated_at: 1586599421761
  	},
  	"1586681824745": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x592c129085b61A3110Ebd1DCD99F3Cfe97A54dF3",
  		updated_at: 1586688748031
  	},
  	"1586716667226": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xab8A1078d984C20A8646A3cEA960A29586D48631",
  		updated_at: 1586726798182
  	},
  	"1586765761638": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x65fcf441f00395A5649c05E5c81fC6Fad463FFc1",
  		updated_at: 1586768342468
  	},
  	"1586780448303": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x7593B6cd2DA98aa575DB77Aef358f0853559aF83",
  		updated_at: 1586780480702
  	},
  	"1586791657977": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x9Eabad7BEf5Dd7CDeCc8cc954ae391D15d668f8f",
  		updated_at: 1586802772990
  	},
  	"1586896685537": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x117460c5aE4Fb538C344778ebD9Ca4923d22A38e",
  		updated_at: 1586900596283
  	},
  	"1586987389907": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x78A9b2871462cdA05A9b82b20262487bAa70d11c",
  		updated_at: 1586994802571
  	},
  	"1587016996544": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xf759A0e8F2fFBb5F5a9DD50f1106668FBE29bC93",
  		updated_at: 1587017068769
  	},
  	"1587085748924": {
  		links: {
  		},
  		events: {
  		},
  		address: "0x59d3631c86BbE35EF041872d502F218A39FBa150",
  		updated_at: 1587085888987
  	},
  	"1587217659844": {
  		links: {
  		},
  		events: {
  		},
  		address: "0xe97DbD7116D168190F8A6E7beB1092c103c53a12",
  		updated_at: 1587219821437
  	}
  };
  var ELAJSStoreJSON = {
  	fileName: fileName,
  	contractName: contractName,
  	source: source,
  	sourcePath: sourcePath,
  	sourceMap: sourceMap,
  	deployedSourceMap: deployedSourceMap,
  	abi: abi,
  	ast: ast,
  	bytecode: bytecode,
  	deployedBytecode: deployedBytecode,
  	compiler: compiler,
  	networks: networks
  };

  /**
   * TODO: consistent returns of promise
   * - Must support ephemeral (anonymous calls)
   * - Needs to have a way to connect to Fortmatic
   * - Do we expect the parent app to pass in the ozWeb3 and fmWeb3?
   * - do we track state and an entire table schema? cached?
   * - web3 should definitely be external, we pass it in and instantiate the contract
   */

  var ELA_JS = /*#__PURE__*/function () {
    /**
     *
     * @param options
     */
    function ELA_JS(options) {
      classCallCheck(this, ELA_JS);

      console.log('constructor');
      /*
      ************************************************************************************************************
      * Passed In
      ************************************************************************************************************
       */

      this.contractAddress = options.contractAddress;
      /*
       This could be 1 of 2 possibilities
       1. The storage contract owner is running in a secure env and this is the owner of the storage contract.
          However for most of the developers they will have a Fortmatic account and need to export the priv key
          to take advantage of this, so they will be stuck using the ElastosJS GUI or import this into a custom
          app.
        2. This is deployed and the user is not the owner, most likely case.
       */

      this.defaultWeb3 = options.defaultWeb3; // this is the ephemeral signer for anonymous calls which don't prompt for a signature

      this.ephemeralWeb3 = options.ephemeralWeb3;
      this.network = options.network || constants.NETWORK.LOCAL;
      /*
      ************************************************************************************************************
      * Internal
      ************************************************************************************************************
       */
      // default instance - points to ElastosJS contract

      this.defaultInstance = null; // ephemeral instance - points to ElastosJS contract

      this.ephemeralInstance = null;
      this.ozWeb3 = null;
      this.fmWeb3 = null;
      this.schema = {};
      this.contractABI = ELAJSStoreJSON.abi;
      this.contractBytecode = ELAJSStoreJSON.bytecode;
      this.config = {
        gasPrice: '1000000000'
      };
      this.debug = true;

      this._initialize();
    }
    /**
     * We should setup the web3 components if not passed in
     * @private
     */


    createClass(ELA_JS, [{
      key: "_initialize",
      value: function _initialize() {
        if (this.defaultWeb3 && this.contractAddress) {
          this.defaultInstance = new this.defaultWeb3.eth.Contract(this.contractABI, this.contractAddress);
        }

        if (this.ephemeralWeb3 && this.contractAddress) {
          // the ozWeb3 is constructed slightly differently
          this.ephemeralInstance = new this.ephemeralWeb3.lib.eth.Contract(this.contractABI, this.contractAddress);
        } // 1. fetch table list
        // 2. lazy fetch schema?

      }
      /**
       * It is very important that on additional/secondary ela-js instances that you call:
       *
       * await ethConfig.elajsUser.defaultWeb3.currentProvider.baseProvider.enable()
       *
       * This initializes the fortmatic web3 provider to sign transactions
       *
       * @param contractAddress
       */

    }, {
      key: "setDatabase",
      value: function setDatabase(contractAddress) {
        this.contractAddress = contractAddress;
        this.defaultInstance = new this.defaultWeb3.eth.Contract(this.contractABI, contractAddress);
        this.ephemeralInstance = new this.ephemeralWeb3.lib.eth.Contract(this.contractABI, contractAddress);
      }
    }, {
      key: "deployDatabase",
      value: function deployDatabase(ethAddress) {
        var newContract = new this.defaultWeb3.eth.Contract(this.contractABI);
        /*
        let fromAccount
         if (this.defaultWeb3.currentProvider &&
          this.defaultWeb3.currentProvider.baseProvider &&
          this.defaultWeb3.currentProvider.baseProvider.isFortmatic)
        {
          const ethAccounts = await this.defaultWeb3.eth.getAccounts()
           fromAccount = ethAccounts[0]
        } else {
          fromAccount = this.defaultWeb3.eth.personal.currentProvider.addresses[0]
        }
         */

        return newContract.deploy({
          data: this.contractBytecode
        }).send({
          useGSN: false,
          from: ethAddress,
          gasPrice: this.config.gasPrice
        });
      }
    }, {
      key: "initializeContract",
      value: function initializeContract(ethAddress) {
        console.log(ethAddress, this.defaultInstance);
        return this.defaultInstance.methods.initialize().send({
          useGSN: false,
          from: ethAddress,
          gasPrice: this.config.gasPrice
        });
      } // fm call only
      // we pass in ethAddress because we don't wait to wait for a fortmatic async fetch for ethAccounts

    }, {
      key: "createTable",
      value: function createTable(tableName, permission, cols, colTypes, ethAddress) {
        var tableNameValue = Web3.utils.stringToHex(tableName);
        var tableKey = namehash(tableName);

        if (this.debug) {
          console.log('createTable', tableKey);
          console.log(tableNameValue); // this should only work locally, fortmatic would use a different path

          console.log(this.defaultWeb3.eth.personal.currentProvider.addresses[0]);
          console.log('gasPrice', this.config.gasPrice);
        }

        return this.defaultInstance.methods.createTable(tableNameValue, tableKey, permission, cols, colTypes).send({
          from: ethAddress || this.defaultWeb3.eth.personal.currentProvider.addresses[0],
          gasPrice: this.config.gasPrice
        });
      }
    }, {
      key: "getTables",
      value: function () {
        var _getTables = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.ephemeralInstance.methods.getTables().call();

                case 2:
                  return _context.abrupt("return", _context.sent);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function getTables() {
          return _getTables.apply(this, arguments);
        }

        return getTables;
      }()
    }, {
      key: "getTableMetadata",
      value: function () {
        var _getTableMetadata = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(tableName) {
          var tableKey;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  tableKey = namehash(tableName);
                  _context2.next = 3;
                  return this.ephemeralInstance.methods.getTableMetadata(tableKey).call();

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getTableMetadata(_x) {
          return _getTableMetadata.apply(this, arguments);
        }

        return getTableMetadata;
      }()
    }, {
      key: "getTableSchema",
      value: function () {
        var _getTableSchema = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(tableName) {
          var tableKey;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  tableKey = namehash(tableName);
                  _context3.next = 3;
                  return this.ephemeralInstance.methods.getSchema(tableKey).call();

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getTableSchema(_x2) {
          return _getTableSchema.apply(this, arguments);
        }

        return getTableSchema;
      }()
    }, {
      key: "getTableIds",
      value: function () {
        var _getTableIds = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(tableName) {
          var tableKey;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  tableKey = namehash(tableName);
                  _context4.next = 3;
                  return this.ephemeralInstance.methods.getTableIds(tableKey).call();

                case 3:
                  return _context4.abrupt("return", _context4.sent);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getTableIds(_x3) {
          return _getTableIds.apply(this, arguments);
        }

        return getTableIds;
      }()
      /**
       * The storage smart contract does not support auto_increment ids, therefore we
       * always generate randomBytes
       *
       * TODO: we really want to return a Promise immediately, which resolves to all the inserts
       *
       * There are 3 types of tables
       * 1 = private, must be FORTMATIC signer and only works if it's the owner
       * 2 = public, can be any signer
       * 3 = shared, can be any signer
       *
       * @param tableName
       * @param cols Array of column names, name must be 32 chars or less
       * @param colTypes Array of column types
       * @param values For now we just require byte32 values
       * @param options - struct
       * @param options.signer -
       */

    }, {
      key: "insertRow",
      value: function () {
        var _insertRow = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(tableName, cols, values, options) {
          var id, _this$_getKeys, idKey, tableKey, i, fieldIdTableKey, fieldKey;

          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(options && options.id && (options.id.substring(0, 2) !== '0x' || options.id.length !== 66))) {
                    _context5.next = 2;
                    break;
                  }

                  throw new Error('options.id must be a 32 byte hex string prefixed with 0x');

                case 2:
                  if (!(cols.length !== values.length)) {
                    _context5.next = 4;
                    break;
                  }

                  throw new Error('cols, values arrays must be same length');

                case 4:
                  id = Web3.utils.randomHex(32);

                  if (options && options.id) {
                    id = options.id;
                  }

                  _this$_getKeys = this._getKeys(tableName, id.substring(2)), idKey = _this$_getKeys.idKey, tableKey = _this$_getKeys.tableKey; // TODO: check cache for table schema? Be lazy for now and always check?

                  i = 0;

                case 8:
                  if (!(i < cols.length)) {
                    _context5.next = 17;
                    break;
                  }

                  fieldIdTableKey = namehash("".concat(cols[i], ".").concat(id.substring(2), ".").concat(tableName));
                  console.log("fieldIdTableKey = ".concat(fieldIdTableKey));
                  fieldKey = keccak256(cols[i]);
                  _context5.next = 14;
                  return this.ephemeralInstance.methods.insertVal(tableKey, idKey, fieldKey, id, values[i]).send({
                    from: this.ephemeralWeb3.accounts[0]
                  });

                case 14:
                  i++;
                  _context5.next = 8;
                  break;

                case 17:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function insertRow(_x4, _x5, _x6, _x7) {
          return _insertRow.apply(this, arguments);
        }

        return insertRow;
      }()
      /**
       * Returns a promise
       *
       * TODO: the promise should resolve with the fieldIdTableKey and transaction hash
       *
       * @param tableName
       * @param col
       * @param val
       * @param options
       * @returns {*}
       */

    }, {
      key: "insertVal",
      value: function insertVal(tableName, col, val, options) {
        if (options && options.id && (options.id.substring(0, 2) !== '0x' || options.id.length !== 66)) {
          throw new Error('options.id must be a 32 byte hex string prefixed with 0x');
        }

        var id = Web3.utils.randomHex(32);

        if (options && options.id) {
          id = options.id;
        }

        var _this$_getKeys2 = this._getKeys(tableName, id.substring(2)),
            idKey = _this$_getKeys2.idKey,
            tableKey = _this$_getKeys2.tableKey;

        var fieldIdTableKey = namehash("".concat(col, ".").concat(id.substring(2), ".").concat(tableName));
        console.log("fieldIdTableKey = ".concat(fieldIdTableKey));
        var fieldKey = keccak256(col);
        return this.ephemeralInstance.methods.insertVal(tableKey, idKey, fieldKey, id, val).send({
          from: this.ephemeralWeb3.accounts[0]
        });
      }
      /**
       * This is a call so we can always use ephemeral
       *
       * @param tableName
       * @param id - Should not have leading 0x
       * @param fieldName
       * @private
       * @returns promise
       */

    }, {
      key: "_getVal",
      value: function _getVal(tableName, id, fieldName) {
        if (id.substring(0, 2) !== '0x' || id.length !== 66) {
          throw new Error('id must be a 32 byte hex string prefixed with 0x');
        } // always strip the 0x


        id = id.substring(2);
        var fieldIdTableKey = namehash("".concat(fieldName, ".").concat(id, ".").concat(tableName));
        var result = this.ephemeralInstance.methods.getRowValue(fieldIdTableKey).call(); // TODO: type parsing? How to ensure this is fresh?
        // and so what if it isn't? We can't really change a field type right?
        // const fieldType = this.schema[tableKey][fieldKey].type

        /*
        switch (fieldType) {
           case constants.FIELD_TYPE.NUMBER:
            result = Web3.utils.hexToNumber(result)
            break
        }
         */

        return result;
      }
      /**
       * Update a single val, should be called by another fn
       * @private
       */

    }, {
      key: "_updateVal",
      value: function _updateVal() {}
    }, {
      key: "deleteRow",
      value: function deleteRow() {}
    }, {
      key: "getGSNBalance",
      value: function () {
        var _getGSNBalance = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.ephemeralInstance.methods.getGSNBalance().call();

                case 2:
                  return _context6.abrupt("return", _context6.sent);

                case 3:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getGSNBalance() {
          return _getGSNBalance.apply(this, arguments);
        }

        return getGSNBalance;
      }()
      /*
      ************************************************************************************************************
      * Internal
      ************************************************************************************************************
       */

    }, {
      key: "_getKeys",
      value: function _getKeys(tableName, id) {
        if (id.substring(0, 2) === '0x') {
          throw new Error('internal fn _getKeys expects id without 0x prefix');
        }

        var idKey = keccak256(id);
        var tableKey = namehash(tableName);
        var idTableKey = namehash("".concat(id, ".").concat(tableName));
        return {
          idKey: idKey,
          tableKey: tableKey,
          idTableKey: idTableKey
        };
      }
      /*
      ************************************************************************************************************
      * Relay Hub
      ************************************************************************************************************
       */

      /**
       * @param fromAddress ethAddress to send funds from, should correspond to the defaultWeb3 instance
       * @param contractAddress
       * @param amount to add in Ether
       */

    }, {
      key: "addFunds",
      value: function addFunds(fromAddress, contractAddress, amount) {
        var relayHubAddress = config[this.network].relayHubAddress;
        var relayHubInstance = new this.defaultWeb3.eth.Contract(relayHubData.abi, relayHubAddress, {
          data: relayHubData.bytecode
        });
        var amtInWei = new Web3.utils.BN(Web3.utils.toWei(amount, 'ether'));
        return relayHubInstance.methods.depositFor(contractAddress).send({
          useGSN: false,
          value: amtInWei,
          from: fromAddress
        });
      }
      /*
       ******************************************************************************************************
       * Query Functions
       ******************************************************************************************************
       */

      /**
       * Returns a chainable select object, that finally resolves to a callable Promise
       */

    }, {
      key: "select",
      value: function select() {// return this? - need to instantiate and return a new Class instance for chaining
        // pass a reference to elajs into the constructor?
      }
    }]);

    return ELA_JS;
  }();

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var exports$1 = _objectSpread({
    ELA_JS: ELA_JS,
    namehash: namehash,
    keccak256: keccak256
  }, bytesToTypes, {}, typesToBytes);

  return exports$1;

})));
